{"version":3,"sources":["../../src/dispatcher/ActorAppDispatcher.js"],"names":[],"mappings":";;;;;;QAKgB,Q,GAAA,Q;QAIA,O,GAAA,O;QAYA,Q,GAAA,Q;QAoCA,a,GAAA,a;;AAzDhB;;AACA;;AAEA,IAAM,OAAO,sBAAb;;AAEO,SAAS,QAAT,CAAkB,QAAlB,EAA4B;AACjC,SAAO,KAAK,QAAL,CAAc,QAAd,CAAP;AACD;;AAEM,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AAC3B,SAAO,KAAK,OAAL,CAAa,GAAb,CAAP;AACD;;;;;;;;;;AAUM,SAAS,QAAT,CAAkB,IAAlB,EAAqC;AAAA,MAAb,MAAa,yDAAJ,EAAI;;AAC1C,MAAI,CAAC,IAAL,EAAW;AACT,UAAM,IAAI,KAAJ,CAAU,6BAAV,CAAN;AACD;;;;;AAKD,MAAI,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;;;;;AAKzC,QAAI,SAAS,+BAAY,aAAzB,EAAwC;AACtC,UAAI,OAAO,KAAX,EAAkB;AAChB,gBAAQ,KAAR,CAAc,IAAd,EAAoB,MAApB;AACD,OAFD,MAEO;AACL,gBAAQ,IAAR,CAAa,IAAb,EAAmB,MAAnB;AACD;AACF;AACF;;AAED,OAAK,QAAL,YAAgB,UAAhB,IAAyB,MAAzB;;AAEA,MAAI,OAAO,KAAX,EAAkB;AAChB,WAAO,QAAQ,MAAR,CAAe,OAAO,KAAtB,CAAP;AACD;;AAED,SAAO,QAAQ,OAAR,CAAgB,OAAO,QAAP,GAAkB,OAAO,QAAzB,GAAoC,MAApD,CAAP;AACD;;AAED,IAAM,WAAW,QAAQ,KAAR,CAAc,IAAd,CAAmB,OAAnB,CAAjB;;;;;AAKO,SAAS,aAAT,CAAuB,OAAvB,EAAgC,KAAhC,EAAoD;AAAA,MAAb,MAAa,yDAAJ,EAAI;AAAA,MACjD,OADiD,GACnB,KADmB,CACjD,OADiD;AAAA,MACxC,OADwC,GACnB,KADmB,CACxC,OADwC;AAAA,MAC/B,OAD+B,GACnB,KADmB,CAC/B,OAD+B;;;AAGzD,WAAS,OAAT,EAAkB,MAAlB;AACA,SAAO,QAAQ,IAAR,CACL;AAAA,WAAY,SAAS,OAAT,eAAuB,MAAvB,IAA+B,kBAA/B,IAAZ;AAAA,GADK,EAEL;AAAA,WAAS,SAAS,OAAT,eAAuB,MAAvB,IAA+B,YAA/B,IAAT;AAAA,GAFK,EAGL,KAHK,CAGC,QAHD,CAAP;AAID;;kBAEc,I","file":"ActorAppDispatcher.js","sourcesContent":["import { Dispatcher } from 'flux';\nimport { ActionTypes } from '../constants/ActorAppConstants';\n\nconst flux = new Dispatcher();\n\nexport function register(callback) {\n  return flux.register(callback);\n}\n\nexport function waitFor(ids) {\n  return flux.waitFor(ids);\n}\n\n// Some Flux examples have methods like `handleViewAction`\n// or `handleServerAction` here. They are only useful if you\n// want to have extra pre-processing or logging for such actions,\n// but I found no need for them.\n\n/**\n * Dispatches a single action.\n */\nexport function dispatch(type, action = {}) {\n  if (!type) {\n    throw new Error('You forgot to specify type.');\n  }\n\n  // In production, thanks to DefinePlugin in webpack.config.production.js,\n  // this comparison will turn `false`, and UglifyJS will cut logging out\n  // as part of dead code elimination.\n  if (process.env.NODE_ENV !== 'production') {\n    // Logging all actions is useful for figuring out mistakes in code.\n    // All data that flows into our application comes in form of actions.\n    // Actions are just plain JavaScript objects describing “what happened”.\n    // Think of them as newspapers.\n    if (type !== ActionTypes.LOGGER_APPEND) {\n      if (action.error) {\n        console.error(type, action);\n      } else {\n        console.info(type, action);\n      }\n    }\n  }\n\n  flux.dispatch({ type, ...action });\n\n  if (action.error) {\n    return Promise.reject(action.error);\n  }\n\n  return Promise.resolve(action.response ? action.response : action);\n}\n\nconst logError = console.error.bind(console);\n\n/**\n * Dispatches three actions for an async operation represented by promise.\n */\nexport function dispatchAsync(promise, types, action = {}) {\n  const { request, success, failure } = types;\n\n  dispatch(request, action);\n  return promise.then(\n    response => dispatch(success, { ...action, response }),\n    error => dispatch(failure, { ...action, error })\n  ).catch(logError);\n}\n\nexport default flux;\n"]}