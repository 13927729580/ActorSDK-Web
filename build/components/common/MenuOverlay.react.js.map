{"version":3,"sources":["../../../src/components/common/MenuOverlay.react.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAcM,WAAW;YAAX,WAAW;;eAAX,WAAW;;qCAGS;AACtB,UAAM,OAAO,GAAG,wBAAc,UAAU,EAAE,CAAC;;AAE3C,aAAO;AACL,6BAAqB,EAAE,wBAAc,qBAAqB,CAAC,OAAO,CAAC,GAAG,CAAC;AACvE,2BAAmB,EAAE,wBAAc,mBAAmB,EAAE;AACxD,kBAAU,EAAE,wBAAc,aAAa,EAAE;AACzC,kBAAU,EAAE,wBAAc,aAAa,EAAE;AACzC,mBAAW,EAAE,wBAAc,OAAO,EAAE;AACpC,eAAO,EAAP,OAAO;OACR,CAAC;KACH;;;AAED,WAhBI,WAAW,CAgBH,KAAK,EAAE;0BAhBf,WAAW;;kEAAX,WAAW,aAiBP,KAAK;GACZ;;eAlBG,WAAW;;6BAoBN;mBAC8F,IAAI,CAAC,KAAK;UAAvG,qBAAqB,UAArB,qBAAqB;UAAE,mBAAmB,UAAnB,mBAAmB;UAAE,OAAO,UAAP,OAAO;UAAE,UAAU,UAAV,UAAU;UAAE,WAAW,UAAX,WAAW;UAAE,UAAU,UAAV,UAAU;;AAChG,UAAM,WAAW,GAAG,sBAAY,cAAc,EAAE,CAAC;;AAEjD,UAAM,oBAAoB,GAAG,0BAAW,cAAc,EAAE;AACtD,8BAAsB,EAAE,qBAAqB,IAAI,mBAAmB;OACrE,CAAC,CAAC;;AAEH,aACE;;UAAK,SAAS,EAAE,oBAAoB,AAAC;QAEjC,qBAAqB,GACjB,0DAAgB,OAAO,EAAE,OAAO,AAAC;AACjB,oBAAU,EAAE,UAAU,AAAC;AACvB,cAAI,EAAE,WAAW,AAAC;AAClB,sBAAY,MAAA,GAAE,GAC9B,IAAI;QAGR,mBAAmB,GACf,6DAAmB,IAAI,EAAE,WAAW,AAAC;AAClB,oBAAU,EAAE,UAAU,AAAC;AACvB,sBAAY,MAAA,GAAE,GACjC,IAAI;OAEN,CACN;KACH;;;SA/CG,WAAW;;;AAAX,WAAW,CACR,SAAS,GAAG;SAAM,gDAA4B;CAAA;;kBAiDxC,iBAAU,MAAM,CAAC,WAAW,EAAE,EAAC,IAAI,EAAE,KAAK,EAAC,CAAC","file":"MenuOverlay.react.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport { Container } from 'flux/utils';\nimport classnames from 'classnames';\n\nimport MessageActions from './dropdown/MessageActions.react';\nimport RecentContextMenu from './dropdown/RecentContextMenu.react'\n\nimport DropdownStore from '../../stores/DropdownStore';\nimport DialogStore from '../../stores/DialogStore';\n\nclass MenuOverlay extends Component {\n  static getStores = () => [DropdownStore, DialogStore];\n\n  static calculateState() {\n    const message = DropdownStore.getMessage();\n\n    return {\n      isMessageDropdownOpen: DropdownStore.isMessageDropdownOpen(message.rid),\n      isRecentContextOpen: DropdownStore.isRecentContextOpen(),\n      targetRect: DropdownStore.getTargetRect(),\n      contextPos: DropdownStore.getContextPos(),\n      contextPeer: DropdownStore.getPeer(),\n      message\n    };\n  }\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { isMessageDropdownOpen, isRecentContextOpen, message, targetRect, contextPeer, contextPos } = this.state;\n    const currentPeer = DialogStore.getCurrentPeer();\n\n    const menuOverlayClassName = classnames('menu-overlay', {\n      'menu-overlay--opened': isMessageDropdownOpen || isRecentContextOpen\n    });\n\n    return (\n      <div className={menuOverlayClassName}>\n        {\n          isMessageDropdownOpen\n            ? <MessageActions message={message}\n                              targetRect={targetRect}\n                              peer={currentPeer}\n                              hideOnScroll/>\n            : null\n        }\n        {\n          isRecentContextOpen\n            ? <RecentContextMenu peer={contextPeer}\n                                 contextPos={contextPos}\n                                 hideOnScroll/>\n            : null\n        }\n      </div>\n    );\n  }\n}\n\nexport default Container.create(MenuOverlay, {pure: false});\n"]}