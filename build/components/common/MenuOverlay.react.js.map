{"version":3,"sources":["../../../src/components/common/MenuOverlay.react.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAcM,WAAW;YAAX,WAAW;;AAAX,aAAW,CAGR,cAAc,6BAAG;AACtB,QAAM,OAAO,GAAG,wBAAc,UAAU,EAAE,CAAC;;AAE3C,WAAO;AACL,2BAAqB,EAAE,wBAAc,qBAAqB,CAAC,OAAO,CAAC,GAAG,CAAC;AACvE,yBAAmB,EAAE,wBAAc,mBAAmB,EAAE;AACxD,gBAAU,EAAE,wBAAc,aAAa,EAAE;AACzC,gBAAU,EAAE,wBAAc,aAAa,EAAE;AACzC,iBAAW,EAAE,wBAAc,OAAO,EAAE;AACpC,aAAO,EAAP,OAAO;KACR,CAAC;GACH;;AAED,WAhBI,WAAW,CAgBH,KAAK,EAAE;0BAhBf,WAAW;;4CAiBb,sBAAM,KAAK,CAAC;GACb;;AAlBG,aAAW,WAoBf,MAAM,qBAAG;iBAC8F,IAAI,CAAC,KAAK;QAAvG,qBAAqB,UAArB,qBAAqB;QAAE,mBAAmB,UAAnB,mBAAmB;QAAE,OAAO,UAAP,OAAO;QAAE,UAAU,UAAV,UAAU;QAAE,WAAW,UAAX,WAAW;QAAE,UAAU,UAAV,UAAU;;AAChG,QAAM,WAAW,GAAG,sBAAY,cAAc,EAAE,CAAC;;AAEjD,QAAM,oBAAoB,GAAG,0BAAW,cAAc,EAAE;AACtD,4BAAsB,EAAE,qBAAqB,IAAI,mBAAmB;KACrE,CAAC,CAAC;;AAEH,WACE;;QAAK,SAAS,EAAE,oBAAoB,AAAC;MAEjC,qBAAqB,GACjB,0DAAgB,OAAO,EAAE,OAAO,AAAC;AACjB,kBAAU,EAAE,UAAU,AAAC;AACvB,YAAI,EAAE,WAAW,AAAC;AAClB,oBAAY,MAAA,GAAE,GAC9B,IAAI;MAGR,mBAAmB,GACf,6DAAmB,IAAI,EAAE,WAAW,AAAC;AAClB,kBAAU,EAAE,UAAU,AAAC;AACvB,oBAAY,MAAA,GAAE,GACjC,IAAI;KAEN,CACN;GACH;;SA/CG,WAAW;;;AAAX,WAAW,CACR,SAAS,GAAG;SAAM,gDAA4B;CAAA;;kBAiDxC,iBAAU,MAAM,CAAC,WAAW,EAAE,EAAC,IAAI,EAAE,KAAK,EAAC,CAAC","file":"MenuOverlay.react.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport { Container } from 'flux/utils';\nimport classnames from 'classnames';\n\nimport MessageActions from './dropdown/MessageActions.react';\nimport RecentContextMenu from './dropdown/RecentContextMenu.react'\n\nimport DropdownStore from '../../stores/DropdownStore';\nimport DialogStore from '../../stores/DialogStore';\n\nclass MenuOverlay extends Component {\n  static getStores = () => [DropdownStore, DialogStore];\n\n  static calculateState() {\n    const message = DropdownStore.getMessage();\n\n    return {\n      isMessageDropdownOpen: DropdownStore.isMessageDropdownOpen(message.rid),\n      isRecentContextOpen: DropdownStore.isRecentContextOpen(),\n      targetRect: DropdownStore.getTargetRect(),\n      contextPos: DropdownStore.getContextPos(),\n      contextPeer: DropdownStore.getPeer(),\n      message\n    };\n  }\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { isMessageDropdownOpen, isRecentContextOpen, message, targetRect, contextPeer, contextPos } = this.state;\n    const currentPeer = DialogStore.getCurrentPeer();\n\n    const menuOverlayClassName = classnames('menu-overlay', {\n      'menu-overlay--opened': isMessageDropdownOpen || isRecentContextOpen\n    });\n\n    return (\n      <div className={menuOverlayClassName}>\n        {\n          isMessageDropdownOpen\n            ? <MessageActions message={message}\n                              targetRect={targetRect}\n                              peer={currentPeer}\n                              hideOnScroll/>\n            : null\n        }\n        {\n          isRecentContextOpen\n            ? <RecentContextMenu peer={contextPeer}\n                                 contextPos={contextPos}\n                                 hideOnScroll/>\n            : null\n        }\n      </div>\n    );\n  }\n}\n\nexport default Container.create(MenuOverlay, {pure: false});\n"]}