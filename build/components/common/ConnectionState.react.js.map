{"version":3,"sources":["../../../src/components/common/ConnectionState.react.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAaM,eAAe;YAAf,eAAe;;AACnB,WADI,eAAe,CACP,KAAK,EAAE;0BADf,eAAe;;iDAEjB,sBAAM,KAAK,CAAC;;AAEZ,QAAM,WAAW,GAAG,0BAAgB,GAAG,EAAE,CAAC;AAC1C,UAAK,OAAO,GAAG,WAAW,CAAC,OAAO,GAAG,WAAW,CAAC,OAAO,6BAAU,CAAC;;GACpE;;AANG,iBAAe,CAUZ,cAAc,6BAAG;AACtB,WAAO;AACL,qBAAe,EAAE,+BAAqB,QAAQ,EAAE;KACjD,CAAC;GACH;;AAdG,iBAAe,WAgBnB,MAAM,qBAAG;QACC,eAAe,GAAK,IAAI,CAAC,KAAK,CAA9B,eAAe;;AAEvB,QAAM,SAAS,GAAG,0BAAW,kBAAkB,EAAE;AAC/C,gCAA0B,EAAE,eAAe,KAAK,oCAAiB,MAAM;AACvE,oCAA8B,EAAE,eAAe,KAAK,oCAAiB,UAAU;KAChF,CAAC,CAAC;;AAEH,WACE;;QAAK,SAAS,EAAE,SAAS,AAAC;MAEtB,eAAe,KAAK,oCAAiB,QAAQ,GACzC,6DAAkB,EAAE,uBAAqB,eAAe,AAAG,EAAC,MAAM,EAAE,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAC,AAAC,GAAE,GAC9F,IAAI;KAEN,CACP;GACF;;SAjCG,eAAe;;;AAAf,eAAe,CAQZ,SAAS,GAAG;SAAM,gCAAsB;CAAA;;kBA4BlC,iBAAU,MAAM,CAAC,eAAe,EAAE,EAAC,IAAI,EAAE,KAAK,EAAC,CAAC","file":"ConnectionState.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport { Container } from 'flux/utils';\nimport { FormattedMessage } from 'react-intl';\nimport SharedContainer from '../../utils/SharedContainer';\nimport { appName, ConnectionStates } from '../../constants/ActorAppConstants';\nimport classnames from 'classnames';\n\nimport ConnectionStateStore from '../../stores/ConnectionStateStore';\n\nclass ConnectionState extends Component {\n  constructor(props) {\n    super(props);\n\n    const SharedActor = SharedContainer.get();\n    this.appName = SharedActor.appName ? SharedActor.appName : appName;\n  }\n\n  static getStores = () => [ConnectionStateStore];\n\n  static calculateState() {\n    return {\n      connectionState: ConnectionStateStore.getState()\n    };\n  }\n\n  render() {\n    const { connectionState } = this.state;\n\n    const className = classnames('connection-state', {\n      'connection-state--online': connectionState === ConnectionStates.ONLINE,\n      'connection-state--connection': connectionState === ConnectionStates.CONNECTING\n    });\n\n    return (\n      <div className={className}>\n        {\n          connectionState !== ConnectionStates.UPDATING\n            ? <FormattedMessage id={`connectionState.${connectionState}`} values={{appName: this.appName}}/>\n            : null\n        }\n      </div>\n    )\n  }\n}\n\nexport default Container.create(ConnectionState, {pure: false});\n"]}