{"version":3,"sources":["../../../../src/components/common/Stateful/Root.react.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAaqB,IAAI;YAAJ,IAAI;;AACvB,WADmB,IAAI,CACX,KAAK,EAAE;0BADA,IAAI;;kEAAJ,IAAI,aAEf,KAAK;GACZ;;eAHkB,IAAI;;6BAWd;mBACuC,IAAI,CAAC,KAAK;UAAhD,YAAY,UAAZ,YAAY;UAAE,SAAS,UAAT,SAAS;UAAE,QAAQ,UAAR,QAAQ;;AAEzC,UAAM,WAAW,GAAG,SAAd,WAAW,CAAI,KAAK,EAAE,IAAI,EAAK;AACnC,eAAO,AAAC,KAAK,KAAK,mBAtBf,iBAAiB,CAsBgB,OAAO,IAAI,IAAI,sBAAY,IAC5D,KAAK,KAAK,mBAvBV,iBAAiB,CAuBW,UAAU,IAAI,IAAI,yBAAe,AAAC,IAC9D,KAAK,KAAK,mBAxBV,iBAAiB,CAwBW,OAAO,IAAI,IAAI,sBAAY,AAAC,IACxD,KAAK,KAAK,mBAzBV,iBAAiB,CAyBW,OAAO,IAAI,IAAI,sBAAY,AAAC,CAAA;OAC5D,CAAC;;AAEF,UAAM,iBAAiB,GAAG,YA9BrB,IAAI,EA8BsB,QAAQ,EAAE,UAAC,KAAK,EAAK;AAClD,YAAI,WAAW,CAAC,YAAY,EAAE,KAAK,CAAC,IAAI,CAAC,EAAE,OAAO,KAAK,CAAC;OACzD,CAAC,CAAC;;AAEH,aACE;;UAAK,SAAS,EAAE,SAAS,AAAC;QAAE,iBAAiB;OAAO,CACrD;KACF;;;SA5BkB,IAAI;UART,SAAS;;AAQJ,IAAI,CAKhB,SAAS,GAAG;AACjB,WAAS,EAAE,OAdY,SAAS,CAcX,MAAM;AAC3B,cAAY,EAAE,OAfS,SAAS,CAeR,MAAM,CAAC,UAAU;AACzC,UAAQ,EAAE,OAhBa,SAAS,CAgBZ,KAAK;CAC1B;kBATkB,IAAI","file":"Root.react.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { find } from 'lodash';\nimport React, { Component, PropTypes } from 'react';\nimport { AsyncActionStates } from '../../../constants/ActorAppConstants';\n\nimport Pending from './Pending.react';\nimport Processing from './Processing.react';\nimport Success from './Success.react';\nimport Failure from './Failure.react';\n\nexport default class Root extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  static propTypes = {\n    className: PropTypes.string,\n    currentState: PropTypes.number.isRequired,\n    children: PropTypes.array\n  };\n\n  render() {\n    const { currentState, className, children } = this.props;\n\n    const equalsState = (state, type) => {\n      return (state === AsyncActionStates.PENDING && type === Pending) ||\n        (state === AsyncActionStates.PROCESSING && type === Processing) ||\n        (state === AsyncActionStates.SUCCESS && type === Success) ||\n        (state === AsyncActionStates.FAILURE && type === Failure)\n    };\n\n    const currentStateChild = find(children, (child) => {\n      if (equalsState(currentState, child.type)) return child;\n    });\n\n    return (\n      <div className={className}>{currentStateChild}</div>\n    )\n  }\n}\n"]}