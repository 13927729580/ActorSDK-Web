{"version":3,"sources":["../../src/components/ActivitySection.react.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgBM,eAAe;YAAf,eAAe;;AACnB,WADI,eAAe,CACP,KAAK,EAAE;0BADf,eAAe;;kEAAf,eAAe,aAEX,KAAK;GACZ;;eAHG,eAAe;;6BAeV;mBACwB,IAAI,CAAC,KAAK;UAAjC,IAAI,UAAJ,IAAI;UAAE,IAAI,UAAJ,IAAI;UAAE,MAAM,UAAN,MAAM;;AAE1B,UAAI,IAAI,KAAK,IAAI,EAAE;AACjB,YAAM,iBAAiB,GAAG,0BAAW,UAAU,EAAE;AAC/C,2BAAiB,EAAE,MAAM;SAC1B,CAAC,CAAC;AACH,YAAI,YAAY,YAAA,CAAC;;AAEjB,gBAAQ,IAAI,CAAC,IAAI;AACf,eAAK,mBAlCJ,SAAS,CAkCK,IAAI;AACjB,wBAAY,GAAG,uDAAa,IAAI,EAAE,IAAI,AAAC,GAAE,CAAC;AAC1C,kBAAM;AAAA,AACR,eAAK,mBArCJ,SAAS,CAqCK,KAAK;AAClB,wBAAY,GAAG,wDAAc,KAAK,EAAE,IAAI,AAAC,GAAE,CAAC;AAC5C,kBAAM;AAAA,AACR,kBAAQ;SACT;;AAED,eACE;;YAAS,SAAS,EAAE,iBAAiB,AAAC;UACnC,YAAY;SACL,CACV;OACH,MAAM;AACL,eAAO,IAAI,CAAC;OACb;KACF;;;qCAnCuB;AACtB,aAAO;AACL,YAAI,EAAE,sBAAY,cAAc,EAAE;AAClC,YAAI,EAAE,0BAAgB,OAAO,EAAE;AAC/B,cAAM,EAAE,wBAAc,MAAM,EAAE;OAC/B,CAAC;KACH;;;SAbG,eAAe;UAZL,SAAS;;AAYnB,eAAe,CAKZ,SAAS,GAAG;SAAM,2EAA6C;CAAA;;kBAwCzD,OAxDN,SAAS,CAwDO,MAAM,CAAC,eAAe,EAAE,EAAC,IAAI,EAAE,KAAK,EAAC,CAAC","file":"ActivitySection.react.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component } from 'react';\nimport { Container } from 'flux/utils';\nimport classNames from 'classnames';\nimport { PeerTypes } from '../constants/ActorAppConstants';\n\nimport ActivityStore from '../stores/ActivityStore';\nimport DialogStore from '../stores/DialogStore';\nimport DialogInfoStore from '../stores/DialogInfoStore';\n\nimport UserProfile from './activity/UserProfile.react';\nimport GroupProfile from './activity/GroupProfile.react';\n\nclass ActivitySection extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  static getStores = () => [DialogStore, DialogInfoStore, ActivityStore];\n\n  static calculateState() {\n    return {\n      peer: DialogStore.getCurrentPeer(),\n      info: DialogInfoStore.getInfo(),\n      isOpen: ActivityStore.isOpen()\n    };\n  }\n\n  render() {\n    const { peer, info, isOpen } = this.state;\n\n    if (peer !== null) {\n      const activityClassName = classNames('activity', {\n        'activity--shown': isOpen\n      });\n      let activityBody;\n\n      switch (peer.type) {\n        case PeerTypes.USER:\n          activityBody = <UserProfile user={info}/>;\n          break;\n        case PeerTypes.GROUP:\n          activityBody = <GroupProfile group={info}/>;\n          break;\n        default:\n      }\n\n      return (\n        <section className={activityClassName}>\n          {activityBody}\n        </section>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default Container.create(ActivitySection, {pure: false});\n"]}