{"version":3,"sources":["../../../../src/components/dialog/messages/Text.react.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,IAAM,WAAW,GAAG,SAAd,WAAW,CAAI,IAAI,EAAK;AAC5B,MAAM,UAAU,GAAG,sBAAY,cAAc,CAAC,IAAI,CAAC,CAAC;AACpD,MAAI,aAAa,GAAG,UAAU,CAAC;;AAE/B,cANO,KAAK,CAMN,aAAa,GAAG,IAAI,CAAC;AAC3B,cAPO,KAAK,CAON,YAAY,GAAG,IAAI,CAAC;AAC1B,cARO,KAAK,CAQN,mBAAmB,CAAC,KAAK,CAAC,CAAC;AACjC,eAAa,GAAG,YATT,KAAK,CASU,cAAc,CAAC,aAAa,CAAC,CAAC;AACpD,eAAa,GAAG,YAVT,KAAK,CAUU,eAAe,CAAC,aAAa,CAAC,CAAC;AACrD,SAAO,aAAa,CAAC;CACtB,CAAC;;AAEF,IAAM,mBAAmB,GAAG,wBAAQ,WAAW,EAAE;AAC/C,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;AACtB,KAAG,EAAE,KAAK;CACX,CAAC;;;;;;;AAAC;IAOG,IAAI;YAAJ,IAAI;;AAMR,WANI,IAAI,CAMI,KAAK,EAAE;0BANf,IAAI;;kEAAJ,IAAI,aAOA,KAAK;GACZ;;eARG,IAAI;;6BAUC;mBACqB,IAAI,CAAC,KAAK;UAA9B,IAAI,UAAJ,IAAI;UAAE,SAAS,UAAT,SAAS;;AAEvB,aACE;;UAAK,SAAS,EAAE,SAAS,AAAC;QACxB,uCAAK,SAAS,EAAC,MAAM,EAAC,uBAAuB,EAAE,EAAC,MAAM,EAAE,WAAW,CAAC,IAAI,CAAC,EAAC,AAAC,GAAE;OACzE,CACN;KACH;;;SAlBG,IAAI;UA9BM,SAAS;;AA8BnB,IAAI,CACD,SAAS,GAAG;AACjB,MAAI,EAAE,OAhCiB,SAAS,CAgChB,MAAM,CAAC,UAAU;AACjC,WAAS,EAAE,OAjCY,SAAS,CAiCX,MAAM;CAC5B;kBAiBY,IAAI","file":"Text.react.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport memoize from 'memoizee';\nimport ActorClient from '../../../utils/ActorClient';\n\nimport { Path } from '../../../constants/ActorAppConstants';\nimport { emoji } from '../../../utils/EmojiUtils';\n\nconst processText = (text) => {\n  const markedText = ActorClient.renderMarkdown(text);\n  let emojifiedText = markedText;\n\n  emoji.include_title = true;\n  emoji.include_text = true;\n  emoji.change_replace_mode('css');\n  emojifiedText = emoji.replace_colons(emojifiedText);\n  emojifiedText = emoji.replace_unified(emojifiedText);\n  return emojifiedText;\n};\n\nconst memoizedProcessText = memoize(processText, {\n  length: 1,\n  maxAge: 60 * 60 * 1000,\n  max: 10000\n});\n\n/**\n * Class that represents a component for display text message content\n * @param {string} text Message text\n * @param {string} className Component class name\n */\nclass Text extends Component {\n  static propTypes = {\n    text: PropTypes.string.isRequired,\n    className: PropTypes.string\n  };\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { text, className } = this.props;\n\n    return (\n      <div className={className}>\n        <div className=\"text\" dangerouslySetInnerHTML={{__html: processText(text)}}/>\n      </div>\n    );\n  }\n}\n\nexport default Text;\n"]}