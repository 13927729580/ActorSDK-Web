{"version":3,"sources":["../../../../src/components/dialog/messages/Animation.react.js"],"names":[],"mappings":";;;;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEM,S;;;AAQJ,qBAAY,KAAZ,EAAmB;AAAA;;AAAA,iDACjB,sBAAM,KAAN,CADiB;;AAGjB,UAAK,KAAL,GAAa;AACX,eAAS,2BAAiB,0BAAjB;AADE,KAAb;;AAIA,UAAK,OAAL,GAAe,MAAK,OAAL,CAAa,IAAb,OAAf;AAPiB;AAQlB;;sBAED,iB,gCAAoB;AAClB,QAAI,KAAK,KAAT,EAAgB;AACd,2CAAoB,KAAK,KAAL,CAAW,OAA/B,EAAwC,KAAK,IAAL,CAAU,MAAlD,EAA0D,KAA1D,CAAgE,UAAC,CAAD,EAAO;AACrE,gBAAQ,KAAR,CAAc,CAAd;AACD,OAFD;AAGD;AACF,G;;sBAED,O,oBAAQ,K,EAAO;AACb,UAAM,cAAN;AACA,SAAK,QAAL,CAAc,EAAE,SAAS,CAAC,KAAK,KAAL,CAAW,OAAvB,EAAd;AACD,G;;sBAED,a,4BAAgB;AAAA,iBACkB,KAAK,KADvB;AAAA,QACH,KADG,UACN,CADM;AAAA,QACO,MADP,UACI,CADJ;;AAEd,WAAO,+BAAc,KAAd,EAAqB,MAArB,CAAP;AACD,G;;sBAED,W,wBAAY,M,EAAQ,K,EAAO,M,EAAQ,O,EAAS;AAC1C,QAAI,CAAC,OAAL,EAAc;AACZ,aAAO,IAAP;AACD;;AAED,WACE;AACE,WAAK,MADP;AAEE,aAAO,KAFT;AAGE,cAAQ,MAHV;AAIE,eAAS,KAAK;AAJhB,MADF;AAQD,G;;sBAED,Y,yBAAa,K,EAAO,M,EAAQ,O,EAAS;AACnC,QAAM,QAAQ,EAAE,YAAF,EAAS,cAAT,EAAd;AACA,QAAI,OAAJ,EAAa;;AAEX,YAAM,OAAN,GAAgB,MAAhB;AACD;;AAED,WACE;AACE,WAAI,QADN;AAEE,aAAO,KAFT;AAGE,eAAS,KAAK;AAHhB,MADF;AAOD,G;;sBAED,W,wBAAY,O,EAAS;AACnB,QAAM,QAAQ,UAAU,sBAAV,GAAmC,qBAAjD;;AAEA,QAAM,YAAY,0BAAW,0CAAX,EAAuD;AACvE,4CAAsC;AADiC,KAAvD,CAAlB;;AAIA,WACE;AAAA;AAAA,QAAG,WAAW,SAAd,EAAyB,SAAS,KAAK,OAAvC;AAAiD;AAAjD,KADF;AAGD,G;;sBAED,M,qBAAS;AAAA,QACC,OADD,GACa,KAAK,KADlB,CACC,OADD;;AAAA,0BAEmB,KAAK,aAAL,EAFnB;;AAAA,QAEC,KAFD,mBAEC,KAFD;AAAA,QAEQ,MAFR,mBAEQ,MAFR;;AAGP,QAAM,SAAS,KAAK,KAAL,CAAW,OAAX,IAAsB,KAAK,KAAL,CAAW,OAAhD;;AAEA,WACE;AAAA;AAAA,QAAK,WAAU,oBAAf,EAAoC,OAAO,EAAE,YAAF,EAAS,cAAT,EAA3C;AACG,WAAK,WAAL,CAAiB,OAAjB,CADH;AAEG,WAAK,WAAL,CAAiB,MAAjB,EAAyB,KAAzB,EAAgC,MAAhC,EAAwC,OAAxC,CAFH;AAGG,WAAK,YAAL,CAAkB,KAAlB,EAAyB,MAAzB,EAAiC,OAAjC;AAHH,KADF;AAOD,G;;;;;AA3FG,S,CACG,S,GAAY;AACjB,WAAS,iBAAU,MADF;AAEjB,KAAG,iBAAU,MAAV,CAAiB,UAFH;AAGjB,KAAG,iBAAU,MAAV,CAAiB,UAHH;AAIjB,WAAS,iBAAU,MAAV,CAAiB;AAJT,C;kBA6FN,S","file":"Animation.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport classNames from 'classnames';\nimport PreferencesStore from '../../../stores/PreferencesStore';\nimport { getDimentions, renderImageToCanvas } from '../../../utils/ImageUtils';\n\nclass Animation extends Component {\n  static propTypes = {\n    fileUrl: PropTypes.string,\n    w: PropTypes.number.isRequired,\n    h: PropTypes.number.isRequired,\n    preview: PropTypes.string.isRequired\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      playing: PreferencesStore.isAnimationAutoPlayEnabled()\n    };\n\n    this.onClick = this.onClick.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.state) {\n      renderImageToCanvas(this.props.preview, this.refs.canvas).catch((e) => {\n        console.error(e);\n      });\n    }\n  }\n\n  onClick(event) {\n    event.preventDefault();\n    this.setState({ playing: !this.state.playing });\n  }\n\n  getDimentions() {\n    const { w: width, h: height } = this.props;\n    return getDimentions(width, height);\n  }\n\n  renderImage(source, width, height, playing) {\n    if (!playing) {\n      return null;\n    }\n\n    return (\n      <img\n        src={source}\n        width={width}\n        height={height}\n        onClick={this.onClick}\n      />\n    );\n  }\n\n  renderCanvas(width, height, playing) {\n    const style = { width, height };\n    if (playing) {\n      // Hide using style because DOM node required by renderImageToCanvas\n      style.display = 'none';\n    }\n\n    return (\n      <canvas\n        ref=\"canvas\"\n        style={style}\n        onClick={this.onClick}\n      />\n    );\n  }\n\n  renderState(playing) {\n    const glyph = playing ? 'pause_circle_outline' : 'play_circle_outline';\n\n    const className = classNames('material-icons message__animation__state', {\n      'message__animation__state--playing': playing\n    });\n\n    return (\n      <i className={className} onClick={this.onClick}>{glyph}</i>\n    );\n  }\n\n  render() {\n    const { playing } = this.state;\n    const { width, height } = this.getDimentions();\n    const source = this.props.fileUrl || this.props.preview;\n\n    return (\n      <div className=\"message__animation\" style={{ width, height }}>\n        {this.renderState(playing)}\n        {this.renderImage(source, width, height, playing)}\n        {this.renderCanvas(width, height, playing)}\n      </div>\n    );\n  }\n}\n\nexport default Animation;\n"]}