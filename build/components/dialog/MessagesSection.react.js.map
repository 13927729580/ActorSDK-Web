{"version":3,"sources":["../../../src/components/dialog/MessagesSection.react.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAIA;;AAEA;;;;AACA;;AAEA;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;;;AAGA,IAAI,WAAW,EAAX;AACJ,IAAI,eAAe,SAAf,YAAe,GAAM;AACvB,uBAAQ,QAAR,EAAkB,UAAC,CAAD;WAAO,gCAAsB,eAAtB,CAAsC,EAAE,IAAF,EAAQ,EAAE,OAAF;GAArD,CAAlB,CADuB;AAEvB,aAAW,EAAX,CAFuB;CAAN;;AAKnB,IAAI,wBAAwB,sBAAS,YAAT,EAAuB,EAAvB,EAA2B,EAAC,SAAS,GAAT,EAA5B,CAAxB;;IAEE;;;;;;;;;;;;0JA6BJ,kBAAkB,UAAC,GAAD,EAAS;UACjB,mBAAqB,MAAK,KAAL,CAArB,iBADiB;;AAEzB,UAAI,iBAAiB,GAAjB,CAAqB,GAArB,CAAJ,EAA+B;AAC7B,wCAAsB,WAAtB,CAAkC,iBAAiB,MAAjB,CAAwB,GAAxB,CAAlC,EAD6B;OAA/B,MAEO;AACL,wCAAsB,WAAtB,CAAkC,iBAAiB,GAAjB,CAAqB,GAArB,CAAlC,EADK;OAFP;KAFgB,QASlB,4BAA4B,UAAC,OAAD,EAAU,SAAV,EAAwB;UAC1C,OAAS,MAAK,KAAL,CAAT,KAD0C;;;AAGlD,UAAI,SAAJ,EAAe;AACb,iBAAS,IAAT,CAAc,EAAC,UAAD,EAAO,gBAAP,EAAd,EADa;AAEb,YAAI,0BAAgB,YAAhB,EAAJ,EAAoC;AAClC,kCADkC;SAApC;OAFF;KAH0B;;;AAtCxB,kBAUG,iCAAY;AACjB,WAAO,mDAAP,CADiB;;;AAVf,kBAcG,2CAAiB;AACtB,WAAO;AACL,wBAAkB,uBAAa,WAAb,EAAlB;AACA,2BAAqB,uBAAa,QAAb,EAArB;AACA,oBAAc,0BAAgB,YAAhB,EAAd;KAHF,CADsB;;;AAdpB,4BAsBJ,mDAAqB;QACX,eAAiB,KAAK,KAAL,CAAjB,aADW;;AAEnB,QAAI,YAAJ,EAAkB;AAChB,qBADgB;KAAlB;;;AAxBE,4BAiDJ,2BAAS;iBAC8C,KAAK,KAAL,CAD9C;QACC,mBADD;QACO,yBADP;QACgB,2BADhB;QAC0B,qBAD1B;QACiC,2BADjC;iBAE2C,KAAK,KAAL,CAF3C;QAEC,2CAFD;QAEmB,iDAFnB;;;AAIP,WACE;AACE,YAAM,IAAN;AACA,eAAS,OAAT;AACA,gBAAU,QAAV;AACA,aAAO,KAAP;AACA,wBAAkB,gBAAlB;AACA,gBAAU,QAAV;AACA,2BAAqB,mBAArB;AACA,gBAAU,KAAK,eAAL;AACV,0BAAoB,KAAK,yBAAL;AACpB,kBAAY,KAAK,KAAL,CAAW,UAAX;KAVd,CADF,CAJO;;;SAjDL;;;gBACG,YAAY;AACjB,QAAM,iBAAU,MAAV,CAAiB,UAAjB;AACN,YAAU,iBAAU,KAAV,CAAgB,UAAhB;AACV,WAAS,iBAAU,KAAV,CAAgB,UAAhB;AACT,SAAO,iBAAU,MAAV,CAAiB,UAAjB;AACP,YAAU,iBAAU,IAAV,CAAe,UAAf;AACV,cAAY,iBAAU,IAAV,CAAe,UAAf;;kBA+DD,iBAAU,MAAV,CAAiB,eAAjB,EAAkC,EAAC,MAAM,KAAN,EAAa,WAAW,IAAX,EAAhD","file":"MessagesSection.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport { forEach, map, debounce, isFunction } from 'lodash';\n\nimport React, { Component, PropTypes } from 'react';\nimport { Container } from 'flux/utils';\n\nimport MessageActionCreators from '../../actions/MessageActionCreators';\n\nimport VisibilityStore from '../../stores/VisibilityStore';\nimport DialogStore from '../../stores/DialogStore';\nimport MessageStore from '../../stores/MessageStore';\n\nimport MessagesList from './MessagesList.react';\n\n\nlet _delayed = [];\nlet flushDelayed = () => {\n  forEach(_delayed, (p) => MessageActionCreators.setMessageShown(p.peer, p.message));\n  _delayed = [];\n};\n\nlet flushDelayedDebounced = debounce(flushDelayed, 30, {maxWait: 100});\n\nclass MessagesSection extends Component {\n  static propTypes = {\n    peer: PropTypes.object.isRequired,\n    messages: PropTypes.array.isRequired,\n    overlay: PropTypes.array.isRequired,\n    count: PropTypes.number.isRequired,\n    isMember: PropTypes.bool.isRequired,\n    onLoadMore: PropTypes.func.isRequired\n  };\n\n  static getStores() {\n    return [MessageStore, VisibilityStore]\n  }\n\n  static calculateState() {\n    return {\n      selectedMessages: MessageStore.getSelected(),\n      isAllMessagesLoaded: MessageStore.isLoaded(),\n      isAppVisible: VisibilityStore.isAppVisible()\n    }\n  }\n\n  componentDidUpdate() {\n    const { isAppVisible } = this.state;\n    if (isAppVisible) {\n      flushDelayed();\n    }\n  };\n\n  onMessageSelect = (rid) => {\n    const { selectedMessages } = this.state;\n    if (selectedMessages.has(rid)) {\n      MessageActionCreators.setSelected(selectedMessages.remove(rid));\n    } else {\n      MessageActionCreators.setSelected(selectedMessages.add(rid));\n    }\n  };\n\n  onMessageVisibilityChange = (message, isVisible) => {\n    const { peer } = this.props;\n\n    if (isVisible) {\n      _delayed.push({peer, message});\n      if (VisibilityStore.isAppVisible()) {\n        flushDelayedDebounced();\n      }\n    }\n  };\n\n  render() {\n    const { peer, overlay, messages, count, isMember } = this.props;\n    const { selectedMessages, isAllMessagesLoaded } = this.state;\n\n    return (\n      <MessagesList\n        peer={peer}\n        overlay={overlay}\n        messages={messages}\n        count={count}\n        selectedMessages={selectedMessages}\n        isMember={isMember}\n        isAllMessagesLoaded={isAllMessagesLoaded}\n        onSelect={this.onMessageSelect}\n        onVisibilityChange={this.onMessageVisibilityChange}\n        onLoadMore={this.props.onLoadMore}\n      />\n    );\n  }\n}\n\nexport default Container.create(MessagesSection, {pure: false, withProps: true});\n"]}