{"version":3,"sources":["../../../src/components/activity/GroupProfile.react.js"],"names":[],"mappings":"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","file":"GroupProfile.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport classnames from 'classnames';\nimport { FormattedMessage } from 'react-intl';\nimport { lightbox } from '../../utils/ImageUtils';\nimport { Container } from 'flux/utils';\nimport Scrollbar from '../common/Scrollbar.react';\n\nimport ActorClient from '../../utils/ActorClient';\nimport confirm from '../../utils/confirm'\nimport { escapeWithEmoji } from '../../utils/EmojiUtils'\n\nimport DialogActionCreators from '../../actions/DialogActionCreators';\nimport InviteUserActions from '../../actions/InviteUserActions';\nimport EditGroupActionCreators from '../../actions/EditGroupActionCreators';\nimport NotificationsActionCreators from '../../actions/NotificationsActionCreators';\nimport CallActionCreators from '../../actions/CallActionCreators';\n\nimport DialogStore from '../../stores/DialogStore';\nimport NotificationsStore from '../../stores/NotificationsStore';\nimport GroupStore from '../../stores/GroupStore';\nimport UserStore from '../../stores/UserStore';\nimport OnlineStore from '../../stores/OnlineStore';\n\nimport SvgIcon from '../common/SvgIcon.react';\nimport AvatarItem from '../common/AvatarItem.react';\nimport GroupProfileMembers from '../activity/GroupProfileMembers.react';\nimport Fold from '../common/Fold.react';\nimport ToggleNotifications from '../common/ToggleNotifications.react';\n\nconst MAX_GROUP_CALL_SIZE = 25;\n\nclass GroupProfile extends Component {\n  static contextTypes = {\n    intl: PropTypes.object\n  };\n\n  static propTypes = {\n    group: PropTypes.object.isRequired\n  };\n\n  static getStores() {\n    return [NotificationsStore, GroupStore, OnlineStore];\n  }\n\n  static calculateState(prevState, nextProps) {\n    const gid = nextProps.group.id;\n    const peer = gid ? GroupStore.getGroup(gid) : null;\n    return {\n      peer,\n      // should not require to pass a peer\n      isNotificationsEnabled: peer ? NotificationsStore.isNotificationsEnabled(peer) : true,\n      integrationToken: GroupStore.getToken(),\n      message: OnlineStore.getMessage()\n    };\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isMoreDropdownOpen: false\n    }\n  }\n\n  onAddMemberClick = group => InviteUserActions.show(group);\n\n  onNotificationChange = event => {\n    const { peer } = this.state;\n    NotificationsActionCreators.changeNotificationsEnabled(peer, event.target.checked);\n  };\n\n  selectToken = (event) => event.target.select();\n\n  toggleMoreDropdown = () => {\n    const { isMoreDropdownOpen } = this.state;\n\n    if (!isMoreDropdownOpen) {\n      this.setState({ isMoreDropdownOpen: true });\n      document.addEventListener('click', this.closeMoreDropdown, false);\n    } else {\n      this.closeMoreDropdown();\n    }\n  };\n\n  closeMoreDropdown = () => {\n    this.setState({ isMoreDropdownOpen: false });\n    document.removeEventListener('click', this.closeMoreDropdown, false);\n  };\n\n  onClearGroupClick = (gid) => {\n    const { group } = this.props;\n\n    confirm(\n      <FormattedMessage id=\"modal.confirm.group.clear\" values={{ name: group.name }} />\n    ).then(\n      () => {\n        const peer = ActorClient.getGroupPeer(gid);\n        DialogActionCreators.clearChat(peer)\n      },\n      () => {}\n    );\n  };\n\n  onLeaveGroupClick = gid => {\n    const { group } = this.props;\n\n    confirm(\n      <FormattedMessage id=\"modal.confirm.group.leave\" values={{ name: group.name }} />\n    ).then(\n      () => DialogActionCreators.leaveGroup(gid),\n      () => {}\n    );\n  };\n\n  onDeleteGroupClick = (gid) => {\n    const { group } = this.props;\n\n    confirm(\n      <FormattedMessage id=\"modal.confirm.group.delete\" values={{ name: group.name }} />\n    ).then(\n      () => {\n        const peer = ActorClient.getGroupPeer(gid);\n        DialogActionCreators.deleteChat(peer);\n      },\n      () => {}\n    );\n  };\n\n  onEditGroupClick = (gid) => EditGroupActionCreators.show(gid);\n\n  handleAvatarClick = () => lightbox.open(this.props.group.bigAvatar);\n\n  makeCall = () => {\n    const { group } = this.props;\n    CallActionCreators.makeGroupCall(group.id);\n  };\n\n  render() {\n    const { group } = this.props;\n    const {\n      isNotificationsEnabled,\n      integrationToken,\n      isMoreDropdownOpen,\n      message\n    } = this.state;\n    const { intl } = this.context;\n\n    const myId = UserStore.getMyId();\n    const admin = UserStore.getUser(group.adminId);\n    const isMember = DialogStore.isMember();\n\n    const dropdownClassNames = classnames('dropdown', {\n      'dropdown--opened': isMoreDropdownOpen\n    });\n\n    const iconElement = (\n      <SvgIcon className=\"icon icon--green\" glyph=\"members\" />\n    );\n\n    const groupMeta = [\n      <header key={1}>\n        <AvatarItem image={group.bigAvatar}\n                    placeholder={group.placeholder}\n                    size=\"large\"\n                    title={group.name}\n                    onClick={this.handleAvatarClick}/>\n\n        <h3 className=\"group_profile__meta__title\" dangerouslySetInnerHTML={{ __html: escapeWithEmoji(group.name) }}/>\n        <div className=\"group_profile__meta__created\">\n          {intl.messages['createdBy']}\n          &nbsp;\n          <span dangerouslySetInnerHTML={{ __html: escapeWithEmoji(admin.name) }}/>\n        </div>\n      </header>\n    ,\n      group.about ? (\n        <div className=\"group_profile__meta__description\" key={2}\n             dangerouslySetInnerHTML={{ __html: escapeWithEmoji(group.about).replace(/\\n/g, '<br/>') }}/>\n      ) : null\n    ];\n\n    const token = (group.adminId === myId) ? (\n      <li className=\"profile__list__item group_profile__integration no-p\">\n        <Fold icon=\"power\" iconClassName=\"icon--pink\" title={intl.messages['integrationToken']}>\n          <div className=\"info info--light\">\n            <p>{intl.messages['integrationTokenHint']}</p>\n            <a href=\"https://actor.readme.io/docs/simple-integration\" target=\"_blank\">{intl.messages['integrationTokenHelp']}</a>\n          </div>\n          <textarea className=\"textarea\" onClick={this.selectToken} readOnly row=\"3\" value={integrationToken}/>\n        </Fold>\n      </li>\n    ) : null;\n\n    if (isMember) {\n      return (\n        <div className=\"activity__body group_profile\">\n          <Scrollbar>\n            <ul className=\"profile__list\">\n              <li className=\"profile__list__item group_profile__meta\">\n                {groupMeta}\n                <footer className=\"row\">\n                  <div className=\"col-xs\">\n                    {\n                      group.members.length < MAX_GROUP_CALL_SIZE\n                        ? <button className=\"button button--green button--wide\" onClick={this.makeCall}>\n                            <i className=\"material-icons\">phone</i>\n                            {intl.messages['button.call']}\n                          </button>\n                        : <button className=\"button button--flat button--wide\"\n                                  onClick={() => this.onAddMemberClick(group)}>\n                            <i className=\"material-icons\">person_add</i>\n                            {intl.messages['addPeople']}\n                          </button>\n                    }\n                  </div>\n                  <div style={{ width: 10 }}/>\n                  <div className=\"col-xs\">\n                    <div className={dropdownClassNames}>\n                      <button className=\"dropdown__button button button--flat button--wide\"\n                              onClick={this.toggleMoreDropdown}>\n                        <i className=\"material-icons\">more_horiz</i>\n                        {intl.messages['more']}\n                      </button>\n                      <ul className=\"dropdown__menu dropdown__menu--right\">\n                        <li className=\"dropdown__menu__item\" onClick={() => this.onEditGroupClick(group.id)}>\n                          <i className=\"material-icons\">mode_edit</i>\n                          {intl.messages['editGroup']}\n                        </li>\n                        {\n                          group.members.length < MAX_GROUP_CALL_SIZE\n                            ? <li className=\"dropdown__menu__item\" onClick={() => this.onAddMemberClick(group)}>\n                                <i className=\"material-icons\">person_add</i>\n                                {intl.messages['addPeople']}\n                              </li>\n                            : null\n                        }\n                        <li className=\"dropdown__menu__item\"\n                            onClick={() => this.onLeaveGroupClick(group.id)}>\n                          {intl.messages['leaveGroup']}\n                        </li>\n                        <li className=\"dropdown__menu__item\"\n                            onClick={() => this.onClearGroupClick(group.id)}>\n                          {intl.messages['clearGroup']}\n                        </li>\n                        <li className=\"dropdown__menu__item\"\n                            onClick={() => this.onDeleteGroupClick(group.id)}>\n                          {intl.messages['deleteGroup']}\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n                </footer>\n              </li>\n\n              <li className=\"profile__list__item group_profile__media no-p hide\">\n                <Fold icon=\"attach_file\" iconClassName=\"icon--gray\" title={intl.messages['sharedMedia']}>\n                  <ul>\n                    <li><a>230 Shared Photos and Videos</a></li>\n                    <li><a>49 Shared Links</a></li>\n                    <li><a>49 Shared Files</a></li>\n                  </ul>\n                </Fold>\n              </li>\n\n              <li className=\"profile__list__item group_profile__notifications no-p\">\n                <ToggleNotifications isNotificationsEnabled={isNotificationsEnabled} onNotificationChange={this.onNotificationChange}/>\n              </li>\n\n              <li className=\"profile__list__item group_profile__members no-p\">\n                <Fold iconElement={iconElement}\n                      title={message}>\n                  <GroupProfileMembers groupId={group.id} members={group.members}/>\n                </Fold>\n              </li>\n\n              {token}\n            </ul>\n          </Scrollbar>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"activity__body group_profile\">\n          <ul className=\"profile__list\">\n            <li className=\"profile__list__item group_profile__meta\">\n              {groupMeta}\n            </li>\n          </ul>\n        </div>\n      );\n    }\n\n  }\n}\n\nexport default Container.create(GroupProfile, { pure:false, withProps: true });\n"]}