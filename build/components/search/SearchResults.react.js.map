{"version":3,"sources":["../../../src/components/search/SearchResults.react.js"],"names":[],"mappings":";;;;;;AAIA;;;;AACA;;AACA;;AACA;;;;AACA;;;;;;;;;;;;;;IAEM,a;;;AAOJ,yBAAY,KAAZ,EAAmB;AAAA;;AAAA,iDACjB,sBAAM,KAAN,CADiB;;AAGjB,UAAK,qBAAL,GAA6B,kDAAsB,IAAtB,OAA7B;AAHiB;AAIlB;;0BAED,a,4BAAgB;AAAA,iBAC0B,KAAK,KAD/B;AAAA,QACN,KADM,UACN,KADM;AAAA,QACC,OADD,UACC,OADD;AAAA,QACU,WADV,UACU,WADV;;;AAGd,QAAI,CAAC,KAAL,EAAY;AACV,aACE;AAAA;AAAA,UAAI,WAAU,oDAAd;AACE,qEAAkB,IAAG,mBAArB;AADF,OADF;AAKD;;AAED,QAAI,WAAJ,EAAiB;AACf,aACE;AAAA;AAAA,UAAI,WAAU,wDAAd;AACE,qEAAkB,IAAG,kBAArB,EAAwC,QAAQ,EAAE,YAAF,EAAhD;AADF,OADF;AAKD;;AAED,QAAI,CAAC,QAAQ,MAAb,EAAqB;AACnB,aACE;AAAA;AAAA,UAAI,WAAU,wDAAd;AACE,yEAAsB,IAAG,iBAAzB,EAA2C,QAAQ,EAAE,YAAF,EAAnD;AADF,OADF;AAKD;;AAED,WAAO,QAAQ,GAAR,CAAY,UAAC,MAAD,EAAS,KAAT,EAAmB;AACpC,aAAO,uEAAsB,MAAtB,IAA8B,KAAK,KAAnC,IAAP;AACD,KAFM,CAAP;AAGD,G;;0BAED,M,qBAAS;AACP,WACE;AAAA;AAAA,QAAU,WAAU,cAApB;AACG,WAAK,aAAL;AADH,KADF;AAKD,G;;;;;AAnDG,a,CACG,S,GAAY;AACjB,SAAO,iBAAU,MAAV,CAAiB,UADP;AAEjB,WAAS,iBAAU,KAAV,CAAgB,UAFR;AAGjB,eAAa,iBAAU,IAAV,CAAe;AAHX,C;kBAqDN,a","file":"SearchResults.react.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport { shouldComponentUpdate } from 'react-addons-pure-render-mixin';\nimport { FormattedMessage, FormattedHTMLMessage } from 'react-intl';\nimport Scroller from '../common/Scroller.react';\nimport SearchResultItem from './SearchResultItem.react';\n\nclass SearchResults extends Component {\n  static propTypes = {\n    query: PropTypes.string.isRequired,\n    results: PropTypes.array.isRequired,\n    isSearching: PropTypes.bool.isRequired\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.shouldComponentUpdate = shouldComponentUpdate.bind(this);\n  }\n\n  renderResults() {\n    const { query, results, isSearching } = this.props;\n\n    if (!query) {\n      return (\n        <li className=\"search__results__item search__results__item--empty\">\n          <FormattedMessage id=\"search.emptyQuery\" />\n        </li>\n      );\n    }\n\n    if (isSearching) {\n      return (\n        <li className=\"search__results__item search__results__item--not-found\">\n          <FormattedMessage id=\"search.searching\" values={{ query }} />\n        </li>\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <li className=\"search__results__item search__results__item--not-found\">\n          <FormattedHTMLMessage id=\"search.notFound\" values={{ query }} />\n        </li>\n      );\n    }\n\n    return results.map((result, index) => {\n      return <SearchResultItem {...result} key={index} />\n    });\n  }\n\n  render() {\n    return (\n      <Scroller className=\"search__body\">\n        {this.renderResults()}\n      </Scroller>\n    );\n  }\n}\n\nexport default SearchResults;\n"]}