{"version":3,"sources":["../../../../src/components/modals/CreateGroup/Form.react.js"],"names":[],"mappings":"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","file":"Form.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport { Container } from 'flux/utils';\nimport { FormattedMessage } from 'react-intl';\nimport fuzzaldrin from 'fuzzaldrin';\nimport { CreateGroupSteps } from '../../../constants/ActorAppConstants';\n\nimport CreateGroupActionCreators from '../../../actions/CreateGroupActionCreators';\n\nimport ContactsStore from '../../../stores/ContactsStore';\nimport CreateGroupStore from '../../../stores/CreateGroupStore';\n\nimport ContactItem from '../../common/ContactItem.react';\nimport TextField from '../../common/TextField.react';\n\nclass CreateGroupForm extends Component {\n  static contextTypes = {\n    intl: PropTypes.object\n  };\n\n  static getStores() {\n    return [CreateGroupStore, ContactsStore];\n  }\n\n  static calculateState() {\n    return {\n      step: CreateGroupStore.getCurrentStep(),\n      name: CreateGroupStore.getGroupName(),\n      selectedUserIds: CreateGroupStore.getSelectedUserIds(),\n      contacts: ContactsStore.getState()\n    };\n  }\n\n  componentDidMount() {\n    if (this.state.step === CreateGroupSteps.NAME_INPUT) {\n      this.refs.groupName.focus();\n    }\n  }\n\n  getContacts() {\n    const { contacts, search } = this.state;\n\n    return fuzzaldrin.filter(contacts, search, {\n      key: 'name'\n    });\n  }\n\n  renderContacts() {\n    const { intl } = this.context;\n    const { selectedUserIds } = this.state;\n    const contacts = this.getContacts();\n\n    if (!contacts.length) {\n      return (\n        <li className=\"contacts__list__item contacts__list__item--empty text-center\">\n          {intl.messages['inviteModalNotFound']}\n        </li>\n      );\n    }\n\n    return contacts.map((contact, i) => {\n      const isSelected = selectedUserIds.has(contact.uid);\n      const icon = isSelected ? 'check_box' : 'check_box_outline_blank';\n\n      return (\n        <ContactItem {...contact} key={i}>\n          <a className=\"material-icons\" onClick={() => this.onContactToggle(contact, !isSelected)}>\n            {icon}\n          </a>\n        </ContactItem>\n      );\n    });\n  }\n\n  onContactToggle = (contact, isSelected) => {\n    const { selectedUserIds } = this.state;\n\n    if (isSelected) {\n      CreateGroupActionCreators.setSelectedUserIds(selectedUserIds.add(contact.uid));\n    } else {\n      CreateGroupActionCreators.setSelectedUserIds(selectedUserIds.remove(contact.uid));\n    }\n  };\n\n  handleNameChange = event => {\n    event.preventDefault();\n\n    this.setState({ name: event.target.value });\n  };\n\n  handleNameSubmit = event => {\n    event.preventDefault();\n\n    const { name } = this.state;\n    const trimmedName = name.trim();\n\n    if (trimmedName.length > 0) {\n      CreateGroupActionCreators.setGroupName(trimmedName);\n    }\n  };\n\n  handleCreateGroup = event => {\n    const { name, selectedUserIds } = this.state;\n\n    event.preventDefault();\n    CreateGroupActionCreators.createGroup(name, null, selectedUserIds.toJS());\n  };\n\n  onSearchChange = (e) => {\n    this.setState({ search: e.target.value });\n  };\n\n  render() {\n    const { step, name, selectedUserIds, search } = this.state;\n    const { intl } = this.context;\n    let stepForm;\n\n    switch (step) {\n      case CreateGroupSteps.NAME_INPUT:\n        stepForm = (\n          <form className=\"group-name\">\n            <div className=\"modal-new__body\">\n              <TextField className=\"input__material--wide\"\n                         floatingLabel={intl.messages['modal.createGroup.groupName']}\n                         ref=\"groupName\"\n                         onChange={this.handleNameChange}\n                         value={name}/>\n            </div>\n\n            <footer className=\"modal-new__footer text-right\">\n              <button className=\"button button--lightblue\"\n                      onClick={this.handleNameSubmit}>\n                {intl.messages['button.addMembers']}\n              </button>\n            </footer>\n\n          </form>\n        );\n        break;\n\n      case CreateGroupSteps.CONTACTS_SELECTION:\n      case CreateGroupSteps.CREATION_STARTED:\n        stepForm = (\n          <form className=\"group-members\">\n            <div className=\"modal-new__body\">\n              {/*TODO: refactor this!!! */}\n              <div className=\"modal-new__search\">\n                <i className=\"material-icons\">search</i>\n                <input className=\"input input--search\"\n                       onChange={this.onSearchChange}\n                       placeholder={intl.messages['inviteModalSearch']}\n                       type=\"search\"\n                       value={search}/>\n              </div>\n\n              <ul className=\"contacts__list\">\n                {this.renderContacts()}\n              </ul>\n            </div>\n\n            <footer className=\"modal-new__footer \">\n              <span className=\"pull-left\">\n                {\n                  step === CreateGroupSteps.CONTACTS_SELECTION ||\n                  step === CreateGroupSteps.CREATION_STARTED\n                    ? <div className=\"count\">\n                        <FormattedMessage id=\"members\" values={{ numMembers: selectedUserIds.size }}/>\n                      </div>\n                    : null\n                }\n              </span>\n              <span className=\"text-right\">\n                {\n                  step === CreateGroupSteps.CREATION_STARTED\n                    ? <button className=\"button button--lightblue\"\n                              disabled>{intl.messages['button.createGroup']}</button>\n                    : <button className=\"button button--lightblue\"\n                              onClick={this.handleCreateGroup}>{intl.messages['button.createGroup']}</button>\n                }\n              </span>\n\n            </footer>\n          </form>\n        );\n        break;\n      default:\n    }\n\n    return stepForm;\n  }\n}\n\nexport default Container.create(CreateGroupForm, { pure: false });\n"]}