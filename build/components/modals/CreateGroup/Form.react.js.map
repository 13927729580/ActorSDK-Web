{"version":3,"sources":["../../../../src/components/modals/CreateGroup/Form.react.js"],"names":[],"mappings":"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","file":"Form.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport { map } from 'lodash';\n\nimport React, { Component, PropTypes } from 'react';\nimport { Container } from 'flux/utils';\nimport { FormattedMessage } from 'react-intl';\nimport { CreateGroupSteps } from '../../../constants/ActorAppConstants';\n\nimport CreateGroupActionCreators from '../../../actions/CreateGroupActionCreators';\n\nimport ContactStore from '../../../stores/PeopleStore';\nimport CreateGroupStore from '../../../stores/CreateGroupStore';\n\nimport ContactItem from './ContactItem.react';\n\nimport TextField from '../../common/TextField.react';\n\nclass CreateGroupForm extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  static getStores() {\n    return [ContactStore, CreateGroupStore];\n  }\n\n  static calculateState() {\n    return {\n      step: CreateGroupStore.getCurrentStep(),\n      name: CreateGroupStore.getGroupName(),\n      selectedUserIds: CreateGroupStore.getSelectedUserIds(),\n      contacts: ContactStore.getList()\n    }\n  }\n\n  static contextTypes = {\n    intl: PropTypes.object\n  };\n\n  componentDidMount() {\n    if (this.state.step === CreateGroupSteps.NAME_INPUT) {\n      this.refs.groupName.focus();\n    }\n  }\n\n  onContactToggle = (contact, isSelected) => {\n    const { selectedUserIds } = this.state;\n\n    if (isSelected) {\n      CreateGroupActionCreators.setSelectedUserIds(selectedUserIds.add(contact.uid));\n    } else {\n      CreateGroupActionCreators.setSelectedUserIds(selectedUserIds.remove(contact.uid));\n    }\n  };\n\n  handleNameChange = event => {\n    event.preventDefault();\n\n    this.setState({name: event.target.value});\n  };\n\n  handleNameSubmit = event => {\n    event.preventDefault();\n\n    const { name } = this.state;\n    const trimmedName = name.trim();\n\n    if (trimmedName.length > 0) {\n      CreateGroupActionCreators.setGroupName(trimmedName);\n    }\n  };\n\n  handleCreateGroup = event => {\n    const { name, selectedUserIds } = this.state;\n\n    event.preventDefault();\n    CreateGroupActionCreators.createGroup(name, null, selectedUserIds.toJS());\n  };\n\n  render() {\n    const { step, name, selectedUserIds, contacts } = this.state;\n    const { intl } = this.context;\n    let stepForm;\n\n    switch (step) {\n      case CreateGroupSteps.NAME_INPUT:\n        stepForm = (\n          <form className=\"group-name\">\n            <div className=\"modal-new__body\">\n              <TextField className=\"input__material--wide\"\n                         floatingLabel={intl.messages['modal.createGroup.groupName']}\n                         ref=\"groupName\"\n                         onChange={this.handleNameChange}\n                         value={name}/>\n            </div>\n\n            <footer className=\"modal-new__footer text-right\">\n              <button className=\"button button--lightblue\"\n                      onClick={this.handleNameSubmit}>\n                {intl.messages['button.addMembers']}\n              </button>\n            </footer>\n\n          </form>\n        );\n        break;\n\n      case CreateGroupSteps.CONTACTS_SELECTION:\n      case CreateGroupSteps.CREATION_STARTED:\n        let contactList = map(contacts, (contact, i) => {\n          return (\n            <ContactItem contact={contact} key={i} onToggle={this.onContactToggle}/>\n          );\n        });\n        stepForm = (\n          <form className=\"group-members\">\n            <div className=\"count\">\n              <FormattedMessage id=\"members\" values={{numMembers: selectedUserIds.size}}/>\n            </div>\n\n            <div className=\"modal-new__body\">\n              <ul className=\"contacts__list\">\n                {contactList}\n              </ul>\n            </div>\n\n            <footer className=\"modal-new__footer text-right\">\n              {\n                step === CreateGroupSteps.CREATION_STARTED\n                  ? <button className=\"button button--lightblue\"\n                            disabled>{intl.messages['button.createGroup']}</button>\n                  : <button className=\"button button--lightblue\"\n                            onClick={this.handleCreateGroup}>{intl.messages['button.createGroup']}</button>\n              }\n\n            </footer>\n          </form>\n        );\n        break;\n      default:\n    }\n\n    return stepForm;\n  }\n}\n\nexport default Container.create(CreateGroupForm, {pure: false});\n"]}