{"version":3,"sources":["../../../../src/components/modals/createGroup/Form.react.js"],"names":[],"mappings":"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","file":"Form.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport { Container } from 'flux/utils';\nimport { FormattedMessage } from 'react-intl';\nimport fuzzaldrin from 'fuzzaldrin';\nimport { CreateGroupSteps } from '../../../constants/ActorAppConstants';\n\nimport CreateGroupActionCreators from '../../../actions/CreateGroupActionCreators';\n\nimport PeopleStore from '../../../stores/PeopleStore';\nimport CreateGroupStore from '../../../stores/CreateGroupStore';\n\nimport ContactItem from '../../common/ContactItem.react';\nimport TextField from '../../common/TextField.react';\n\nclass CreateGroupForm extends Component {\n  static contextTypes = {\n    intl: PropTypes.object\n  };\n\n  static getStores() {\n    return [CreateGroupStore, PeopleStore];\n  }\n\n  static calculateState() {\n    return {\n      step: CreateGroupStore.getCurrentStep(),\n      name: CreateGroupStore.getGroupName(),\n      selectedUserIds: CreateGroupStore.getSelectedUserIds(),\n      contacts: PeopleStore.getState()\n    };\n  }\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.onContactToggle = this.onContactToggle.bind(this);\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handleNameSubmit = this.handleNameSubmit.bind(this);\n    this.handleCreateGroup = this.handleCreateGroup.bind(this);\n    this.onSearchChange = this.onSearchChange.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.state.step === CreateGroupSteps.NAME_INPUT) {\n      this.refs.name.focus();\n    }\n  }\n\n  getContacts() {\n    const { contacts, search } = this.state;\n\n    return fuzzaldrin.filter(contacts, search, {\n      key: 'name'\n    });\n  }\n\n  renderContacts() {\n    const { selectedUserIds } = this.state;\n    const contacts = this.getContacts();\n\n    if (!contacts.length) {\n      return (\n        <li className=\"contacts__list__item contacts__list__item--empty text-center\">\n          <FormattedMessage id=\"invite.notFound\"/>\n        </li>\n      );\n    }\n\n    return contacts.map((contact, i) => {\n      const isSelected = selectedUserIds.has(contact.uid);\n      const icon = isSelected ? 'check_box' : 'check_box_outline_blank';\n\n      return (\n        <ContactItem {...contact} key={i}>\n          <a className=\"material-icons\" onClick={() => this.onContactToggle(contact, !isSelected)}>\n            {icon}\n          </a>\n        </ContactItem>\n      );\n    });\n  }\n\n  onContactToggle(contact, isSelected) {\n    const { selectedUserIds } = this.state;\n\n    if (isSelected) {\n      CreateGroupActionCreators.setSelectedUserIds(selectedUserIds.add(contact.uid));\n    } else {\n      CreateGroupActionCreators.setSelectedUserIds(selectedUserIds.remove(contact.uid));\n    }\n  }\n\n  handleNameChange(event) {\n    event.preventDefault();\n\n    this.setState({ name: event.target.value });\n  }\n\n  handleNameSubmit(event) {\n    event.preventDefault();\n\n    const { name } = this.state;\n    const trimmedName = name.trim();\n\n    if (trimmedName.length > 0) {\n      CreateGroupActionCreators.setGroupName(trimmedName);\n    }\n  }\n\n  handleCreateGroup(event) {\n    event.preventDefault();\n    const { name, selectedUserIds } = this.state;\n\n    CreateGroupActionCreators.createGroup(name, null, selectedUserIds.toJS());\n  }\n\n  onSearchChange(event) {\n    this.setState({ search: event.target.value });\n  }\n\n  renderGroupNameInput() {\n    const { name } = this.state;\n    return (\n      <TextField\n        className=\"input__material--wide\"\n        floatingLabel={<FormattedMessage id=\"modal.createGroup.groupName\"/>}\n        ref=\"name\"\n        onChange={this.handleNameChange}\n        value={name}/>\n    );\n  }\n\n  renderAddUsersButton() {\n    return (\n      <button className=\"button button--lightblue\" onClick={this.handleNameSubmit}>\n        <FormattedMessage id=\"button.addMembers\"/>\n      </button>\n    );\n  }\n\n  renderUserSearchInput() {\n    const { search } = this.state;\n    const { intl } = this.context;\n\n    return (\n      <div className=\"small-search\">\n        <i className=\"material-icons\">search</i>\n        <input\n          className=\"input\"\n          onChange={this.onSearchChange}\n          placeholder={intl.messages['invite.search']}\n          type=\"search\"\n          value={search}/>\n      </div>\n    );\n  }\n\n  renderSelectedUsersCount() {\n    const { selectedUserIds } = this.state;\n    return (\n      <div className=\"count\">\n        <FormattedMessage id=\"members\" values={{ numMembers: selectedUserIds.size }}/>\n      </div>\n    );\n  }\n\n  renderCreateGroupButton() {\n    const { step } = this.state;\n\n    if (step !== CreateGroupSteps.CREATION_STARTED) {\n      return (\n        <button className=\"button button--lightblue\" onClick={this.handleCreateGroup}>\n          <FormattedMessage id=\"button.createGroup\"/>\n        </button>\n      )\n    }\n\n    return (\n      <button className=\"button button--lightblue\" disabled>\n        <FormattedMessage id=\"button.createGroup\"/>\n      </button>\n    );\n  }\n\n  render() {\n    const { step } = this.state;\n\n    switch (step) {\n      case CreateGroupSteps.NAME_INPUT:\n        return (\n          <form className=\"group-name\">\n            <div className=\"modal__body\">\n              {this.renderGroupNameInput()}\n            </div>\n\n            <footer className=\"modal__footer text-right\">\n              {this.renderAddUsersButton()}\n            </footer>\n          </form>\n        );\n\n      case CreateGroupSteps.CONTACTS_SELECTION:\n      case CreateGroupSteps.CREATION_STARTED:\n        return (\n          <form className=\"group-members\">\n            <div className=\"modal__body\">\n              {this.renderUserSearchInput()}\n\n              <ul className=\"contacts__list\">\n                {this.renderContacts()}\n              </ul>\n            </div>\n\n            <footer className=\"modal__footer\">\n              <div className=\"row\">\n                <div className=\"col-xs text-left\">\n                  {this.renderSelectedUsersCount()}\n                </div>\n                <div className=\"col-xs text-right\">\n                  {this.renderCreateGroupButton()}\n                </div>\n              </div>\n            </footer>\n          </form>\n        );\n      default:\n        return null;\n    }\n  }\n}\n\nexport default Container.create(CreateGroupForm, { pure: false });\n"]}