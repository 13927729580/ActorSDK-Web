{"version":3,"sources":["../../../src/components/modals/MyProfile.react.js"],"names":[],"mappings":"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","file":"MyProfile.react.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component } from 'react';\nimport { Container } from 'flux/utils';\nimport Modal from 'react-modal';\nimport ReactMixin from 'react-mixin';\nimport { IntlMixin } from 'react-intl';\n\nimport ActorClient from '../../utils/ActorClient';\nimport { KeyCodes } from '../../constants/ActorAppConstants';\n\nimport MyProfileActions from '../../actions/MyProfileActionCreators';\nimport CropAvatarActionCreators from '../../actions/CropAvatarActionCreators';\n\nimport MyProfileStore from '../../stores/MyProfileStore';\nimport CropAvatarStore from '../../stores/CropAvatarStore';\n\nimport AvatarItem from '../common/AvatarItem.react';\nimport CropAvatarModal from './CropAvatar.react';\n\nimport { Styles, TextField } from 'material-ui';\nimport ActorTheme from '../../constants/ActorTheme';\n\nconst ThemeManager = new Styles.ThemeManager();\n\nclass MyProfile extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  static childContextTypes = {\n    muiTheme: React.PropTypes.object\n  };\n\n  getChildContext() {\n    return {\n      muiTheme: ThemeManager.getCurrentTheme()\n    };\n  }\n\n  static getStores = () => [MyProfileStore, CropAvatarStore];\n\n  static calculateState() {\n    return {\n      profile: MyProfileStore.getProfile(),\n      name: MyProfileStore.getName(),\n      nick: MyProfileStore.getNick(),\n      about: MyProfileStore.getAbout(),\n      isOpen: MyProfileStore.isModalOpen(),\n      isCropModalOpen: CropAvatarStore.isOpen()\n    };\n  }\n\n  componentWillMount() {\n    ThemeManager.setTheme(ActorTheme);\n    ThemeManager.setComponentThemes({\n      textField: {\n        textColor: 'rgba(0,0,0,.87)',\n        focusColor: '#68a3e7',\n        backgroundColor: 'transparent',\n        borderColor: '#68a3e7',\n        disabledTextColor: 'rgba(0,0,0,.4)'\n      }\n    });\n    this.setListeners();\n  }\n\n  componentWillUnmount() {\n    this.removeListeners();\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    if (nextState.isOpen) {\n      if (nextState.isCropModalOpen) {\n        this.removeListeners();\n      } else {\n        this.setListeners();\n      }\n    }\n  }\n\n  setListeners = () => document.addEventListener('keydown', this.onKeyDown, false);\n  removeListeners = () => document.removeEventListener('keydown', this.onKeyDown, false);\n\n  onClose = () => MyProfileActions.hide();\n\n  onKeyDown = event => {\n    if (event.keyCode === KeyCodes.ESC) {\n      event.preventDefault();\n      this.onClose();\n    }\n  };\n\n  onNameChange = event => this.setState({name: event.target.value});\n  onNicknameChange = event => this.setState({nick: event.target.value});\n  onAboutChange = event => this.setState({about: event.target.value});\n\n  onSave = () => {\n    const { nick, name, about } = this.state;\n\n    MyProfileActions.saveName(name);\n    MyProfileActions.saveNickname(nick);\n    MyProfileActions.editMyAbout(about);\n    this.onClose();\n  };\n\n  onProfilePictureInputChange = () => {\n    const imageInput = React.findDOMNode(this.refs.imageInput);\n    const imageForm = React.findDOMNode(this.refs.imageForm);\n    const file = imageInput.files[0];\n\n    let reader = new FileReader();\n    reader.onload = (event) => {\n      CropAvatarActionCreators.show(event.target.result);\n      imageForm.reset();\n    };\n    reader.readAsDataURL(file);\n  };\n\n  onChangeAvatarClick = () => {\n    const imageInput = React.findDOMNode(this.refs.imageInput);\n    imageInput.click()\n  };\n\n  onProfilePictureRemove = () => MyProfileActions.removeMyAvatar();\n\n  changeMyAvatar = (croppedImage) => MyProfileActions.changeMyAvatar(croppedImage);\n\n  render() {\n    const { isOpen, isCropModalOpen, profile, nick, name, about } = this.state;\n\n    const cropAvatar = isCropModalOpen ? <CropAvatarModal onCropFinish={this.changeMyAvatar}/> : null;\n\n    if (profile !== null && isOpen) {\n      return (\n        <Modal className=\"modal-new modal-new--profile\"\n               closeTimeoutMS={150}\n               isOpen={isOpen}\n               style={{width: 440}}>\n\n          <header className=\"modal-new__header\">\n            <a className=\"modal-new__header__icon material-icons\">person</a>\n            <h3 className=\"modal-new__header__title\">{this.getIntlMessage('modal.profile.title')}</h3>\n            <div className=\"pull-right\">\n              <button className=\"button button--lightblue\" onClick={this.onSave}>{this.getIntlMessage('button.done')}</button>\n            </div>\n          </header>\n          <div className=\"modal-new__body row\">\n            <div className=\"col-xs\">\n              <div className=\"name\">\n                <TextField className=\"login__form__input\"\n                           floatingLabelText={this.getIntlMessage('modal.profile.name')}\n                           fullWidth\n                           onChange={this.onNameChange}\n                           type=\"text\"\n                           value={name}/>\n              </div>\n              <div className=\"nick\">\n                <TextField className=\"login__form__input\"\n                           floatingLabelText={this.getIntlMessage('modal.profile.nick')}\n                           fullWidth\n                           onChange={this.onNicknameChange}\n                           type=\"text\"\n                           value={nick}/>\n              </div>\n              {\n                profile.phones[0]\n                  ? <div className=\"phone\">\n                      <TextField className=\"login__form__input\"\n                                 disabled\n                                 floatingLabelText={this.getIntlMessage('modal.profile.phone')}\n                                 fullWidth\n                                 type=\"tel\"\n                                 value={(profile.phones[0] || {}).number}/>\n                    </div>\n                  : null\n              }\n              {\n                profile.emails[0]\n                  ? <div className=\"phone\">\n                      <TextField className=\"login__form__input\"\n                                 disabled\n                                 floatingLabelText={this.getIntlMessage('modal.profile.email')}\n                                 fullWidth\n                                 type=\"email\"\n                                 value={(profile.emails[0] || {}).email}/>\n                    </div>\n                  : null\n              }\n              <div className=\"about\">\n                <label htmlFor=\"about\">{this.getIntlMessage('modal.profile.about')}</label>\n                <textarea className=\"textarea\"\n                          id=\"about\"\n                          onChange={this.onAboutChange}\n                          value={about}/>\n              </div>\n            </div>\n            <div className=\"profile-picture text-center\">\n              <div className=\"profile-picture__changer\">\n                <AvatarItem image={profile.bigAvatar}\n                            placeholder={profile.placeholder}\n                            size=\"big\"\n                            title={profile.name}/>\n                <a onClick={this.onChangeAvatarClick}>\n                  <span>\n                    {this.getIntlMessage('modal.profile.avatarChange')}\n                  </span>\n                </a>\n              </div>\n              <div className=\"profile-picture__controls\">\n                <a onClick={this.onProfilePictureRemove}>{this.getIntlMessage('modal.profile.avatarRemove')}</a>\n              </div>\n              <form className=\"hide\" ref=\"imageForm\">\n                <input onChange={this.onProfilePictureInputChange} ref=\"imageInput\" type=\"file\"/>\n              </form>\n            </div>\n          </div>\n\n          {cropAvatar}\n        </Modal>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nReactMixin.onClass(MyProfile, IntlMixin);\n\nexport default Container.create(MyProfile, {pure: false});\n"]}