{"version":3,"sources":["../../../../src/components/modals/PeopleList/PeopleList.react.js"],"names":[],"mappings":"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","file":"PeopleList.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport fuzzaldrin from 'fuzzaldrin';\nimport React, { Component, PropTypes } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport { Container } from 'flux/utils';\nimport Scrollbar from '../../common/Scrollbar.react';\n\nimport { KeyCodes } from '../../../constants/ActorAppConstants';\n\nimport ContactActionCreators from '../../../actions/ContactActionCreators';\nimport DialogActionCreators from '../../../actions/DialogActionCreators';\n\nimport PeopleStore from '../../../stores/PeopleStore';\nimport ContactsStore from '../../../stores/ContactsStore';\n\nimport People from './PeopleItem.react';\n\nclass PeopleList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      query: null,\n      selectedIndex: 0\n    };\n  }\n\n  static contextTypes = {\n    intl: PropTypes.object\n  };\n\n  static getStores() {\n    return [PeopleStore, ContactsStore];\n  }\n\n  static calculateState(prevState) {\n    const { isOpen } = PeopleStore.getState();\n    const contacts = ContactsStore.getState();\n\n    return {\n      ...prevState,\n      isOpen,\n      contacts\n    };\n  }\n\n  componentDidMount() {\n    this.setFocus();\n    document.addEventListener('keydown', this.handleKeyDown, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyDown, false);\n  }\n\n  setFocus = () => findDOMNode(this.refs.search).focus();\n\n  handleClose = () => ContactActionCreators.close();\n\n  handleSearchChange = (event) => {\n    const query = event.target.value;\n    this.setState({ query });\n  };\n\n  handleContactSelect = (contact) => {\n    DialogActionCreators.selectDialogPeerUser(contact.uid);\n    this.handleClose()\n  };\n\n  handleKeyDown = (event) => {\n    const { results, selectedIndex } = this.state;\n    let index = selectedIndex;\n\n    const selectNext = () => {\n      if (index < results.length - 1) {\n        index += 1;\n      } else if (index === results.length - 1) {\n        index = 0;\n      }\n\n      this.setState({ selectedIndex: index });\n\n      const scrollContainerNode = findDOMNode(this.refs.results).getElementsByClassName('ss-scrollarea')[0];\n      const selectedNode = findDOMNode(this.refs.selected);\n      const scrollContainerNodeRect = scrollContainerNode.getBoundingClientRect();\n      const selectedNodeRect = selectedNode.getBoundingClientRect();\n\n      if ((scrollContainerNodeRect.top + scrollContainerNodeRect.height) < (selectedNodeRect.top + selectedNodeRect.height)) {\n        this.handleScroll(scrollContainerNode.scrollTop + (selectedNodeRect.top + selectedNodeRect.height) - (scrollContainerNodeRect.top + scrollContainerNodeRect.height));\n      } else if (scrollContainerNodeRect.top > selectedNodeRect.top) {\n        this.handleScroll(0);\n      }\n    };\n    const selectPrev = () => {\n      if (index > 0) {\n        index -= 1;\n      } else if (index === 0) {\n        index = results.length - 1;\n      }\n\n      this.setState({ selectedIndex: index });\n\n      const scrollContainerNode = findDOMNode(this.refs.results).getElementsByClassName('ss-scrollarea')[0];\n      const selectedNode = findDOMNode(this.refs.selected);\n      const scrollContainerNodeRect = scrollContainerNode.getBoundingClientRect();\n      const selectedNodeRect = selectedNode.getBoundingClientRect();\n\n      if (scrollContainerNodeRect.top > selectedNodeRect.top) {\n        this.handleScroll(scrollContainerNode.scrollTop + selectedNodeRect.top - scrollContainerNodeRect.top);\n      } else if (selectedNodeRect.top > (scrollContainerNodeRect.top + scrollContainerNodeRect.height)) {\n        this.handleScroll(scrollContainerNode.scrollHeight);\n      }\n    };\n\n    switch (event.keyCode) {\n      case KeyCodes.ENTER:\n        event.stopPropagation();\n        event.preventDefault();\n        this.handleContactSelect(results[selectedIndex]);\n        break;\n\n      case KeyCodes.ARROW_UP:\n        event.stopPropagation();\n        event.preventDefault();\n        selectPrev();\n        break;\n      case KeyCodes.ARROW_DOWN:\n        event.stopPropagation();\n        event.preventDefault();\n        selectNext();\n        break;\n      case KeyCodes.TAB:\n        event.stopPropagation();\n        event.preventDefault();\n        if (event.shiftKey) {\n          selectPrev();\n        } else {\n          selectNext();\n        }\n        break;\n      default:\n    }\n  };\n\n  handleScroll = (top) => this.refs.results.scrollTo(top);\n\n  getPeople() {\n    const { query, contacts } = this.state;\n    if (!query) {\n      return contacts;\n    }\n\n    return contacts.filter((contact) => {\n      const score = fuzzaldrin.score(contact.name, query);\n      return score > 0;\n    });\n  }\n\n  renderPeople() {\n    const { intl } = this.context;\n    const { contacts, selectedIndex } = this.state;\n\n    if (!contacts.length) {\n      return <div>{intl.messages['modal.contacts.loading']}</div>;\n    }\n\n    const people = this.getPeople();\n    if (!people.length) {\n      return (\n        <li className=\"contacts__list__item contacts__list__item--empty text-center\">\n          {intl.messages['modal.contacts.notFound']}\n        </li>\n      );\n    }\n\n    return people.map((contact, index) => (\n      <People\n        contact={contact}\n        key={contact.uid}\n        onClick={this.handleContactSelect}\n        isSelected={selectedIndex === index}\n        ref={selectedIndex === index ? 'selected' : null}\n        onMouseOver={() => this.setState({ selectedIndex: index })}\n      />\n    ));\n  }\n\n  render() {\n    const { query } = this.state;\n    const { intl } = this.context;\n\n    return (\n      <div className=\"newmodal newmodal__contacts\">\n        <header className=\"newmodal__header\">\n          <h2>{intl.messages['modal.contacts.title']}</h2>\n        </header>\n\n        <section className=\"newmodal__search\">\n          <input className=\"newmodal__search__input\"\n                 onChange={this.handleSearchChange}\n                 placeholder={intl.messages['modal.contacts.search']}\n                 type=\"search\"\n                 ref=\"search\"\n                 value={query}/>\n        </section>\n\n        <Scrollbar ref=\"results\">\n          <ul className=\"newmodal__result contacts__list\">\n            {this.renderPeople()}\n          </ul>\n        </Scrollbar>\n      </div>\n    )\n  }\n}\n\nexport default Container.create(PeopleList, { pure: false });\n"]}