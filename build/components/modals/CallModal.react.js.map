{"version":3,"sources":["../../../src/components/modals/CallModal.react.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAeM,SAAS;YAAT,SAAS;;AACb,WADI,SAAS,CACD,KAAK,EAAE;0BADf,SAAS;;uEAAT,SAAS,aAEL,KAAK;;UAeb,WAAW,GAAG;aAAM,6BAAmB,IAAI,EAAE;KAAA;;UAE7C,SAAS,GAAG,UAAC,KAAK,EAAK;AACrB,UAAI,KAAK,CAAC,OAAO,KAAK,4BAAS,GAAG,EAAE;AAClC,aAAK,CAAC,cAAc,EAAE,CAAC;AACvB,cAAK,WAAW,EAAE,CAAC;OACpB;KACF;;;GArBA;;eAHG,SAAS;;6BA0BJ;mBACsB,IAAI,CAAC,KAAK;UAA/B,MAAM,UAAN,MAAM;UAAE,QAAQ,UAAR,QAAQ;;AAExB,UAAI,MAAM,EAAE;AACV,eACE;;YAAO,SAAS,EAAC,2BAA2B;AACrC,0BAAc,EAAE,GAAG,AAAC;AACpB,kBAAM,EAAE,MAAM,AAAC;UAEpB;;cAAK,SAAS,EAAC,mBAAmB;YAChC;;gBAAI,SAAS,EAAC,0BAA0B;cAAK,QAAQ;aAAa;WAC9D;UAEN,uCAAK,SAAS,EAAC,iBAAiB,GAC1B;UAEN;;cAAK,SAAS,EAAC,mBAAmB;YAChC;;gBAAQ,SAAS,EAAC,mCAAmC;;aAAgB;YACrE;;gBAAQ,SAAS,EAAC,mCAAmC;;aAAiB;WAClE;SACA,CACR;OACH,MAAM;AACL,eAAO,IAAI,CAAC;OACb;KACF;;;qCA5CuB;AACtB,aAAO;AACL,cAAM,EAAE,oBAAU,MAAM,EAAE;AAC1B,gBAAQ,EAAE,oBAAU,WAAW,EAAE;AACjC,mBAAW,EAAE,oBAAU,cAAc,EAAE;AACvC,gBAAQ,EAAE,oBAAU,WAAW,EAAE;AACjC,iBAAS,EAAE,oBAAU,YAAY,EAAE;OACpC,CAAC;KACH;;;SAfG,SAAS;;;AAAT,SAAS,CAKN,SAAS,GAAG;SAAM,qBAAW;CAAA;;kBAiDvB,iBAAU,MAAM,CAAC,SAAS,EAAE,EAAC,IAAI,EAAE,KAAK,EAAC,CAAC","file":"CallModal.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component } from 'react';\nimport { Container } from 'flux/utils';\n// import { FormattedMessage } from 'react-intl';\nimport Modal from 'react-modal';\n\nimport { KeyCodes } from '../../constants/ActorAppConstants';\n\nimport CallActionCreators from '../../actions/CallActionCreators';\n\nimport CallStore from '../../stores/CallStore'\n\nclass CallModal extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  static getStores = () => [CallStore];\n\n  static calculateState() {\n    return {\n      isOpen: CallStore.isOpen(),\n      callType: CallStore.getCallType(),\n      callMembers: CallStore.getCallMembers(),\n      callPeer: CallStore.getCallPeer(),\n      callState: CallStore.getCallState()\n    };\n  }\n\n  handleClose = () => CallActionCreators.hide();\n\n  onKeyDown = (event) => {\n    if (event.keyCode === KeyCodes.ESC) {\n      event.preventDefault();\n      this.handleClose();\n    }\n  };\n\n  render() {\n    const { isOpen, callType } = this.state;\n\n    if (isOpen) {\n      return (\n        <Modal className=\"modal-new modal-new--call\"\n               closeTimeoutMS={150}\n               isOpen={isOpen}>\n\n          <div className=\"modal-new__header\">\n            <h3 className=\"modal-new__header__title\">{`${callType} call`}</h3>\n          </div>\n\n          <div className=\"modal-new__body\">\n          </div>\n\n          <div className=\"modal-new__footer\">\n            <button className=\"button button--rised button--wide\">Answer</button>\n            <button className=\"button button--rised button--wide\">Decline</button>\n          </div>\n        </Modal>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default Container.create(CallModal, {pure: false});\n"]}