{"version":3,"sources":["../../../src/components/modals/ModalsWrapper.react.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkBM,aAAa;YAAb,aAAa;;AACjB,WADI,aAAa,CACL,KAAK,EAAE;0BADf,aAAa;;uEAAb,aAAa,aAET,KAAK;;UAyBb,aAAa,GAAG,UAAC,KAAK,EAAK;AACzB,cAAQ,KAAK,CAAC,OAAO;AACnB,aAAK,4BAAS,GAAG;AACf,eAAK,CAAC,cAAc,EAAE,CAAC;AACvB,gBAAK,WAAW,EAAE,CAAC;AACnB,gBAAM;AAAA,AACR,aAAK,4BAAS,CAAC;AACb,cAAI,KAAK,CAAC,OAAO,EAAE;AACjB,iBAAK,CAAC,cAAc,EAAE,CAAC;AACvB,kBAAK,WAAW,EAAE,CAAC;AACnB,8CAAwB,IAAI,EAAE,CAAC;WAChC;AACD,gBAAM;AAAA,AACR,aAAK,4BAAS,CAAC;AACb,cAAI,KAAK,CAAC,OAAO,EAAE;AACjB,iBAAK,CAAC,cAAc,EAAE,CAAC;AACvB,kBAAK,WAAW,EAAE,CAAC;AACnB,4CAAsB,IAAI,EAAE,CAAC;WAC9B;AACD,gBAAM;AAAA,AACR,gBAAQ;OACT;KACF;;UAED,WAAW,GAAG,YAAM;wBACsB,MAAK,KAAK;UAA1C,aAAa,eAAb,aAAa;UAAE,YAAY,eAAZ,YAAY;;AAEnC,UAAI,aAAa,EAAE;AACjB,wCAAsB,KAAK,EAAE,CAAC;OAC/B;AACD,UAAI,YAAY,EAAE;AAChB,0CAAwB,KAAK,EAAE,CAAC;OACjC;KACF;;;GAzDA;;eAHG,aAAa;;yCAkBI;AACnB,cAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;KAEjE;;;2CAEsB;AACrB,cAAQ,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;KACpE;;;6BAqCQ;mBACiC,IAAI,CAAC,KAAK;UAA1C,aAAa,UAAb,aAAa;UAAE,YAAY,UAAZ,YAAY;UAC3B,IAAI,GAAK,IAAI,CAAC,OAAO,CAArB,IAAI;;AAEZ,UAAM,gBAAgB,GAAG,0BAAW,eAAe,EAAE;AACnD,+BAAuB,EAAE,aAAa,IAAI,YAAY;OACvD,CAAC,CAAC;;AAEH,aACE;;UAAK,SAAS,EAAE,gBAAgB,AAAC;QAC/B;;YAAK,SAAS,EAAC,sBAAsB,EAAC,OAAO,EAAE,IAAI,CAAC,WAAW,AAAC;UAC9D;;cAAG,SAAS,EAAC,2BAA2B;;WAAU;UAClD;;cAAK,SAAS,EAAC,MAAM;YAAE,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC;WAAO;SACvD;QAEL,aAAa,GAAG,yDAAa,GAAG,IAAI;QACpC,YAAY,GAAG,wDAAY,GAAG,IAAI;OAC/B,CACN;KACH;;;qCA1EuB;AACtB,aAAO;AACL,qBAAa,EAAE,sBAAa,MAAM,EAAE;AACpC,oBAAY,EAAE,yBAAe,MAAM,EAAE;OACtC,CAAC;KACH;;;SAZG,aAAa;;;AAAb,aAAa,CAKV,SAAS,GAAG;SAAM,iDAA8B;CAAA;;AALnD,aAAa,CAcV,YAAY,GAAG;AACpB,MAAI,EAAE,iBAAU,MAAM;CACvB;kBAoEY,iBAAU,MAAM,CAAC,aAAa,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC","file":"ModalsWrapper.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport { Container } from 'flux/utils';\nimport classnames from 'classnames';\nimport { KeyCodes } from '../../constants/ActorAppConstants';\n\nimport ContactActionCreators from '../../actions/ContactActionCreators';\nimport GroupListActionCreators from '../../actions/GroupListActionCreators';\n\nimport ContactStore from '../../stores/PeopleStore';\nimport GroupListStore from '../../stores/GroupListStore';\n\nimport PeopleList from './PeopleList'\nimport GroupList from './GroupList'\n\nclass ModalsWrapper extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  static getStores = () => [ContactStore, GroupListStore];\n\n  static calculateState() {\n    return {\n      isPeoplesOpen: ContactStore.isOpen(),\n      isGroupsOpen: GroupListStore.isOpen()\n    };\n  }\n\n  static contextTypes = {\n    intl: PropTypes.object\n  };\n\n  componentWillMount() {\n    document.addEventListener('keydown', this.handleKeyDown, false);\n\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyDown, false);\n  }\n\n  handleKeyDown = (event) => {\n    switch (event.keyCode) {\n      case KeyCodes.ESC:\n        event.preventDefault();\n        this.handleClose();\n        break;\n      case KeyCodes.G:\n        if (event.ctrlKey) {\n          event.preventDefault();\n          this.handleClose();\n          GroupListActionCreators.open();\n        }\n        break;\n      case KeyCodes.P:\n        if (event.ctrlKey) {\n          event.preventDefault();\n          this.handleClose();\n          ContactActionCreators.open();\n        }\n        break;\n      default:\n    }\n  };\n\n  handleClose = () => {\n    const { isPeoplesOpen, isGroupsOpen } = this.state;\n\n    if (isPeoplesOpen) {\n      ContactActionCreators.close();\n    }\n    if (isGroupsOpen) {\n      GroupListActionCreators.close();\n    }\n  };\n\n  render() {\n    const { isPeoplesOpen, isGroupsOpen } = this.state;\n    const { intl } = this.context;\n\n    const wrapperClassName = classnames('modal-wrapper', {\n      'modal-wrapper--opened': isPeoplesOpen || isGroupsOpen\n    });\n\n    return (\n      <div className={wrapperClassName}>\n        <div className=\"modal-wrapper__close\" onClick={this.handleClose}>\n          <i className=\"close_icon material-icons\">close</i>\n          <div className=\"text\">{intl.messages['button.close']}</div>\n        </div>\n\n        {isPeoplesOpen ? <PeopleList/> : null}\n        {isGroupsOpen ? <GroupList/> : null}\n      </div>\n    );\n  }\n}\n\nexport default Container.create(ModalsWrapper, { pure: false });\n"]}