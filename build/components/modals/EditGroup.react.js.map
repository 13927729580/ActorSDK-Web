{"version":3,"sources":["../../../src/components/modals/EditGroup.react.js"],"names":[],"mappings":"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","file":"EditGroup.react.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component } from 'react';\nimport { Container } from 'flux/utils';\nimport Modal from 'react-modal';\nimport ReactMixin from 'react-mixin';\nimport { IntlMixin } from 'react-intl';\n//import { Styles, TextField } from 'material-ui';\n//import ActorTheme from '../../constants/ActorTheme';\n\nimport { KeyCodes } from '../../constants/ActorAppConstants';\n\nimport EditGroupStore from '../../stores/EditGroupStore';\nimport CropAvatarStore from '../../stores/CropAvatarStore';\n\nimport EditGroupActionCreators from '../../actions/EditGroupActionCreators';\nimport CropAvatarActionCreators from '../../actions/CropAvatarActionCreators';\n\nimport TextField from '../common/TextField.react';\nimport AvatarItem from '../common/AvatarItem.react';\nimport CropAvatarModal from './CropAvatar.react';\n\n//const ThemeManager = new Styles.ThemeManager();\n\nclass EditGroup extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  //static childContextTypes = {\n  //  muiTheme: React.PropTypes.object\n  //};\n  //\n  //getChildContext() {\n  //  return {\n  //    muiTheme: ThemeManager.getCurrentTheme()\n  //  };\n  //}\n\n  static getStores = () => [EditGroupStore, CropAvatarStore];\n\n  static calculateState() {\n    return {\n      isOpen: EditGroupStore.isOpen(),\n      group: EditGroupStore.getGroup(),\n      isAdmin: EditGroupStore.isAdmin(),\n      title: EditGroupStore.getTitle(),\n      about: EditGroupStore.getAbout(),\n      isCropModalOpen: CropAvatarStore.isOpen()\n    }\n  }\n\n  //componentWillMount() {\n  //  ThemeManager.setTheme(ActorTheme);\n  //  ThemeManager.setComponentThemes({\n  //    textField: {\n  //      textColor: 'rgba(0,0,0,.87)',\n  //      focusColor: '#68a3e7',\n  //      backgroundColor: 'transparent',\n  //      borderColor: '#68a3e7',\n  //      disabledTextColor: 'rgba(0,0,0,.4)'\n  //    }\n  //  });\n  //}\n\n  componentWillUnmount() {\n    this.removeListeners();\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    if (nextState.isOpen) {\n      nextState.isCropModalOpen ? this.removeListeners() : this.setListeners();\n    } else {\n      nextState.isCropModalOpen ? this.setListeners() : this.removeListeners();\n    }\n  }\n\n  setListeners = () => document.addEventListener('keydown', this.onKeyDown, false);\n  removeListeners = () => document.removeEventListener('keydown', this.onKeyDown, false);\n\n  onClose = () => EditGroupActionCreators.hide();\n  onTitleChange = event => this.setState({title: event.target.value});\n  onAboutChange = event => this.setState({about: event.target.value});\n\n  onKeyDown = event => {\n    if (event.keyCode === KeyCodes.ESC) {\n      event.preventDefault();\n      this.onClose();\n    }\n  };\n\n  onSave = () => {\n    const { group, title, about, isAdmin } = this.state;\n    EditGroupActionCreators.editGroupTitle(group.id, title);\n    if (isAdmin) {\n      EditGroupActionCreators.editGroupAbout(group.id, about);\n    }\n    this.onClose();\n  };\n\n  onProfilePictureInputChange = () => {\n    const imageInput = React.findDOMNode(this.refs.imageInput);\n    const imageForm = React.findDOMNode(this.refs.imageForm);\n    const file = imageInput.files[0];\n\n    let reader = new FileReader();\n    reader.onload = (event) => {\n      CropAvatarActionCreators.show(event.target.result);\n      imageForm.reset();\n    };\n    reader.readAsDataURL(file);\n  };\n\n  onChangeAvatarClick = () => {\n    const imageInput = React.findDOMNode(this.refs.imageInput);\n    imageInput.click()\n  };\n\n  changeGroupAvatar = (croppedImage) => {\n    const { group } = this.state;\n    EditGroupActionCreators.changeGroupAvatar(group.id, croppedImage);\n  };\n\n  onProfilePictureRemove = () =>  {\n    const { group } = this.state;\n    EditGroupActionCreators.removeGroupAvatar(group.id);\n  };\n\n  render() {\n    const { isOpen, group, isCropModalOpen, title, about, isAdmin } = this.state;\n\n    const cropAvatar = isCropModalOpen ? <CropAvatarModal onCropFinish={this.changeGroupAvatar}/> : null;\n\n    if (isOpen) {\n      return (\n        <Modal className=\"modal-new modal-new--edit-group\"\n               closeTimeoutMS={150}\n               isOpen={isOpen}\n               style={{width: 440}}>\n\n          <header className=\"modal-new__header\">\n            <a className=\"modal-new__header__icon material-icons\">edit</a>\n            <h3 className=\"modal-new__header__title\">{this.getIntlMessage('modal.group.title')}</h3>\n            <div className=\"pull-right\">\n              <button className=\"button button--lightblue\" onClick={this.onSave}>{this.getIntlMessage('button.done')}</button>\n            </div>\n          </header>\n\n          <div className=\"modal-new__body row\">\n            <div className=\"col-xs\">\n              <TextField className=\"input__material--wide\"\n                         floatingLabel={this.getIntlMessage('modal.group.name')}\n                         onChange={this.onTitleChange}\n                         ref=\"name\"\n                         value={title}/>\n\n              {\n                isAdmin\n                  ? <div className=\"about\">\n                      <label htmlFor=\"about\">{this.getIntlMessage('modal.group.about')}</label>\n                      <textarea className=\"textarea\" value={about} onChange={this.onAboutChange} id=\"about\"/>\n                    </div>\n                  : null\n              }\n            </div>\n            <div className=\"profile-picture text-center\">\n              <div className=\"profile-picture__changer\">\n                <AvatarItem image={group.bigAvatar}\n                            placeholder={group.placeholder}\n                            size=\"big\"\n                            title={group.name}/>\n                <a onClick={this.onChangeAvatarClick}>\n                  <span>{this.getIntlMessage('modal.group.avatarChange')}</span>\n                </a>\n              </div>\n              <div className=\"profile-picture__controls\">\n                <a onClick={this.onProfilePictureRemove}>{this.getIntlMessage('modal.group.avatarRemove')}</a>\n              </div>\n              <form className=\"hide\" ref=\"imageForm\">\n                <input onChange={this.onProfilePictureInputChange} ref=\"imageInput\" type=\"file\"/>\n              </form>\n            </div>\n          </div>\n\n          {cropAvatar}\n        </Modal>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nReactMixin.onClass(EditGroup, IntlMixin);\n\nexport default Container.create(EditGroup, {pure: false});\n"]}