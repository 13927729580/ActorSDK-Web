{"version":3,"sources":["../../../src/components/modals/EditGroup.react.js"],"names":[],"mappings":"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","file":"EditGroup.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport { Container } from 'flux/utils';\nimport Modal from 'react-modal';\n\nimport { KeyCodes } from '../../constants/ActorAppConstants';\n\nimport EditGroupStore from '../../stores/EditGroupStore';\nimport CropAvatarStore from '../../stores/CropAvatarStore';\n\nimport EditGroupActionCreators from '../../actions/EditGroupActionCreators';\nimport CropAvatarActionCreators from '../../actions/CropAvatarActionCreators';\n\nimport TextField from '../common/TextField.react';\nimport AvatarItem from '../common/AvatarItem.react';\nimport CropAvatarModal from './CropAvatar.react';\n\nclass EditGroup extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  static contextTypes = {\n    intl: PropTypes.object\n  };\n\n  static getStores() {\n    return [EditGroupStore, CropAvatarStore];\n  }\n\n  static calculateState() {\n    return {\n      isOpen: EditGroupStore.isOpen(),\n      group: EditGroupStore.getGroup(),\n      isAdmin: EditGroupStore.isAdmin(),\n      title: EditGroupStore.getTitle(),\n      about: EditGroupStore.getAbout(),\n      isCropModalOpen: CropAvatarStore.isOpen()\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeListeners();\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    if (nextState.isOpen) {\n      nextState.isCropModalOpen ? this.removeListeners() : this.setListeners();\n    } else {\n      nextState.isCropModalOpen ? this.setListeners() : this.removeListeners();\n    }\n  }\n\n  setListeners = () => document.addEventListener('keydown', this.onKeyDown, false);\n  removeListeners = () => document.removeEventListener('keydown', this.onKeyDown, false);\n\n  onClose = () => EditGroupActionCreators.hide();\n  onTitleChange = event => this.setState({ title: event.target.value });\n  onAboutChange = event => this.setState({ about: event.target.value });\n\n  onKeyDown = event => {\n    if (event.keyCode === KeyCodes.ESC) {\n      event.preventDefault();\n      this.onClose();\n    }\n  };\n\n  onSave = () => {\n    const { group, title, about, isAdmin } = this.state;\n    EditGroupActionCreators.editGroupTitle(group.id, title);\n    if (isAdmin) {\n      EditGroupActionCreators.editGroupAbout(group.id, about);\n    }\n    this.onClose();\n  };\n\n  onProfilePictureInputChange = () => {\n    const imageInput = findDOMNode(this.refs.imageInput);\n    const imageForm = findDOMNode(this.refs.imageForm);\n    const file = imageInput.files[0];\n\n    let reader = new FileReader();\n    reader.onload = (event) => {\n      CropAvatarActionCreators.show(event.target.result);\n      imageForm.reset();\n    };\n    reader.readAsDataURL(file);\n  };\n\n  onChangeAvatarClick = () => {\n    const imageInput = findDOMNode(this.refs.imageInput);\n    imageInput.click()\n  };\n\n  changeGroupAvatar = (croppedImage) => {\n    const { group } = this.state;\n    EditGroupActionCreators.changeGroupAvatar(group.id, croppedImage);\n  };\n\n  onProfilePictureRemove = () =>  {\n    const { group } = this.state;\n    EditGroupActionCreators.removeGroupAvatar(group.id);\n  };\n\n  render() {\n    const { isOpen, group, isCropModalOpen, title, about, isAdmin } = this.state;\n    const { intl } = this.context;\n\n    const cropAvatar = isCropModalOpen ? <CropAvatarModal onCropFinish={this.changeGroupAvatar}/> : null;\n    const modalStyle = {\n      content : {\n        position: null,\n        top: null,\n        left: null,\n        right: null,\n        bottom: null,\n        border: null,\n        background: null,\n        overflow: null,\n        outline: null,\n        padding: null,\n        borderRadius: null,\n        width: 440\n      }\n    };\n\n    if (isOpen) {\n      return (\n        <Modal className=\"modal-new modal-new--edit-group\"\n               closeTimeoutMS={150}\n               isOpen={isOpen}\n               style={modalStyle}>\n\n          <header className=\"modal-new__header\">\n            <a className=\"modal-new__header__icon material-icons\">edit</a>\n            <h3 className=\"modal-new__header__title\">{intl.messages['modal.group.title']}</h3>\n            <div className=\"pull-right\">\n              <button className=\"button button--lightblue\" onClick={this.onSave}>{intl.messages['button.done']}</button>\n            </div>\n          </header>\n\n          <div className=\"modal-new__body row\">\n            <div className=\"col-xs\">\n              <TextField className=\"input__material--wide\"\n                         floatingLabel={intl.messages['modal.group.name']}\n                         onChange={this.onTitleChange}\n                         ref=\"name\"\n                         value={title}/>\n\n              {\n                isAdmin\n                  ? <div className=\"about\">\n                      <label htmlFor=\"about\">{intl.messages['modal.group.about']}</label>\n                      <textarea className=\"textarea\" value={about} onChange={this.onAboutChange} id=\"about\"/>\n                    </div>\n                  : null\n              }\n            </div>\n            <div className=\"profile-picture text-center\">\n              <div className=\"profile-picture__changer\">\n                <AvatarItem image={group.bigAvatar}\n                            placeholder={group.placeholder}\n                            size=\"big\"\n                            title={group.name}/>\n                <a onClick={this.onChangeAvatarClick}>\n                  <span>{intl.messages['modal.group.avatarChange']}</span>\n                </a>\n              </div>\n              <div className=\"profile-picture__controls\">\n                <a onClick={this.onProfilePictureRemove}>{intl.messages['modal.group.avatarRemove']}</a>\n              </div>\n              <form className=\"hide\" ref=\"imageForm\">\n                <input onChange={this.onProfilePictureInputChange} ref=\"imageInput\" type=\"file\"/>\n              </form>\n            </div>\n          </div>\n\n          {cropAvatar}\n        </Modal>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default Container.create(EditGroup, { pure: false });\n"]}