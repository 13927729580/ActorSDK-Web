{"version":3,"sources":["../../src/components/Activity.react.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgBM,eAAe;YAAf,eAAe;;AACnB,WADI,eAAe,CACP,KAAK,EAAE;0BADf,eAAe;;4CAEjB,sBAAM,KAAK,CAAC;GACb;;AAHG,iBAAe,CAOZ,cAAc,6BAAG;AACtB,WAAO;AACL,UAAI,EAAE,sBAAY,cAAc,EAAE;AAClC,UAAI,EAAE,0BAAgB,OAAO,EAAE;AAC/B,YAAM,EAAE,wBAAc,MAAM,EAAE;KAC/B,CAAC;GACH;;AAbG,iBAAe,WAenB,UAAU,yBAAG;iBACoB,IAAI,CAAC,KAAK;QAAjC,MAAM,UAAN,MAAM;QAAE,IAAI,UAAJ,IAAI;QAAE,IAAI,UAAJ,IAAI;;AAC1B,QAAI,CAAC,MAAM,EAAE;AACX,aAAO,IAAI,CAAC;KACb;;AAED,YAAQ,IAAI,CAAC,IAAI;AACf,WAAK,6BAAU,IAAI;AACjB,eAAO,uDAAa,IAAI,EAAE,IAAI,AAAC,GAAG,CAAC;AAAA,AACrC,WAAK,6BAAU,KAAK;AAClB,eAAO,wDAAc,KAAK,EAAE,IAAI,AAAC,GAAE,CAAC;AAAA,AACtC;AACE,eAAO,IAAI,CAAC;AAAA,KACf;GACF;;AA7BG,iBAAe,WA+BnB,MAAM,qBAAG;kBACwB,IAAI,CAAC,KAAK;QAAjC,IAAI,WAAJ,IAAI;QAAE,IAAI,WAAJ,IAAI;QAAE,MAAM,WAAN,MAAM;;AAC1B,QAAI,IAAI,KAAK,IAAI,EAAE;AACjB,aAAO,IAAI,CAAC;KACb;;AAED,cAAU,CAAC,YAAM;AACf,YAAM,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;KAC3C,EAAE,CAAC,CAAC,CAAC;;AAEN,QAAM,iBAAiB,GAAG,0BAAW,UAAU,EAAE;AAC/C,uBAAiB,EAAE,MAAM;KAC1B,CAAC,CAAC;;AAEH,WACE;;QAAS,SAAS,EAAE,iBAAiB,AAAC;MACnC,IAAI,CAAC,UAAU,EAAE;KACV,CACV;GACH;;SAlDG,eAAe;;;AAAf,eAAe,CAKZ,SAAS,GAAG;SAAM,2EAA6C;CAAA;;kBAgDzD,iBAAU,MAAM,CAAC,eAAe,EAAE,EAAC,IAAI,EAAE,KAAK,EAAC,CAAC","file":"Activity.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component } from 'react';\nimport { Container } from 'flux/utils';\nimport classnames from 'classnames';\nimport { PeerTypes } from '../constants/ActorAppConstants';\n\nimport ActivityStore from '../stores/ActivityStore';\nimport DialogStore from '../stores/DialogStore';\nimport DialogInfoStore from '../stores/DialogInfoStore';\n\nimport UserProfile from './activity/UserProfile.react';\nimport GroupProfile from './activity/GroupProfile.react';\n\nclass ActivitySection extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  static getStores = () => [DialogStore, DialogInfoStore, ActivityStore];\n\n  static calculateState() {\n    return {\n      peer: DialogStore.getCurrentPeer(),\n      info: DialogInfoStore.getInfo(),\n      isOpen: ActivityStore.isOpen()\n    };\n  }\n\n  renderBody() {\n    const { isOpen, peer, info } = this.state;\n    if (!isOpen) {\n      return null;\n    }\n\n    switch (peer.type) {\n      case PeerTypes.USER:\n        return <UserProfile user={info} />;\n      case PeerTypes.GROUP:\n        return <GroupProfile group={info}/>;\n      default:\n        return null;\n    }\n  }\n\n  render() {\n    const { peer, info, isOpen } = this.state;\n    if (peer === null) {\n      return null;\n    }\n\n    setTimeout(() => {\n      window.dispatchEvent(new Event('resize'));\n    }, 0);\n\n    const activityClassName = classnames('activity', {\n      'activity--shown': isOpen\n    });\n\n    return (\n      <section className={activityClassName}>\n        {this.renderBody()}\n      </section>\n    );\n  }\n}\n\nexport default Container.create(ActivitySection, {pure: false});\n"]}