{"version":3,"sources":["../../../src/components/dev/LoggerSection.react.js"],"names":[],"mappings":";;;;AAIA;;;;AACA;;AACA;;;;AAEA;;;;AACA;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;;;;;IAEM;;;;;;;;;gBACG,iCAAY;AACjB,WAAO,uBAAP,CADiB;;;AADf,gBAKG,2CAAiB;AACtB,QAAM,SAAS,sBAAY,MAAZ,EAAT,CADgB;AAEtB,QAAI,CAAC,MAAD,EAAS;AACX,aAAO,EAAC,QAAQ,KAAR,EAAR,CADW;KAAb;;AAIA,QAAM,OAAO,sBAAY,OAAZ,EAAP,CANgB;AAOtB,WAAO;AACL,oBADK;AAEL,gBAFK;AAGL,cAAQ,KAAK,MAAL;KAHV,CAPsB;;;AALpB,0BAmBJ,6BAAU;AACR,8CADQ;;;AAnBN,0BAuBJ,mCAAa;AACX,QAAM,SAAS,EAAT,CADK;;QAGH,OAAS,KAAK,KAAL,CAAT,KAHG;;AAIX,SAAK,IAAI,IAAI,KAAK,MAAL,GAAc,CAAd,EAAiB,KAAK,CAAL,EAAQ,GAAtC,EAA2C;AACzC,aAAO,IAAP,CACE,qDAAW,MAAM,KAAK,CAAL,CAAN,EAAe,KAAK,CAAL,EAA1B,CADF,EADyC;KAA3C;;AAMA,WAAO,MAAP,CAVW;;;AAvBT,0BAoCJ,2BAAS;AACP,QAAI,CAAC,KAAK,KAAL,CAAW,MAAX,EAAmB;AACtB,aAAO,2CAAS,WAAU,iBAAV,EAAT,CAAP,CADsB;KAAxB;;AAIA,WACE;;QAAS,WAAU,iCAAV,EAAT;MACE;;UAAK,WAAU,6BAAV,EAAL;QACE;;YAAK,WAAU,kBAAV,EAAL;UACE;;cAAQ,WAAU,qBAAV,EAAgC,MAAK,QAAL,EAAc,SAAS,KAAK,OAAL,EAA/D;YACE;;gBAAG,WAAU,gBAAV,EAAH;;aADF;WADF;SADF;QAME,2DANF;QAOE;;;UACE;;cAAK,WAAU,mBAAV,EAAL;YACG,KAAK,UAAL,EADH;WADF;SAPF;OADF;KADF,CALO;;;SApCL;;;kBA6DS,iBAAU,MAAV,CAAiB,aAAjB","file":"LoggerSection.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component } from 'react';\nimport { Container } from 'flux/utils';\nimport classNames from 'classnames';\n\nimport LoggerStore from '../../stores/LoggerStore';\nimport { loggerToggle } from '../../actions/LoggerActionCreators';\n\nimport Scrollbar from '../common/Scrollbar.react';\nimport LoggerFilter from './LoggerFilter.react';\nimport LoggerRow from './LoggerRow.react';\n\nclass LoggerSection extends Component {\n  static getStores() {\n    return [LoggerStore];\n  }\n\n  static calculateState() {\n    const isOpen = LoggerStore.isOpen();\n    if (!isOpen) {\n      return {isOpen: false};\n    }\n\n    const logs = LoggerStore.getLogs();\n    return {\n      isOpen,\n      logs,\n      length: logs.length\n    };\n  }\n\n  onClose() {\n    loggerToggle();\n  }\n\n  renderLogs() {\n    const result = [];\n\n    const { logs } = this.state;\n    for (let i = logs.length - 1; i >= 0; i--) {\n      result.push(\n        <LoggerRow data={logs[i]} key={i} />\n      );\n    }\n\n    return result;\n  }\n\n  render() {\n    if (!this.state.isOpen) {\n      return <section className=\"activity logger\" />;\n    }\n\n    return (\n      <section className=\"activity logger activity--shown\">\n        <div className=\"activity__body logger__body\">\n          <div className=\"logger__controls\">\n            <button className=\"button button--icon\" type=\"button\" onClick={this.onClose}>\n              <i className=\"material-icons\">close</i>\n            </button>\n          </div>\n          <LoggerFilter />\n          <Scrollbar>\n            <div className=\"logger__container\">\n              {this.renderLogs()}\n            </div>\n          </Scrollbar>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default Container.create(LoggerSection);\n"]}