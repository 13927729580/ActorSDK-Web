{"version":3,"sources":["../../src/workers/serviceworker-cache-polyfill.js"],"names":[],"mappings":";;AAAA,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;AACxB,OAAK,CAAC,SAAS,CAAC,GAAG,GAAG,SAAS,GAAG,CAAC,OAAO,EAAE;AAC1C,WAAO,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;GAC/B,CAAC;CACH;;AAED,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE;AAC3B,OAAK,CAAC,SAAS,CAAC,MAAM,GAAG,SAAS,MAAM,CAAC,QAAQ,EAAE;AACjD,QAAI,KAAK,GAAG,IAAI;;;AAAC,AAGjB,aAAS,YAAY,CAAC,OAAO,EAAE;AAC7B,UAAI,CAAC,IAAI,GAAG,cAAc,CAAC;AAC3B,UAAI,CAAC,IAAI,GAAG,EAAE,CAAC;AACf,UAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KACxB;AACD,gBAAY,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;;AAExD,WAAO,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,YAAW;AACvC,UAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,MAAM,IAAI,SAAS,EAAE,CAAC;;;AAAA,AAGhD,UAAI,QAAQ,GAAG,EAAE,CAAC;;AAElB,cAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,UAAS,OAAO,EAAE;AACxC,YAAI,OAAO,YAAY,OAAO,EAAE;AAC9B,iBAAO,OAAO,CAAC;SAChB,MACI;AACH,iBAAO,MAAM,CAAC,OAAO,CAAC;AAAC,SACxB;OACF,CAAC,CAAC;;AAEH,aAAO,OAAO,CAAC,GAAG,CAChB,QAAQ,CAAC,GAAG,CAAC,UAAS,OAAO,EAAE;AAC7B,YAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;AAC/B,iBAAO,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC;SAChC;;AAED,YAAI,MAAM,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC;;AAE3C,YAAI,MAAM,KAAK,OAAO,IAAI,MAAM,KAAK,QAAQ,EAAE;AAC7C,gBAAM,IAAI,YAAY,CAAC,gBAAgB,CAAC,CAAC;SAC1C;;AAED,eAAO,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;OAC/B,CAAC,CACH,CAAC;KACH,CAAC,CAAC,IAAI,CAAC,UAAS,SAAS,EAAE;;;AAG1B,aAAO,OAAO,CAAC,GAAG,CAChB,SAAS,CAAC,GAAG,CAAC,UAAS,QAAQ,EAAE,CAAC,EAAE;AAClC,eAAO,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;OACzC,CAAC,CACH,CAAC;KACH,CAAC,CAAC,IAAI,CAAC,YAAW;AACjB,aAAO,SAAS,CAAC;KAClB,CAAC,CAAC;GACJ,CAAC;CACH","file":"serviceworker-cache-polyfill.js","sourcesContent":["if (!Cache.prototype.add) {\n  Cache.prototype.add = function add(request) {\n    return this.addAll([request]);\n  };\n}\n\nif (!Cache.prototype.addAll) {\n  Cache.prototype.addAll = function addAll(requests) {\n    var cache = this;\n\n    // Since DOMExceptions are not constructable:\n    function NetworkError(message) {\n      this.name = 'NetworkError';\n      this.code = 19;\n      this.message = message;\n    }\n    NetworkError.prototype = Object.create(Error.prototype);\n\n    return Promise.resolve().then(function() {\n      if (arguments.length < 1) throw new TypeError();\n      \n      // Simulate sequence<(Request or USVString)> binding:\n      var sequence = [];\n\n      requests = requests.map(function(request) {\n        if (request instanceof Request) {\n          return request;\n        }\n        else {\n          return String(request); // may throw TypeError\n        }\n      });\n\n      return Promise.all(\n        requests.map(function(request) {\n          if (typeof request === 'string') {\n            request = new Request(request);\n          }\n\n          var scheme = new URL(request.url).protocol;\n\n          if (scheme !== 'http:' && scheme !== 'https:') {\n            throw new NetworkError(\"Invalid scheme\");\n          }\n\n          return fetch(request.clone());\n        })\n      );\n    }).then(function(responses) {\n      // TODO: check that requests don't overwrite one another\n      // (don't think this is possible to polyfill due to opaque responses)\n      return Promise.all(\n        responses.map(function(response, i) {\n          return cache.put(requests[i], response);\n        })\n      );\n    }).then(function() {\n      return undefined;\n    });\n  };\n}\n"]}