{"version":3,"sources":["../../src/actions/PreferencesActionCreators.js"],"names":[],"mappings":";;;;AAIA;;AACA;;AACA;;;;AACA;;;;;;;;;;kBAEe;AACb,MADa,kBACN;AACL,sCAAS,+BAAY,sBAArB;AACA,SAAK,YAAL;AACA,oCAAsB,eAAtB,CAAsC,KAAtC;AACD,GALY;AAOb,MAPa,kBAON;AACL,sCAAS,+BAAY,sBAArB;AACA,oCAAsB,eAAtB,CAAsC,IAAtC;AACD,GAVY;AAYb,MAZa,gBAYR,WAZQ,EAYK;AAAA,QAEd,oBAFc,GAOZ,WAPY,CAEd,oBAFc;AAAA,QAGd,qBAHc,GAOZ,WAPY,CAGd,qBAHc;AAAA,QAId,4BAJc,GAOZ,WAPY,CAId,4BAJc;AAAA,QAKd,0BALc,GAOZ,WAPY,CAKd,0BALc;AAAA,QAMd,8BANc,GAOZ,WAPY,CAMd,8BANc;;;AAShB,0BAAY,iBAAZ,CAA8B,oBAA9B;AACA,0BAAY,yBAAZ,CAAsC,qBAAtC;AACA,0BAAY,+BAAZ,CAA4C,4BAA5C;AACA,0BAAY,gCAAZ,CAA6C,0BAA7C;AACA,0BAAY,mCAAZ,CAAgD,8BAAhD;;AAEA,sCAAS,+BAAY,gBAArB,EAAuC,EAAE,wBAAF,EAAvC;AACD,GA5BY;AA8Bb,WA9Ba,qBA8BH,GA9BG,EA8BE;AACb,sCAAS,+BAAY,sBAArB,EAA6C,EAAE,QAAF,EAA7C;AACD,GAhCY;AAkCb,cAlCa,0BAkCE;AACb,2CAAc,sBAAY,YAAZ,EAAd,EAA0C;AACxC,eAAS,+BAAY,wBADmB;AAExC,eAAS,+BAAY,gCAFmB;AAGxC,eAAS,+BAAY;AAHmB,KAA1C;AAKD,GAxCY;AA0Cb,kBA1Ca,4BA0CI,EA1CJ,EA0CQ;AAAA;;AACnB,2CAAc,sBAAY,gBAAZ,CAA6B,EAA7B,CAAd,EAAgD;AAC9C,eAAS,+BAAY,6BADyB;AAE9C,eAAS,+BAAY,qCAFyB;AAG9C,eAAS,+BAAY;AAHyB,KAAhD,EAIG,EAAE,MAAF,EAJH,EAIW,IAJX;;AAME;AAAA,aAAM,MAAK,YAAL,EAAN;AAAA,KANF;AAQD,GAnDY;AAqDb,sBArDa,kCAqDU;AAAA;;AACrB,2CAAc,sBAAY,oBAAZ,EAAd,EAAkD;AAChD,eAAS,+BAAY,iCAD2B;AAEhD,eAAS,+BAAY,yCAF2B;AAGhD,eAAS,+BAAY;AAH2B,KAAlD,EAIG,IAJH;;AAME;AAAA,aAAM,OAAK,YAAL,EAAN;AAAA,KANF;AAQD;AA9DY,C","file":"PreferencesActionCreators.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { dispatch, dispatchAsync } from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\nimport ActorClient from '../utils/ActorClient';\nimport ComposeActionCreators from '../actions/ComposeActionCreators';\n\nexport default {\n  show() {\n    dispatch(ActionTypes.PREFERENCES_MODAL_SHOW);\n    this.loadSessions();\n    ComposeActionCreators.toggleAutoFocus(false);\n  },\n\n  hide() {\n    dispatch(ActionTypes.PREFERENCES_MODAL_HIDE);\n    ComposeActionCreators.toggleAutoFocus(true);\n  },\n\n  save(preferences) {\n    const {\n      isSendByEnterEnabled,\n      isSoundEffectsEnabled,\n      isGroupsNotificationsEnabled,\n      isOnlyMentionNotifications,\n      isShowNotificationsTextEnabled\n    } = preferences;\n\n    ActorClient.changeSendByEnter(isSendByEnterEnabled);\n    ActorClient.changeSoundEffectsEnabled(isSoundEffectsEnabled);\n    ActorClient.changeGroupNotificationsEnabled(isGroupsNotificationsEnabled);\n    ActorClient.changeIsOnlyMentionNotifications(isOnlyMentionNotifications);\n    ActorClient.changeIsShowNotificationTextEnabled(isShowNotificationsTextEnabled);\n\n    dispatch(ActionTypes.PREFERENCES_SAVE, { preferences });\n  },\n\n  changeTab(tab) {\n    dispatch(ActionTypes.PREFERENCES_CHANGE_TAB, { tab });\n  },\n\n  loadSessions() {\n    dispatchAsync(ActorClient.loadSessions(), {\n      request: ActionTypes.PREFERENCES_SESSION_LOAD,\n      success: ActionTypes.PREFERENCES_SESSION_LOAD_SUCCESS,\n      failure: ActionTypes.PREFERENCES_SESSION_LOAD_ERROR\n    });\n  },\n\n  terminateSession(id) {\n    dispatchAsync(ActorClient.terminateSession(id), {\n      request: ActionTypes.PREFERENCES_SESSION_TERMINATE,\n      success: ActionTypes.PREFERENCES_SESSION_TERMINATE_SUCCESS,\n      failure: ActionTypes.PREFERENCES_SESSION_TERMINATE_ERROR\n    }, { id }).then(\n      // Reload active session list\n      () => this.loadSessions()\n    );\n  },\n\n  terminateAllSessions() {\n    dispatchAsync(ActorClient.terminateAllSessions(), {\n      request: ActionTypes.PREFERENCES_SESSION_TERMINATE_ALL,\n      success: ActionTypes.PREFERENCES_SESSION_TERMINATE_ALL_SUCCESS,\n      failure: ActionTypes.PREFERENCES_SESSION_TERMINATE_ALL_ERROR\n    }).then(\n      // Reload active session list\n      () => this.loadSessions()\n    );\n  }\n};\n"]}