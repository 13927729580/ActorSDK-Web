{"version":3,"sources":["../../src/actions/SearchMessagesActionCreators.js"],"names":[],"mappings":";;;;AAIA;;AACA;;AACA;;;;AAEA;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;IAEM,4B;AACJ,0CAAc;AAAA;;AACZ,SAAK,0BAAL,GAAkC,KAAlC;AACD;;yCAED,U,uBAAW,M,EAAQ;AACjB,QAAI,MAAJ,EAAY;AACV,wCAAS,+BAAY,WAArB;;AAEA,WAAK,0BAAL,GAAkC,wBAAc,MAAd,EAAlC;AACA,UAAI,KAAK,0BAAT,EAAqC;AACnC,yCAAuB,IAAvB;AACD;AACF,KAPD,MAOO;AACL,wCAAS,+BAAY,WAArB;AACA,UAAI,KAAK,0BAAT,EAAqC;AACnC,yCAAuB,IAAvB;AACD;AACF;AACF,G;;yCAED,W,wBAAY,Q,EAAU;AACpB,sCAAS,+BAAY,mBAArB,EAA0C,EAAE,kBAAF,EAA1C;AACD,G;;yCAED,Y,2BAAe;AACb,sCAAS,+BAAY,oBAArB;AACD,G;;yCAED,Q,qBAAS,K,EAAO;AACd,sCAAS,+BAAY,WAArB,EAAkC,EAAE,YAAF,EAAlC;AACD,G;;yCAED,W,wBAAY,K,EAAO;AACjB,QAAI,CAAC,KAAL,EAAY;AACV;AACD;;AAED,QAAM,eAAe,8BAAoB,MAApB,EAArB;AACA,QAAM,OAAO,sBAAY,cAAZ,EAAb;;AAEA,QAAI,CAAC,YAAL,EAAmB;AACjB,WAAK,UAAL,CAAgB,IAAhB;AACD;;AAED,2CAAc,sBAAY,WAAZ,CAAwB,IAAxB,EAA8B,KAA9B,CAAd,EAAoD;AAClD,eAAS,+BAAY,WAD6B;AAElD,eAAS,+BAAY,mBAF6B;AAGlD,eAAS,+BAAY;AAH6B,KAApD,EAIG,EAAE,UAAF,EAAQ,YAAR,EAJH;AAKD,G;;yCAED,W,0BAAc;AACZ,QAAM,OAAO,sBAAY,cAAZ,EAAb;AACA,2CAAc,sBAAY,WAAZ,CAAwB,IAAxB,CAAd,EAA6C;AAC3C,eAAS,+BAAY,WADsB;AAE3C,eAAS,+BAAY,mBAFsB;AAG3C,eAAS,+BAAY;AAHsB,KAA7C,EAIG,EAAE,UAAF,EAJH;AAKD,G;;yCAED,Y,2BAAe;AACb,QAAM,OAAO,sBAAY,cAAZ,EAAb;AACA,2CAAc,sBAAY,YAAZ,CAAyB,IAAzB,CAAd,EAA8C;AAC5C,eAAS,+BAAY,YADuB;AAE5C,eAAS,+BAAY,oBAFuB;AAG5C,eAAS,+BAAY;AAHuB,KAA9C,EAIG,EAAE,UAAF,EAJH;AAKD,G;;yCAED,a,4BAAgB;AACd,QAAM,OAAO,sBAAY,cAAZ,EAAb;AACA,2CAAc,sBAAY,aAAZ,CAA0B,IAA1B,CAAd,EAA+C;AAC7C,eAAS,+BAAY,YADwB;AAE7C,eAAS,+BAAY,oBAFwB;AAG7C,eAAS,+BAAY;AAHwB,KAA/C,EAIG,EAAE,UAAF,EAJH;AAKD,G;;;;;kBAGY,IAAI,4BAAJ,E","file":"SearchMessagesActionCreators.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { dispatch, dispatchAsync } from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\nimport ActorClient from '../utils/ActorClient';\n\nimport ActivityActionCreators from './ActivityActionCreators';\n\nimport DialogStore from '../stores/DialogStore';\nimport ActivityStore from '../stores/ActivityStore';\nimport SearchMessagesStore from '../stores/SearchMessagesStore';\n\nclass SearchMessagesActionCreators {\n  constructor() {\n    this.isActivityOpenBeforeSearch = false;\n  }\n\n  toggleOpen(isOpen) {\n    if (isOpen) {\n      dispatch(ActionTypes.SEARCH_SHOW);\n      // TODO: move this to store\n      this.isActivityOpenBeforeSearch = ActivityStore.isOpen();\n      if (this.isActivityOpenBeforeSearch) {\n        ActivityActionCreators.hide()\n      }\n    } else {\n      dispatch(ActionTypes.SEARCH_HIDE);\n      if (this.isActivityOpenBeforeSearch) {\n        ActivityActionCreators.show();\n      }\n    }\n  }\n\n  toggleFocus(isEnable) {\n    dispatch(ActionTypes.SEARCH_TOGGLE_FOCUS, { isEnable });\n  }\n\n  toggleExpand() {\n    dispatch(ActionTypes.SEARCH_TOGGLE_EXPAND);\n  }\n\n  setQuery(query) {\n    dispatch(ActionTypes.SEARCH_TEXT, { query });\n  }\n\n  findAllText(query) {\n    if (!query) {\n      return;\n    }\n\n    const isSearchOpen = SearchMessagesStore.isOpen();\n    const peer = DialogStore.getCurrentPeer();\n\n    if (!isSearchOpen) {\n      this.toggleOpen(true);\n    }\n\n    dispatchAsync(ActorClient.findAllText(peer, query), {\n      request: ActionTypes.SEARCH_TEXT,\n      success: ActionTypes.SEARCH_TEXT_SUCCESS,\n      failure: ActionTypes.SEARCH_TEXT_ERROR\n    }, { peer, query });\n  }\n\n  findAllDocs() {\n    const peer = DialogStore.getCurrentPeer();\n    dispatchAsync(ActorClient.findAllDocs(peer), {\n      request: ActionTypes.SEARCH_DOCS,\n      success: ActionTypes.SEARCH_DOCS_SUCCESS,\n      failure: ActionTypes.SEARCH_DOCS_ERROR\n    }, { peer });\n  }\n\n  findAllLinks() {\n    const peer = DialogStore.getCurrentPeer();\n    dispatchAsync(ActorClient.findAllLinks(peer), {\n      request: ActionTypes.SEARCH_LINKS,\n      success: ActionTypes.SEARCH_LINKS_SUCCESS,\n      failure: ActionTypes.SEARCH_LINKS_ERROR\n    }, { peer });\n  }\n\n  findAllPhotos() {\n    const peer = DialogStore.getCurrentPeer();\n    dispatchAsync(ActorClient.findAllPhotos(peer), {\n      request: ActionTypes.SEARCH_PHOTO,\n      success: ActionTypes.SEARCH_PHOTO_SUCCESS,\n      failure: ActionTypes.SEARCH_PHOTO_ERROR\n    }, { peer });\n  }\n}\n\nexport default new SearchMessagesActionCreators();\n"]}