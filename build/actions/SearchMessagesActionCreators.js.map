{"version":3,"sources":["../../src/actions/SearchMessagesActionCreators.js"],"names":[],"mappings":";;;;;;;;AAIA;;AACA;;AACA;;;;AAEA;;;;AAEA;;;;AACA;;;;AACA;;;;;;IAEM;AACJ,WADI,4BACJ,GAAc;wCADV,8BACU;;AACZ,SAAK,0BAAL,GAAkC,KAAlC,CADY;GAAd;;AADI,yCAKJ,iCAAW,QAAQ;AACjB,QAAI,MAAJ,EAAY;AACV,wCAAS,+BAAY,WAAZ,CAAT;;AADU,UAGV,CAAK,0BAAL,GAAkC,wBAAc,MAAd,EAAlC,CAHU;AAIV,UAAI,KAAK,0BAAL,EAAiC;AACnC,yCAAuB,IAAvB,GADmC;OAArC;KAJF,MAOO;AACL,wCAAS,+BAAY,WAAZ,CAAT,CADK;AAEL,UAAI,KAAK,0BAAL,EAAiC;AACnC,yCAAuB,IAAvB,GADmC;OAArC;KATF;;;AANE,yCAqBJ,mCAAY,UAAU;AACpB,sCAAS,+BAAY,mBAAZ,EAAiC,EAAE,kBAAF,EAA1C,EADoB;;;AArBlB,yCAyBJ,uCAAe;AACb,sCAAS,+BAAY,oBAAZ,CAAT,CADa;;;AAzBX,yCA6BJ,6BAAS,OAAO;AACd,sCAAS,+BAAY,WAAZ,EAAyB,EAAE,YAAF,EAAlC,EADc;;;AA7BZ,yCAiCJ,mCAAY,OAAO;AACjB,QAAI,CAAC,KAAD,EAAQ;AACV,aADU;KAAZ;;AAIA,QAAM,eAAe,8BAAoB,MAApB,EAAf,CALW;AAMjB,QAAM,OAAO,sBAAY,cAAZ,EAAP,CANW;;AAQjB,QAAI,CAAC,YAAD,EAAe;AACjB,WAAK,UAAL,CAAgB,IAAhB,EADiB;KAAnB;;AAIA,2CAAc,sBAAY,WAAZ,CAAwB,IAAxB,EAA8B,KAA9B,CAAd,EAAoD;AAClD,eAAS,+BAAY,WAAZ;AACT,eAAS,+BAAY,mBAAZ;AACT,eAAS,+BAAY,iBAAZ;KAHX,EAIG,EAAC,UAAD,EAAO,YAAP,EAJH,EAZiB;;;AAjCf,yCAoDJ,qCAAc;AACZ,QAAM,OAAO,sBAAY,cAAZ,EAAP,CADM;AAEZ,2CAAc,sBAAY,WAAZ,CAAwB,IAAxB,CAAd,EAA6C;AAC3C,eAAS,+BAAY,WAAZ;AACT,eAAS,+BAAY,mBAAZ;AACT,eAAS,+BAAY,iBAAZ;KAHX,EAIG,EAAE,UAAF,EAJH,EAFY;;;AApDV,yCA6DJ,uCAAe;AACb,QAAM,OAAO,sBAAY,cAAZ,EAAP,CADO;AAEb,2CAAc,sBAAY,YAAZ,CAAyB,IAAzB,CAAd,EAA8C;AAC5C,eAAS,+BAAY,YAAZ;AACT,eAAS,+BAAY,oBAAZ;AACT,eAAS,+BAAY,kBAAZ;KAHX,EAIG,EAAE,UAAF,EAJH,EAFa;;;AA7DX,yCAsEJ,yCAAgB;AACd,QAAM,OAAO,sBAAY,cAAZ,EAAP,CADQ;AAEd,2CAAc,sBAAY,aAAZ,CAA0B,IAA1B,CAAd,EAA+C;AAC7C,eAAS,+BAAY,YAAZ;AACT,eAAS,+BAAY,oBAAZ;AACT,eAAS,+BAAY,kBAAZ;KAHX,EAIG,EAAE,UAAF,EAJH,EAFc;;;SAtEZ;;;;;kBAgFS,IAAI,4BAAJ","file":"SearchMessagesActionCreators.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { dispatch, dispatchAsync } from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\nimport ActorClient from '../utils/ActorClient';\n\nimport ActivityActionCreators from './ActivityActionCreators';\n\nimport DialogStore from '../stores/DialogStore';\nimport ActivityStore from '../stores/ActivityStore';\nimport SearchMessagesStore from '../stores/SearchMessagesStore';\n\nclass SearchMessagesActionCreators {\n  constructor() {\n    this.isActivityOpenBeforeSearch = false;\n  }\n\n  toggleOpen(isOpen) {\n    if (isOpen) {\n      dispatch(ActionTypes.SEARCH_SHOW);\n      // TODO: move this to store\n      this.isActivityOpenBeforeSearch = ActivityStore.isOpen();\n      if (this.isActivityOpenBeforeSearch) {\n        ActivityActionCreators.hide()\n      }\n    } else {\n      dispatch(ActionTypes.SEARCH_HIDE);\n      if (this.isActivityOpenBeforeSearch) {\n        ActivityActionCreators.show();\n      }\n    }\n  }\n\n  toggleFocus(isEnable) {\n    dispatch(ActionTypes.SEARCH_TOGGLE_FOCUS, { isEnable });\n  }\n\n  toggleExpand() {\n    dispatch(ActionTypes.SEARCH_TOGGLE_EXPAND);\n  }\n\n  setQuery(query) {\n    dispatch(ActionTypes.SEARCH_TEXT, { query });\n  }\n\n  findAllText(query) {\n    if (!query) {\n      return;\n    }\n\n    const isSearchOpen = SearchMessagesStore.isOpen();\n    const peer = DialogStore.getCurrentPeer();\n\n    if (!isSearchOpen) {\n      this.toggleOpen(true);\n    }\n\n    dispatchAsync(ActorClient.findAllText(peer, query), {\n      request: ActionTypes.SEARCH_TEXT,\n      success: ActionTypes.SEARCH_TEXT_SUCCESS,\n      failure: ActionTypes.SEARCH_TEXT_ERROR\n    }, {peer, query});\n  }\n\n  findAllDocs() {\n    const peer = DialogStore.getCurrentPeer();\n    dispatchAsync(ActorClient.findAllDocs(peer), {\n      request: ActionTypes.SEARCH_DOCS,\n      success: ActionTypes.SEARCH_DOCS_SUCCESS,\n      failure: ActionTypes.SEARCH_DOCS_ERROR\n    }, { peer });\n  }\n\n  findAllLinks() {\n    const peer = DialogStore.getCurrentPeer();\n    dispatchAsync(ActorClient.findAllLinks(peer), {\n      request: ActionTypes.SEARCH_LINKS,\n      success: ActionTypes.SEARCH_LINKS_SUCCESS,\n      failure: ActionTypes.SEARCH_LINKS_ERROR\n    }, { peer });\n  }\n\n  findAllPhotos() {\n    const peer = DialogStore.getCurrentPeer();\n    dispatchAsync(ActorClient.findAllPhotos(peer), {\n      request: ActionTypes.SEARCH_PHOTO,\n      success: ActionTypes.SEARCH_PHOTO_SUCCESS,\n      failure: ActionTypes.SEARCH_PHOTO_ERROR\n    }, { peer });\n  }\n}\n\nexport default new SearchMessagesActionCreators();\n"]}