{"version":3,"sources":["../../src/actions/SearchMessagesActionCreators.js"],"names":[],"mappings":";;;;AAIA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;IAEM,4B;AACJ,0CAAc;AAAA;;AACZ,SAAK,QAAL,GAAgB,sBAAS,KAAK,QAAL,CAAc,IAAd,CAAmB,IAAnB,CAAT,EAAmC,GAAnC,EAAwC,EAAE,SAAS,GAAX,EAAxC,CAAhB;AACD;;yCAED,I,mBAAO;AACL,sCAAS,+BAAY,oBAArB;AACA,oCAAsB,eAAtB,CAAsC,KAAtC;AACD,G;;yCAED,K,oBAAQ;AACN,sCAAS,+BAAY,oBAArB;AACA,oCAAsB,eAAtB,CAAsC,IAAtC;AACD,G;;yCAED,Q,qBAAS,K,EAAO;AACd,sCAAS,+BAAY,yBAArB,EAAgD,EAAE,YAAF,EAAhD;AACA,SAAK,QAAL;AACD,G;;yCAED,Q,uBAAW;AAAA,gCACS,8BAAoB,QAApB,EADT;;AAAA,QACD,KADC,yBACD,KADC;;AAET,QAAI,CAAC,KAAL,EAAY;AACV;AACD;;AAED,QAAM,OAAO,sBAAY,cAAZ,EAAb;AACA,2CAAc,sBAAY,WAAZ,CAAwB,IAAxB,EAA8B,KAA9B,CAAd,EAAoD;AAClD,eAAS,+BAAY,WAD6B;AAElD,eAAS,+BAAY,mBAF6B;AAGlD,eAAS,+BAAY;AAH6B,KAApD,EAIG,EAAE,UAAF,EAAQ,YAAR,EAJH;AAKD,G;;;;;kBAGY,IAAI,4BAAJ,E","file":"SearchMessagesActionCreators.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { debounce } from 'lodash';\nimport { dispatch, dispatchAsync } from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\nimport ActorClient from '../utils/ActorClient';\nimport DialogStore from '../stores/DialogStore';\nimport SearchMessagesStore from '../stores/SearchMessagesStore';\nimport ComposeActionCreators from './ComposeActionCreators';\n\nclass SearchMessagesActionCreators {\n  constructor() {\n    this.findText = debounce(this.findText.bind(this), 100, { maxWait: 300 });\n  }\n\n  open() {\n    dispatch(ActionTypes.SEARCH_MESSAGES_SHOW);\n    ComposeActionCreators.toggleAutoFocus(false);\n  }\n\n  close() {\n    dispatch(ActionTypes.SEARCH_MESSAGES_HIDE);\n    ComposeActionCreators.toggleAutoFocus(true);\n  }\n\n  setQuery(query) {\n    dispatch(ActionTypes.SEARCH_MESSAGES_SET_QUERY, { query });\n    this.findText();\n  }\n\n  findText() {\n    const { query } = SearchMessagesStore.getState();\n    if (!query) {\n      return;\n    }\n\n    const peer = DialogStore.getCurrentPeer();\n    dispatchAsync(ActorClient.findAllText(peer, query), {\n      request: ActionTypes.SEARCH_TEXT,\n      success: ActionTypes.SEARCH_TEXT_SUCCESS,\n      failure: ActionTypes.SEARCH_TEXT_ERROR\n    }, { peer, query });\n  }\n}\n\nexport default new SearchMessagesActionCreators();\n"]}