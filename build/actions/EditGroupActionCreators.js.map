{"version":3,"sources":["../../src/actions/EditGroupActionCreators.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAIA;;AACA;;AACA;;;;AAEA;;;;AAEA;;;;AACA;;;;;;;;;;IAGM;;;;;;;;oCACJ,qBAAK,KAAK;AACR,SAAK,WAAL,CAAiB,OAAjB,EAA0B,CACxB,sBAAY,SAAZ,CAAsB,GAAtB,EAA2B,KAAK,oBAAL,CADH,CAA1B,EADQ;;AAKR,QAAM,QAAQ,sBAAY,QAAZ,CAAqB,GAArB,CAAR,CALE;AAMR,sCAAS,+BAAY,qBAAZ,EAAmC,EAAE,YAAF,EAA5C,EANQ;;AAQR,oCAAsB,eAAtB,CAAsC,KAAtC,EARQ;;;AADN,oCAYJ,uBAAO;AACL,SAAK,cAAL,CAAoB,OAApB,EADK;;AAGL,sCAAS,+BAAY,qBAAZ,CAAT,CAHK;;AAKL,oCAAsB,eAAtB,CAAsC,IAAtC,EALK;;;AAZH,oCAoBJ,qDAAqB,OAAO;AAC1B,sCAAS,+BAAY,kBAAZ,EAAgC,EAAE,YAAF,EAAzC,EAD0B;;;AApBxB,oCAwBJ,yCAAe,KAAK,OAAO;AACzB,QAAI,UAAU,yBAAe,QAAf,EAAV,EAAqC;AACvC,6CAAc,sBAAY,cAAZ,CAA2B,GAA3B,EAAgC,KAAhC,CAAd,EAAsD;AACpD,iBAAS,+BAAY,gBAAZ;AACT,iBAAS,+BAAY,wBAAZ;AACT,iBAAS,+BAAY,sBAAZ;OAHX,EAIG,EAAE,QAAF,EAAO,YAAP,EAJH,EADuC;KAAzC;;;AAzBE,oCAkCJ,+CAAkB,KAAK,QAAQ;AAC7B,0BAAY,iBAAZ,CAA8B,GAA9B,EAAmC,MAAnC,EAD6B;;;AAlC3B,oCAsCJ,yCAAe,KAAK,OAAO;AACzB,YAAQ,UAAU,EAAV,GAAe,IAAf,GAAsB,KAAtB,CADiB;AAEzB,QAAI,UAAU,yBAAe,QAAf,EAAV,EAAqC;AACvC,6CAAc,sBAAY,cAAZ,CAA2B,GAA3B,EAAgC,KAAhC,CAAd,EAAsD;AACpD,iBAAS,+BAAY,gBAAZ;AACT,iBAAS,+BAAY,wBAAZ;AACT,iBAAS,+BAAY,sBAAZ;OAHX,EAIG,EAAE,QAAF,EAAO,YAAP,EAJH,EADuC;KAAzC;;;AAxCE,oCAiDJ,+CAAkB,KAAK;AACrB,0BAAY,iBAAZ,CAA8B,GAA9B,EADqB;;;SAjDnB;;;kBAsDS,IAAI,uBAAJ","file":"EditGroupActionCreators.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { dispatch, dispatchAsync } from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\nimport ActorClient from '../utils/ActorClient';\n\nimport EditGroupStore from '../stores/EditGroupStore'\n\nimport ActionCreators from './ActionCreators';\nimport ComposeActionCreators from './ComposeActionCreators';\n\n\nclass EditGroupActionCreators extends ActionCreators {\n  show(gid) {\n    this.setBindings('group', [\n      ActorClient.bindGroup(gid, this.onCurrentGroupChange)\n    ]);\n\n    const group = ActorClient.getGroup(gid);\n    dispatch(ActionTypes.GROUP_EDIT_MODAL_SHOW, { group });\n\n    ComposeActionCreators.toggleAutoFocus(false);\n  }\n\n  hide() {\n    this.removeBindings('group');\n\n    dispatch(ActionTypes.GROUP_EDIT_MODAL_HIDE);\n\n    ComposeActionCreators.toggleAutoFocus(true);\n  }\n\n  onCurrentGroupChange(group) {\n    dispatch(ActionTypes.GROUP_INFO_CHANGED, { group })\n  }\n\n  editGroupTitle(gid, title) {\n    if (title !== EditGroupStore.getTitle()) {\n      dispatchAsync(ActorClient.editGroupTitle(gid, title), {\n        request: ActionTypes.GROUP_EDIT_TITLE,\n        success: ActionTypes.GROUP_EDIT_TITLE_SUCCESS,\n        failure: ActionTypes.GROUP_EDIT_TITLE_ERROR\n      }, { gid, title });\n    }\n  }\n\n  changeGroupAvatar(gid, avatar) {\n    ActorClient.changeGroupAvatar(gid, avatar)\n  }\n\n  editGroupAbout(gid, about) {\n    about = about === '' ? null : about;\n    if (about !== EditGroupStore.getAbout()) {\n      dispatchAsync(ActorClient.editGroupAbout(gid, about), {\n        request: ActionTypes.GROUP_EDIT_ABOUT,\n        success: ActionTypes.GROUP_EDIT_ABOUT_SUCCESS,\n        failure: ActionTypes.GROUP_EDIT_ABOUT_ERROR\n      }, { gid, about });\n    }\n  }\n\n  removeGroupAvatar(gid) {\n    ActorClient.removeGroupAvatar(gid)\n  }\n}\n\nexport default new EditGroupActionCreators();\n"]}