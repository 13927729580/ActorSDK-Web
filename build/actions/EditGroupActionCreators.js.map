{"version":3,"sources":["../../src/actions/EditGroupActionCreators.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;kBAUe;AACb,MAAI,gBAAC,GAAG,EAAE;AACR,QAAM,KAAK,GAAG,sBAAY,QAAQ,CAAC,GAAG,CAAC,CAAC;AACxC,0BAAY,SAAS,CAAC,GAAG,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;AACtD,sCAAS,+BAAY,qBAAqB,EAAE,EAAE,KAAK,EAAL,KAAK,EAAE,CAAC,CAAC;AACvD,oCAAsB,eAAe,CAAC,KAAK,CAAC,CAAC;GAC9C;AAED,MAAI,kBAAI;AACN,QAAM,KAAK,GAAG,yBAAe,QAAQ,EAAE,CAAC;AACxC,0BAAY,WAAW,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;AAC7D,sCAAS,+BAAY,qBAAqB,CAAC,CAAC;AAC5C,oCAAsB,eAAe,CAAC,IAAI,CAAC,CAAC;GAC7C;AAED,sBAAoB,gCAAC,KAAK,EAAE;AAC1B,sCAAS,+BAAY,kBAAkB,EAAE,EAAE,KAAK,EAAL,KAAK,EAAE,CAAC,CAAA;GACpD;AAED,gBAAc,0BAAC,GAAG,EAAE,KAAK,EAAE;AACzB,QAAI,KAAK,KAAK,yBAAe,QAAQ,EAAE,EAAE;AACvC,6CAAc,sBAAY,cAAc,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE;AACpD,eAAO,EAAE,+BAAY,gBAAgB;AACrC,eAAO,EAAE,+BAAY,wBAAwB;AAC7C,eAAO,EAAE,+BAAY,sBAAsB;OAC5C,EAAE,EAAE,GAAG,EAAH,GAAG,EAAE,KAAK,EAAL,KAAK,EAAE,CAAC,CAAC;KACpB;GACF;AAED,mBAAiB,6BAAC,GAAG,EAAE,MAAM,EAAE;AAC7B,0BAAY,iBAAiB,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;GAC3C;AAED,gBAAc,0BAAC,GAAG,EAAE,KAAK,EAAE;AACzB,SAAK,GAAG,KAAK,KAAK,EAAE,GAAG,IAAI,GAAG,KAAK,CAAC;AACpC,QAAI,KAAK,KAAK,yBAAe,QAAQ,EAAE,EAAE;AACvC,6CAAc,sBAAY,cAAc,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE;AACpD,eAAO,EAAE,+BAAY,gBAAgB;AACrC,eAAO,EAAE,+BAAY,wBAAwB;AAC7C,eAAO,EAAE,+BAAY,sBAAsB;OAC5C,EAAE,EAAE,GAAG,EAAH,GAAG,EAAE,KAAK,EAAL,KAAK,EAAE,CAAC,CAAC;KACpB;GACF;AAED,mBAAiB,6BAAC,GAAG,EAAE;AACrB,0BAAY,iBAAiB,CAAC,GAAG,CAAC,CAAA;GACnC;CACF","file":"EditGroupActionCreators.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { dispatch, dispatchAsync } from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\nimport ActorClient from '../utils/ActorClient';\nimport EditGroupStore from '../stores/EditGroupStore'\nimport ComposeActionCreators from '../actions/ComposeActionCreators';\n\nexport default {\n  show(gid) {\n    const group = ActorClient.getGroup(gid);\n    ActorClient.bindGroup(gid, this.onCurrentGroupChange);\n    dispatch(ActionTypes.GROUP_EDIT_MODAL_SHOW, { group });\n    ComposeActionCreators.toggleAutoFocus(false);\n  },\n\n  hide()  {\n    const group = EditGroupStore.getGroup();\n    ActorClient.unbindGroup(group.id, this.onCurrentGroupChange);\n    dispatch(ActionTypes.GROUP_EDIT_MODAL_HIDE);\n    ComposeActionCreators.toggleAutoFocus(true);\n  },\n\n  onCurrentGroupChange(group) {\n    dispatch(ActionTypes.GROUP_INFO_CHANGED, { group })\n  },\n\n  editGroupTitle(gid, title) {\n    if (title !== EditGroupStore.getTitle()) {\n      dispatchAsync(ActorClient.editGroupTitle(gid, title), {\n        request: ActionTypes.GROUP_EDIT_TITLE,\n        success: ActionTypes.GROUP_EDIT_TITLE_SUCCESS,\n        failure: ActionTypes.GROUP_EDIT_TITLE_ERROR\n      }, { gid, title });\n    }\n  },\n\n  changeGroupAvatar(gid, avatar) {\n    ActorClient.changeGroupAvatar(gid, avatar)\n  },\n\n  editGroupAbout(gid, about) {\n    about = about === '' ? null : about;\n    if (about !== EditGroupStore.getAbout()) {\n      dispatchAsync(ActorClient.editGroupAbout(gid, about), {\n        request: ActionTypes.GROUP_EDIT_ABOUT,\n        success: ActionTypes.GROUP_EDIT_ABOUT_SUCCESS,\n        failure: ActionTypes.GROUP_EDIT_ABOUT_ERROR\n      }, { gid, about });\n    }\n  },\n\n  removeGroupAvatar(gid) {\n    ActorClient.removeGroupAvatar(gid)\n  }\n};\n"]}