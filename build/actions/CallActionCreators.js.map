{"version":3,"sources":["../../src/actions/CallActionCreators.js"],"names":[],"mappings":";;;;AAIA;;AACA;;AACA;;;;AACA;;;;AACA;;AAEA;;;;;;;;;;;;;;IAEM,kB;;;AACJ,gCAAc;AAAA;;AAAA,iDACZ,0BADY;;AAGZ,UAAK,UAAL,GAAkB,MAAK,UAAL,CAAgB,IAAhB,OAAlB;AACA,UAAK,OAAL,GAAe,MAAK,OAAL,CAAa,IAAb,OAAf;AAJY;AAKb;;+BAED,I,mBAAO;AACL,sCAAS,+BAAY,eAArB;AACD,G;;+BAED,U,uBAAW,K,EAAO;AAAA,QACR,EADQ,GACK,KADL,CACR,EADQ;AAAA,QACJ,IADI,GACK,KADL,CACJ,IADI;;AAEhB,YAAQ,IAAR;AACE,WAAK,6BAAU,OAAf;AACE,aAAK,WAAL,CAAiB,MAAjB,EAAyB,CACvB,sBAAY,QAAZ,CAAqB,EAArB,EAAyB,KAAK,OAA9B,CADuB,CAAzB;AAGA,0CAAS,+BAAY,eAArB,EAAsC,EAAE,MAAF,EAAtC;AACA;AACF,WAAK,6BAAU,KAAf;AACE,YAAI,KAAK,KAAT,EAAgB;AACd,eAAK,KAAL,CAAW,IAAX;AACA,eAAK,KAAL,GAAa,IAAb;AACD;;AAED,aAAK,cAAL,CAAoB,MAApB;AACA,0CAAS,+BAAY,eAArB;AACA;AAfJ;AAiBD,G;;+BAED,Y,yBAAa,I,EAAM;AACjB,QAAI,2BAAW,IAAX,CAAJ,EAAsB;AACpB,WAAK,QAAL,CAAc,KAAK,EAAnB;AACD,KAFD,MAEO;AACL,WAAK,aAAL,CAAmB,KAAK,EAAxB;AACD;AACF,G;;+BAED,Q,qBAAS,M,EAAQ;AACf,2CAAc,sBAAY,QAAZ,CAAqB,MAArB,CAAd,EAA4C;AAC1C,eAAS,+BAAY,IADqB;AAE1C,eAAS,+BAAY,YAFqB;AAG1C,eAAS,+BAAY;AAHqB,KAA5C,EAIG,EAAE,cAAF,EAJH;AAKD,G;;+BAED,a,0BAAc,M,EAAQ;AACpB,2CAAc,sBAAY,aAAZ,CAA0B,MAA1B,CAAd,EAAiD;AAC/C,eAAS,+BAAY,IAD0B;AAE/C,eAAS,+BAAY,YAF0B;AAG/C,eAAS,+BAAY;AAH0B,KAAjD,EAIG,EAAE,cAAF,EAJH;AAKD,G;;+BAED,O,oBAAQ,I,EAAM;AACZ,QAAI,KAAK,KAAL,KAAe,8BAAW,WAA1B,IAAyC,CAAC,KAAK,KAAnD,EAA0D;AACxD,WAAK,KAAL,GAAa,2BAAY,KAAK,WAAjB,CAAb;AACD;;AAED,sCAAS,+BAAY,YAArB,EAAmC,EAAE,UAAF,EAAnC;AACD,G;;+BAED,W,wBAAY,I,EAAM;AAChB,sCAAS,+BAAY,iBAArB,EAAwC,EAAE,UAAF,EAAxC;AACD,G;;+BAED,U,uBAAW,M,EAAQ;AACjB,0BAAY,UAAZ,CAAuB,MAAvB;AACA,sCAAS,+BAAY,WAArB,EAAkC,EAAE,cAAF,EAAlC;AACD,G;;+BAED,O,oBAAQ,M,EAAQ;AACd,0BAAY,OAAZ,CAAoB,MAApB;AACA,sCAAS,+BAAY,QAArB,EAA+B,EAAE,cAAF,EAA/B;AACD,G;;+BAED,c,2BAAe,M,EAAQ;AACrB,0BAAY,cAAZ,CAA2B,MAA3B;AACA,sCAAS,+BAAY,gBAArB,EAAuC,EAAE,cAAF,EAAvC;AACD,G;;+BAED,c,6BAAiB;AACf,sCAAS,+BAAY,iBAArB;AACD,G;;;;;kBAGY,IAAI,kBAAJ,E","file":"CallActionCreators.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport { dispatch, dispatchAsync } from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, CallTypes, CallStates } from '../constants/ActorAppConstants';\nimport ActorClient from '../utils/ActorClient';\nimport createTimer from '../utils/createTimer';\nimport { isPeerUser } from '../utils/PeerUtils';\n\nimport ActionCreators from './ActionCreators';\n\nclass CallActionCreators extends ActionCreators {\n  constructor() {\n    super();\n\n    this.handleCall = this.handleCall.bind(this);\n    this.setCall = this.setCall.bind(this);\n  }\n\n  hide() {\n    dispatch(ActionTypes.CALL_MODAL_HIDE);\n  }\n\n  handleCall(event) {\n    const { id, type } = event;\n    switch (type) {\n      case CallTypes.STARTED:\n        this.setBindings('call', [\n          ActorClient.bindCall(id, this.setCall)\n        ]);\n        dispatch(ActionTypes.CALL_MODAL_OPEN, { id });\n        break;\n      case CallTypes.ENDED:\n        if (this.timer) {\n          this.timer.stop();\n          this.timer = null;\n        }\n\n        this.removeBindings('call');\n        dispatch(ActionTypes.CALL_MODAL_HIDE)\n        break;\n    }\n  }\n\n  makePeerCall(peer) {\n    if (isPeerUser(peer)) {\n      this.makeCall(peer.id);\n    } else {\n      this.makeGroupCall(peer.id);\n    }\n  }\n\n  makeCall(peerId) {\n    dispatchAsync(ActorClient.makeCall(peerId), {\n      request: ActionTypes.CALL,\n      success: ActionTypes.CALL_SUCCESS,\n      failure: ActionTypes.CALL_ERROR\n    }, { peerId });\n  }\n\n  makeGroupCall(peerId) {\n    dispatchAsync(ActorClient.makeGroupCall(peerId), {\n      request: ActionTypes.CALL,\n      success: ActionTypes.CALL_SUCCESS,\n      failure: ActionTypes.CALL_ERROR\n    }, { peerId });\n  }\n\n  setCall(call) {\n    if (call.state === CallStates.IN_PROGRESS && !this.timer) {\n      this.timer = createTimer(this.setCallTime);\n    }\n\n    dispatch(ActionTypes.CALL_CHANGED, { call });\n  }\n\n  setCallTime(time) {\n    dispatch(ActionTypes.CALL_TIME_CHANGED, { time });\n  }\n\n  answerCall(callId) {\n    ActorClient.answerCall(callId);\n    dispatch(ActionTypes.CALL_ANSWER, { callId })\n  }\n\n  endCall(callId) {\n    ActorClient.endCall(callId);\n    dispatch(ActionTypes.CALL_END, { callId })\n  }\n\n  toggleCallMute(callId) {\n    ActorClient.toggleCallMute(callId);\n    dispatch(ActionTypes.CALL_MUTE_TOGGLE, { callId })\n  }\n\n  toggleFloating() {\n    dispatch(ActionTypes.CALL_FLOAT_TOGGLE)\n  }\n}\n\nexport default new CallActionCreators();\n"]}