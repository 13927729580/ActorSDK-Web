{"version":3,"sources":["../../src/actions/CreateGroupActionCreators.js"],"names":[],"mappings":";;;;AAIA;;AACA;;;;AACA;;;;AACA;;;;AAEA;;AACA;;;;;;;;;;AAEA,IAAM,4BAA4B;AAChC,MADgC,kBACzB;AACL,sCAAS,+BAAY,uBAArB;AACA,oCAAsB,eAAtB,CAAsC,KAAtC;AACD,GAJ+B;AAMhC,OANgC,mBAMxB;AACN,sCAAS,+BAAY,wBAArB;AACA,oCAAsB,eAAtB,CAAsC,IAAtC;AACD,GAT+B;AAWhC,cAXgC,wBAWnB,IAXmB,EAWb;AACjB,sCAAS,+BAAY,qBAArB,EAA4C,EAAE,UAAF,EAA5C;AACD,GAb+B;;;;;;;AAmBhC,oBAnBgC,8BAmBb,eAnBa,EAmBI;AAClC,sCAAS,+BAAY,wBAArB,EAA+C,EAAE,gCAAF,EAA/C;AACD,GArB+B;AAuBhC,aAvBgC,uBAuBpB,KAvBoB,EAuBb,MAvBa,EAuBL,SAvBK,EAuBM;AACpC,QAAM,cAAc,SAAd,WAAc;AAAA,aAAM,uCAAc,sBAAY,WAAZ,CAAwB,KAAxB,EAA+B,MAA/B,EAAuC,SAAvC,CAAd,EAAiE;AACzF,iBAAS,+BAAY,YADoE;AAEzF,iBAAS,+BAAY,oBAFoE;AAGzF,iBAAS,+BAAY;AAHoE,OAAjE,EAIvB,EAAE,YAAF,EAAS,cAAT,EAAiB,oBAAjB,EAJuB,CAAN;AAAA,KAApB;;AAMA,QAAM,mBAAmB,SAAnB,gBAAmB,CAAC,IAAD;AAAA,aAAU,kBAAQ,IAAR,UAAoB,oBAAU,YAAV,CAAuB,IAAvB,CAApB,CAAV;AAAA,KAAzB;;AAEA,kBACG,IADH,CACQ,gBADR,EAEG,IAFH,CAEQ,KAAK,KAFb;AAGD;AAnC+B,CAAlC;;kBAsCe,yB","file":"CreateGroupActionCreators.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { dispatch, dispatchAsync } from '../dispatcher/ActorAppDispatcher';\nimport ActorClient from '../utils/ActorClient';\nimport history from '../utils/history';\nimport PeerUtils from '../utils/PeerUtils';\n\nimport { ActionTypes } from '../constants/ActorAppConstants';\nimport ComposeActionCreators from '../actions/ComposeActionCreators';\n\nconst CreateGroupActionCreators = {\n  open() {\n    dispatch(ActionTypes.GROUP_CREATE_MODAL_OPEN);\n    ComposeActionCreators.toggleAutoFocus(false);\n  },\n\n  close() {\n    dispatch(ActionTypes.GROUP_CREATE_MODAL_CLOSE);\n    ComposeActionCreators.toggleAutoFocus(true);\n  },\n\n  setGroupName(name) {\n    dispatch(ActionTypes.GROUP_CREATE_SET_NAME, { name });\n  },\n\n  //setGroupAvatar(avatar) {\n  //  dispatch(ActionTypes.GROUP_CREATE_SET_AVATAR, { avatar });\n  //},\n\n  setSelectedUserIds(selectedUserIds) {\n    dispatch(ActionTypes.GROUP_CREATE_SET_MEMBERS, { selectedUserIds });\n  },\n\n  createGroup(title, avatar, memberIds) {\n    const createGroup = () => dispatchAsync(ActorClient.createGroup(title, avatar, memberIds), {\n      request: ActionTypes.GROUP_CREATE,\n      success: ActionTypes.GROUP_CREATE_SUCCESS,\n      failure: ActionTypes.GROUP_CREATE_ERROR\n    }, { title, avatar, memberIds });\n\n    const openCreatedGroup = (peer) => history.push(`/im/${PeerUtils.peerToString(peer)}`);\n\n    createGroup()\n      .then(openCreatedGroup)\n      .then(this.close)\n  }\n};\n\nexport default CreateGroupActionCreators;\n"]}