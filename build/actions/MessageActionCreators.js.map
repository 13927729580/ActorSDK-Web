{"version":3,"sources":["../../src/actions/MessageActionCreators.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAUA,IAAM,aAAa,GAAG,SAAhB,aAAa,CAAI,IAAI,EAAK;AAC9B,cAHO,KAAK,CAGN,mBAAmB,CAAC,SAAS,CAAC,CAAC;AACrC,SAAO,YAJA,KAAK,CAIC,cAAc,CAAC,IAAI,CAAC,CAAC;CACnC,CAAC;;kBAEa;AACb,iBAAe,EAAE,yBAAC,IAAI,EAAE,OAAO,EAAK;AAClC,0BAAY,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;GAC3C;;AAED,iBAAe,EAAE,yBAAC,IAAI,EAAE,IAAI,EAAK;AAC/B,4BAjBK,QAAQ,EAiBJ,mBAhBJ,WAAW,CAgBK,iBAAiB,EAAE;AACtC,UAAI,EAAJ,IAAI,EAAE,IAAI,EAAJ,IAAI;KACX,CAAC,CAAC;AACH,0BAAY,eAAe,CAAC,IAAI,EAAE,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;GACxD;;AAED,iBAAe,EAAE,yBAAC,IAAI,EAAE,IAAI,EAAK;AAC/B,4BAxBK,QAAQ,EAwBJ,mBAvBJ,WAAW,CAuBK,iBAAiB,EAAE;AACtC,UAAI,EAAJ,IAAI,EAAE,IAAI,EAAJ,IAAI;KACX,CAAC,CAAC;AACH,0BAAY,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;GACzC;;AAED,kBAAgB,EAAE,0BAAC,IAAI,EAAE,KAAK,EAAK;AACjC,4BA/BK,QAAQ,EA+BJ,mBA9BJ,WAAW,CA8BK,kBAAkB,EAAE;AACvC,UAAI,EAAJ,IAAI,EAAE,KAAK,EAAL,KAAK;KACZ,CAAC,CAAC;AACH,0BAAY,gBAAgB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;GAC3C;;AAED,2BAAyB,EAAE,mCAAC,IAAI,EAAE,KAAK,EAAK;AAC1C,0BAAY,yBAAyB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;GACpD;;AAED,eAAa,EAAE,uBAAC,IAAI,EAAE,GAAG,EAAK;AAC5B,0BAAY,aAAa,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;AACrC,4BA3CK,QAAQ,EA2CJ,mBA1CJ,WAAW,CA0CK,cAAc,EAAE;AACnC,UAAI,EAAJ,IAAI,EAAE,GAAG,EAAH,GAAG;KACV,CAAC,CAAC;GACJ;;AAED,SAAO,EAAE,iBAAC,IAAI,EAAE,GAAG,EAAK;AACtB,0BAAY,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;GAChC;;AAED,YAAU,EAAE,oBAAC,IAAI,EAAE,GAAG,EAAK;AACzB,0BAAY,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;GACnC;;AAED,aAAW,uBAAC,QAAQ,EAAE;AACpB,4BAzDK,QAAQ,EAyDJ,mBAxDJ,WAAW,CAwDK,gBAAgB,EAAE,EAAE,QAAQ,EAAR,QAAQ,EAAE,CAAC,CAAC;GACtD;AAED,aAAW,uBAAC,eAAe,EAAE;AAC3B,4BA7DK,QAAQ,EA6DJ,mBA5DJ,WAAW,CA4DK,qBAAqB,EAAE,EAAE,eAAe,EAAf,eAAe,EAAE,CAAC,CAAC;GAClE;CACF","file":"MessageActionCreators.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { dispatch } from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\n\nimport ActorClient from '../utils/ActorClient';\nimport { emoji } from '../utils/EmojiUtils';\n\nconst replaceColons = (text) => {\n  emoji.change_replace_mode('unified');\n  return emoji.replace_colons(text);\n};\n\nexport default {\n  setMessageShown: (peer, message) => {\n    ActorClient.onMessageShown(peer, message);\n  },\n\n  sendTextMessage: (peer, text) => {\n    dispatch(ActionTypes.MESSAGE_SEND_TEXT, {\n      peer, text\n    });\n    ActorClient.sendTextMessage(peer, replaceColons(text));\n  },\n\n  sendFileMessage: (peer, file) => {\n    dispatch(ActionTypes.MESSAGE_SEND_FILE, {\n      peer, file\n    });\n    ActorClient.sendFileMessage(peer, file);\n  },\n\n  sendPhotoMessage: (peer, photo) => {\n    dispatch(ActionTypes.MESSAGE_SEND_PHOTO, {\n      peer, photo\n    });\n    ActorClient.sendPhotoMessage(peer, photo);\n  },\n\n  sendClipboardPhotoMessage: (peer, photo) => {\n    ActorClient.sendClipboardPhotoMessage(peer, photo);\n  },\n\n  deleteMessage: (peer, rid) => {\n    ActorClient.deleteMessage(peer, rid);\n    dispatch(ActionTypes.MESSAGE_DELETE, {\n      peer, rid\n    });\n  },\n\n  addLike: (peer, rid) => {\n    ActorClient.addLike(peer, rid);\n  },\n\n  removeLike: (peer, rid) => {\n    ActorClient.removeLike(peer, rid);\n  },\n\n  setMessages(messages) {\n    dispatch(ActionTypes.MESSAGES_CHANGED, { messages });\n  },\n\n  setSelected(selectedMesages) {\n    dispatch(ActionTypes.MESSAGES_SET_SELECTED, { selectedMesages });\n  }\n};\n"]}