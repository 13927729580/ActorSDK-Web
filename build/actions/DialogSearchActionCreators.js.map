{"version":3,"sources":["../../src/actions/DialogSearchActionCreators.js"],"names":[],"mappings":";;;;AAGA;;AACA;;AACA;;AACA;;;;AAEA;;;;AAEA;;;;;;;;;;;IAEM,0B;AACJ,wCAAc;AAAA;;AACZ,SAAK,WAAL,GAAmB,sBAAS,KAAK,WAAd,EAA2B,GAA3B,EAAgC,EAAE,UAAU,IAAZ,EAAhC,CAAnB;AACA,SAAK,WAAL,GAAmB,sBAAS,KAAK,WAAd,EAA2B,GAA3B,EAAgC,EAAE,UAAU,IAAZ,EAAhC,CAAnB;AACA,SAAK,YAAL,GAAoB,sBAAS,KAAK,YAAd,EAA4B,GAA5B,EAAiC,EAAE,UAAU,IAAZ,EAAjC,CAApB;AACA,SAAK,aAAL,GAAqB,sBAAS,KAAK,aAAd,EAA6B,GAA7B,EAAkC,EAAE,UAAU,IAAZ,EAAlC,CAArB;AACD;;uCAED,I,mBAAiB;AAAA,QAAZ,KAAY,yDAAJ,EAAI;;AACf,sCAAS,+BAAY,kBAArB;AACA,oCAAsB,eAAtB,CAAsC,KAAtC;;AAEA,SAAK,iBAAL,CAAuB,KAAvB;AACD,G;;uCAED,K,oBAAQ;AACN,sCAAS,+BAAY,kBAArB;AACA,oCAAsB,eAAtB,CAAsC,IAAtC;AACD,G;;uCAED,iB,8BAAkB,K,EAAoB;AAAA,QAAb,MAAa,yDAAJ,EAAI;;AACpC,sCAAS,+BAAY,0BAArB,EAAiD,EAAE,YAAF,EAAjD;;AAEA,QAAI,OAAO,IAAX,EAAiB,KAAK,WAAL,CAAiB,KAAjB;AACjB,QAAI,OAAO,IAAX,EAAiB,KAAK,WAAL;AACjB,QAAI,OAAO,KAAX,EAAkB,KAAK,YAAL;AAClB,QAAI,OAAO,MAAX,EAAmB,KAAK,aAAL;AACpB,G;;uCAED,W,wBAAY,K,EAAO;AACjB,QAAM,OAAO,sBAAY,cAAZ,EAAb;AACA,2CAAc,sBAAY,WAAZ,CAAwB,IAAxB,EAA8B,KAA9B,CAAd,EAAoD;AAClD,eAAS,+BAAY,kBAD6B;AAElD,eAAS,+BAAY,0BAF6B;AAGlD,eAAS,+BAAY;AAH6B,KAApD,EAIG,EAAE,UAAF,EAAQ,YAAR,EAJH;AAKD,G;;uCAED,W,0BAAc;AACZ,QAAM,OAAO,sBAAY,cAAZ,EAAb;AACA,2CAAc,sBAAY,WAAZ,CAAwB,IAAxB,CAAd,EAA6C;AAC3C,eAAS,+BAAY,kBADsB;AAE3C,eAAS,+BAAY,0BAFsB;AAG3C,eAAS,+BAAY;AAHsB,KAA7C,EAIG,EAAE,UAAF,EAJH;AAKD,G;;uCAED,Y,2BAAe;AACb,QAAM,OAAO,sBAAY,cAAZ,EAAb;AACA,2CAAc,sBAAY,YAAZ,CAAyB,IAAzB,CAAd,EAA8C;AAC5C,eAAS,+BAAY,mBADuB;AAE5C,eAAS,+BAAY,2BAFuB;AAG5C,eAAS,+BAAY;AAHuB,KAA9C,EAIG,EAAE,UAAF,EAJH;AAKD,G;;uCAED,a,4BAAgB;AACd,QAAM,OAAO,sBAAY,cAAZ,EAAb;AACA,2CAAc,sBAAY,aAAZ,CAA0B,IAA1B,CAAd,EAA+C;AAC7C,eAAS,+BAAY,mBADwB;AAE7C,eAAS,+BAAY,2BAFwB;AAG7C,eAAS,+BAAY;AAHwB,KAA/C,EAIG,EAAE,UAAF,EAJH;AAKD,G;;;;;kBAGY,IAAI,0BAAJ,E","file":"DialogSearchActionCreators.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\nimport { debounce } from 'lodash';\nimport { dispatch, dispatchAsync } from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\nimport ActorClient from '../utils/ActorClient';\n\nimport ComposeActionCreators from './ComposeActionCreators';\n\nimport DialogStore from '../stores/DialogStore';\n\nclass DialogSearchActionCreators {\n  constructor() {\n    this.findAllText = debounce(this.findAllText, 300, { trailing: true });\n    this.findAllDocs = debounce(this.findAllDocs, 300, { trailing: true });\n    this.findAllLinks = debounce(this.findAllLinks, 300, { trailing: true });\n    this.findAllPhotos = debounce(this.findAllPhotos, 300, { trailing: true });\n  }\n\n  open(query = '') {\n    dispatch(ActionTypes.DIALOG_SEARCH_SHOW);\n    ComposeActionCreators.toggleAutoFocus(false);\n\n    this.changeSearchQuery(query)\n  }\n\n  close() {\n    dispatch(ActionTypes.DIALOG_SEARCH_HIDE);\n    ComposeActionCreators.toggleAutoFocus(true);\n  }\n\n  changeSearchQuery(query, filter = {}) {\n    dispatch(ActionTypes.DIALOG_SEARCH_CHANGE_QUERY, { query });\n\n    if (filter.text) this.findAllText(query);\n    if (filter.docs) this.findAllDocs();\n    if (filter.links) this.findAllLinks();\n    if (filter.photos) this.findAllPhotos();\n  }\n\n  findAllText(query) {\n    const peer = DialogStore.getCurrentPeer();\n    dispatchAsync(ActorClient.findAllText(peer, query), {\n      request: ActionTypes.DIALOG_SEARCH_TEXT,\n      success: ActionTypes.DIALOG_SEARCH_TEXT_SUCCESS,\n      failure: ActionTypes.DIALOG_SEARCH_TEXT_ERROR\n    }, { peer, query });\n  }\n\n  findAllDocs() {\n    const peer = DialogStore.getCurrentPeer();\n    dispatchAsync(ActorClient.findAllDocs(peer), {\n      request: ActionTypes.DIALOG_SEARCH_DOCS,\n      success: ActionTypes.DIALOG_SEARCH_DOCS_SUCCESS,\n      failure: ActionTypes.DIALOG_SEARCH_DOCS_ERROR\n    }, { peer });\n  }\n\n  findAllLinks() {\n    const peer = DialogStore.getCurrentPeer();\n    dispatchAsync(ActorClient.findAllLinks(peer), {\n      request: ActionTypes.DIALOG_SEARCH_LINKS,\n      success: ActionTypes.DIALOG_SEARCH_LINKS_SUCCESS,\n      failure: ActionTypes.DIALOG_SEARCH_LINKS_ERROR\n    }, { peer });\n  }\n\n  findAllPhotos() {\n    const peer = DialogStore.getCurrentPeer();\n    dispatchAsync(ActorClient.findAllPhotos(peer), {\n      request: ActionTypes.DIALOG_SEARCH_PHOTO,\n      success: ActionTypes.DIALOG_SEARCH_PHOTO_SUCCESS,\n      failure: ActionTypes.DIALOG_SEARCH_PHOTO_ERROR\n    }, { peer });\n  }\n}\n\nexport default new DialogSearchActionCreators();\n"]}