{"version":3,"sources":["../../src/utils/Inputs.js"],"names":[],"mappings":";;;AAAA,IAAM,SAAS;AACb,qBAAmB,2BAAC,EAAD,EAAQ;AACzB,QAAI,QAAQ,CAAZ;AAAA,QAAe,MAAM,CAArB;AAAA,QAAwB,eAAxB;AAAA,QAAyC,KAAzC;AAAA,QACE,cADF;AAAA,QACkB,GADlB;AAAA,QACuB,QADvB;;AAGA,QAAI,OAAO,GAAG,cAAV,KAA6B,QAA7B,IAAyC,OAAO,GAAG,YAAV,KAA2B,QAAxE,EAAkF;AAChF,cAAQ,GAAG,cAAX;AACA,YAAM,GAAG,YAAT;AACD,KAHD,MAGO;AACL,cAAQ,SAAS,SAAT,CAAmB,WAAnB,EAAR;;AAEA,UAAI,SAAS,MAAM,aAAN,OAA0B,EAAvC,EAA2C;AACzC,cAAM,GAAG,KAAH,CAAS,MAAf;AACA,0BAAkB,GAAG,KAAH,CAAS,OAAT,CAAiB,OAAjB,EAA0B,IAA1B,CAAlB;;;AAGA,yBAAiB,GAAG,eAAH,EAAjB;AACA,uBAAe,cAAf,CAA8B,MAAM,WAAN,EAA9B;;;;;AAKA,mBAAW,GAAG,eAAH,EAAX;AACA,iBAAS,QAAT,CAAkB,KAAlB;;AAEA,YAAI,eAAe,gBAAf,CAAgC,YAAhC,EAA8C,QAA9C,IAA0D,CAAC,CAA/D,EAAkE;AAChE,kBAAQ,MAAM,GAAd;AACD,SAFD,MAEO;AACL,kBAAQ,CAAC,eAAe,SAAf,CAAyB,WAAzB,EAAsC,CAAC,GAAvC,CAAT;AACA,mBAAS,gBAAgB,KAAhB,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,KAAhC,CAAsC,IAAtC,EAA4C,MAA5C,GAAqD,CAA9D;;AAEA,cAAI,eAAe,gBAAf,CAAgC,UAAhC,EAA4C,QAA5C,IAAwD,CAAC,CAA7D,EAAgE;AAC9D,kBAAM,GAAN;AACD,WAFD,MAEO;AACL,kBAAM,CAAC,eAAe,OAAf,CAAuB,WAAvB,EAAoC,CAAC,GAArC,CAAP;AACA,mBAAO,gBAAgB,KAAhB,CAAsB,CAAtB,EAAyB,GAAzB,EAA8B,KAA9B,CAAoC,IAApC,EAA0C,MAA1C,GAAmD,CAA1D;AACD;AACF;AACF;AACF;;AAED,WAAO;AACL,aAAO,KADF;AAEL,WAAK;AAFA,KAAP;AAID;AA7CY,CAAf;;kBAgDe,M","file":"Inputs.js","sourcesContent":["const inputs = {\n  getInputSelection: (el) => {\n    var start = 0, end = 0, normalizedValue, range,\n      textInputRange, len, endRange;\n\n    if (typeof el.selectionStart === 'number' && typeof el.selectionEnd === 'number') {\n      start = el.selectionStart;\n      end = el.selectionEnd;\n    } else {\n      range = document.selection.createRange();\n\n      if (range && range.parentElement() === el) {\n        len = el.value.length;\n        normalizedValue = el.value.replace(/\\r\\n/g, '\\n');\n\n        // Create a working TextRange that lives only in the input\n        textInputRange = el.createTextRange();\n        textInputRange.moveToBookmark(range.getBookmark());\n\n        // Check if the start and end of the selection are at the very end\n        // of the input, since moveStart/moveEnd doesn't return what we want\n        // in those cases\n        endRange = el.createTextRange();\n        endRange.collapse(false);\n\n        if (textInputRange.compareEndPoints('StartToEnd', endRange) > -1) {\n          start = end = len;\n        } else {\n          start = -textInputRange.moveStart('character', -len);\n          start += normalizedValue.slice(0, start).split('\\n').length - 1;\n\n          if (textInputRange.compareEndPoints('EndToEnd', endRange) > -1) {\n            end = len;\n          } else {\n            end = -textInputRange.moveEnd('character', -len);\n            end += normalizedValue.slice(0, end).split('\\n').length - 1;\n          }\n        }\n      }\n    }\n\n    return {\n      start: start,\n      end: end\n    };\n  }\n};\n\nexport default inputs;\n"]}