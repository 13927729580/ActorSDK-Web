{"version":3,"sources":["../../src/utils/PeerUtils.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;kBAMe;AACb,cAAY,EAAE,sBAAC,IAAI,EAAK;AACtB,QAAI,GAAG,YAAA,CAAC;;AAER,YAAQ,IAAI,CAAC,IAAI;AACf,WAAK,6BAAU,IAAI;AACb,WAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC;AACpB,cAAM;AAAA,AACZ,WAAK,6BAAU,KAAK;AACd,WAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC;AACpB,cAAM;AAAA,AACZ;AACM,cAAM,mBAAmB,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,CAAE;AAAA,KAC9D;;AAED,WAAO,GAAG,CAAC;GACZ;;AAED,cAAY,EAAE,sBAAC,GAAG,EAAK;AACrB,QAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,QAAI,GAAG,EAAE;AACP,UAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;;AAE1C,UAAI,MAAM,GAAG,CAAC,EAAE;AACd,gBAAQ,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;AACzB,eAAK,GAAG;AACN,gBAAI,GAAG,sBAAY,WAAW,CAAC,MAAM,CAAC,CAAC;AACvC,kBAAM;AAAA,AACR,eAAK,GAAG;AACN,gBAAI,GAAG,sBAAY,YAAY,CAAC,MAAM,CAAC,CAAC;AACxC,kBAAM;AAAA,AACR,kBAAQ;SACT;OACF;KACF;;AAED,WAAO,IAAI,CAAC;GACb;;AAED,QAAM,EAAE,gBAAC,KAAK,EAAE,KAAK,EAAK;AACxB,WACE,AAAC,iBAAE,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAE,aAAa,CAAC,KAAK,CAAC,IACjD,CAAC,iBAAE,aAAa,CAAC,KAAK,CAAC,IAAI,iBAAE,aAAa,CAAC,KAAK,CAAC,AAAC,IAClD,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,EAAE,KAAK,KAAK,CAAC,EAAE,AAAC,CACpD;GACH;CACF","file":"PeerUtils.js","sourcesContent":["import _ from 'lodash';\n\nimport { PeerTypes } from '../constants/ActorAppConstants';\n\nimport ActorClient from './ActorClient';\n\nexport default {\n  peerToString: (peer) => {\n    let str;\n\n    switch (peer.type) {\n      case PeerTypes.USER:\n            str = 'u' + peer.id;\n            break;\n      case PeerTypes.GROUP:\n            str = 'g' + peer.id;\n            break;\n      default:\n            throw('Unknown peer type' + peer.type + ' ' + peer.id);\n    }\n\n    return str;\n  },\n\n  stringToPeer: (str) => {\n    let peer = null;\n\n    if (str) {\n      const peerId = parseInt(str.substring(1));\n\n      if (peerId > 0) {\n        switch (str.substring(0, 1)) {\n          case 'u':\n            peer = ActorClient.getUserPeer(peerId);\n            break;\n          case 'g':\n            peer = ActorClient.getGroupPeer(peerId);\n            break;\n          default:\n        }\n      }\n    }\n\n    return peer;\n  },\n\n  equals: (peer1, peer2) => {\n    return (\n      (_.isPlainObject(peer1) && !_.isPlainObject(peer2)) ||\n      (!_.isPlainObject(peer1) && _.isPlainObject(peer2)) ||\n      (peer1.type === peer2.type && peer1.id === peer2.id)\n    );\n  }\n};\n"]}