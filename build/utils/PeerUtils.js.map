{"version":3,"sources":["../../src/utils/PeerUtils.js"],"names":[],"mappings":";;;;AAAA;;AAEA;;;;;;kBAEe;AACb,sCAAa,MAAM;QACT,KAAa,KAAb,GADS;QACL,OAAS,KAAT,KADK;;;AAGjB,YAAQ,IAAR;AACE,WAAK,6BAAU,IAAV;AACH,eAAO,oCAAiB,IAAjB,GAAwB,EAAxB,CADT;AADF,WAGO,6BAAU,KAAV;AACH,eAAO,oCAAiB,KAAjB,GAAyB,EAAzB,CADT;AAHF;AAMI,gBAAQ,KAAR,CAAc,yCAAd,EAAyD,IAAzD,EAA+D,EAA/D,EADF;AALF,KAHiB;GADN;AAcb,sCAAa,KAAK;AAChB,QAAM,OAAO,IAAI,MAAJ,CAAW,CAAX,CAAP,CADU;AAEhB,QAAM,KAAK,SAAS,IAAI,SAAJ,CAAc,CAAd,CAAT,EAA2B,EAA3B,CAAL,CAFU;;AAIhB,YAAQ,IAAR;AACE,WAAK,oCAAiB,IAAjB;AACH,eAAO,sBAAY,WAAZ,CAAwB,EAAxB,CAAP,CADF;AADF,WAGO,oCAAiB,KAAjB;AACH,eAAO,sBAAY,YAAZ,CAAyB,EAAzB,CAAP,CADF;AAHF;AAME,gBAAQ,KAAR,CAAc,yCAAd,EAAyD,IAAzD,EAA+D,EAA/D,EADA;AALF,KAJgB;GAdL;AA4Bb,4BAAQ,MAAM;AACZ,QAAI;AACF,cAAQ,KAAK,IAAL;AACN,aAAK,6BAAU,IAAV;AACH,iBAAO,sBAAY,OAAZ,CAAoB,KAAK,EAAL,CAA3B,CADF;AADF,aAGO,6BAAU,KAAV;AACH,iBAAO,sBAAY,QAAZ,CAAqB,KAAK,EAAL,CAA5B,CADF;AAHF,OADE;KAAJ,CAOE,OAAO,CAAP,EAAU;AACV,cAAQ,KAAR,CAAc,CAAd,EADU;KAAV;;AAIF,WAAO,KAAP,CAZY;GA5BD;AA2Cb,0BAAO,OAAO,OAAO;AACnB,WAAO,SAAS,KAAT,IAAkB,MAAM,EAAN,KAAa,MAAM,EAAN,IAAY,MAAM,IAAN,KAAe,MAAM,IAAN,CAD9C;GA3CR","file":"PeerUtils.js","sourcesContent":["import { PeerTypes, PeerTypePrefixes } from '../constants/ActorAppConstants';\n\nimport ActorClient from './ActorClient';\n\nexport default {\n  peerToString(peer) {\n    const { id, type } = peer;\n\n    switch (type) {\n      case PeerTypes.USER:\n        return PeerTypePrefixes.USER + id;\n      case PeerTypes.GROUP:\n        return PeerTypePrefixes.GROUP + id;\n      default:\n        console.error('Unknown peer type: { type: %s, id: %s }', type, id);\n    }\n  },\n\n  stringToPeer(str) {\n    const type = str.charAt(0);\n    const id = parseInt(str.substring(1), 10);\n\n    switch (type) {\n      case PeerTypePrefixes.USER:\n        return ActorClient.getUserPeer(id);\n      case PeerTypePrefixes.GROUP:\n        return ActorClient.getGroupPeer(id);\n      default:\n      console.error('Unknown peer type: { type: %s, id: %s }', type, id);\n    }\n  },\n\n  hasPeer(peer) {\n    try {\n      switch (peer.type) {\n        case PeerTypes.USER:\n          return ActorClient.getUser(peer.id);\n        case PeerTypes.GROUP:\n          return ActorClient.getGroup(peer.id);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n\n    return false;\n  },\n\n  equals(peer1, peer2) {\n    return peer1 && peer2 && peer1.id === peer2.id && peer1.type === peer2.type;\n  }\n};\n"]}