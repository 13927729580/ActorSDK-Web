{"version":3,"sources":["../../src/utils/PeerUtils.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;kBAMe;AACb,gBAAc,sBAAC,IAAD,EAAU;AACtB,QAAI,YAAJ,CADsB;;AAGtB,YAAQ,KAAK,IAAL;AACN,WAAK,6BAAU,IAAV;AACC,cAAM,MAAM,KAAK,EAAL,CADlB;AAEM,cAFN;AADF,WAIO,6BAAU,KAAV;AACC,cAAM,MAAM,KAAK,EAAL,CADlB;AAEM,cAFN;AAJF;AAQQ,cAAM,sBAAsB,KAAK,IAAL,GAAY,GAAlC,GAAwC,KAAK,EAAL,CADpD;AAPF,KAHsB;;AActB,WAAO,GAAP,CAdsB;GAAV;;AAiBd,gBAAc,sBAAC,GAAD,EAAS;AACrB,QAAI,OAAO,IAAP,CADiB;;AAGrB,QAAI,GAAJ,EAAS;AACP,UAAM,SAAS,SAAS,IAAI,SAAJ,CAAc,CAAd,CAAT,CAAT,CADC;;AAGP,UAAI,SAAS,CAAT,EAAY;AACd,gBAAQ,IAAI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAR;AACE,eAAK,GAAL;AACE,mBAAO,sBAAY,WAAZ,CAAwB,MAAxB,CAAP,CADF;AAEE,kBAFF;AADF,eAIO,GAAL;AACE,mBAAO,sBAAY,YAAZ,CAAyB,MAAzB,CAAP,CADF;AAEE,kBAFF;AAJF;SADc;OAAhB;KAHF;;AAgBA,WAAO,IAAP,CAnBqB;GAAT;;AAsBd,UAAQ,gBAAC,KAAD,EAAQ,KAAR,EAAkB;AACxB,WACE,gBAAC,CAAE,aAAF,CAAgB,KAAhB,KAA0B,CAAC,iBAAE,aAAF,CAAgB,KAAhB,CAAD,IAC1B,CAAC,iBAAE,aAAF,CAAgB,KAAhB,CAAD,IAA2B,iBAAE,aAAF,CAAgB,KAAhB,CAA3B,IACA,MAAM,IAAN,KAAe,MAAM,IAAN,IAAc,MAAM,EAAN,KAAa,MAAM,EAAN,CAJrB;GAAlB","file":"PeerUtils.js","sourcesContent":["import _ from 'lodash';\n\nimport { PeerTypes } from '../constants/ActorAppConstants';\n\nimport ActorClient from './ActorClient';\n\nexport default {\n  peerToString: (peer) => {\n    let str;\n\n    switch (peer.type) {\n      case PeerTypes.USER:\n            str = 'u' + peer.id;\n            break;\n      case PeerTypes.GROUP:\n            str = 'g' + peer.id;\n            break;\n      default:\n            throw('Unknown peer type' + peer.type + ' ' + peer.id);\n    }\n\n    return str;\n  },\n\n  stringToPeer: (str) => {\n    let peer = null;\n\n    if (str) {\n      const peerId = parseInt(str.substring(1));\n\n      if (peerId > 0) {\n        switch (str.substring(0, 1)) {\n          case 'u':\n            peer = ActorClient.getUserPeer(peerId);\n            break;\n          case 'g':\n            peer = ActorClient.getGroupPeer(peerId);\n            break;\n          default:\n        }\n      }\n    }\n\n    return peer;\n  },\n\n  equals: (peer1, peer2) => {\n    return (\n      (_.isPlainObject(peer1) && !_.isPlainObject(peer2)) ||\n      (!_.isPlainObject(peer1) && _.isPlainObject(peer2)) ||\n      (peer1.type === peer2.type && peer1.id === peer2.id)\n    );\n  }\n};\n"]}