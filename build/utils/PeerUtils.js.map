{"version":3,"sources":["../../src/utils/PeerUtils.js"],"names":[],"mappings":";;;;AAAA;;AAEA;;;;;;kBAEe;AACb,cADa,wBACA,IADA,EACM;AAAA,QACT,EADS,GACI,IADJ,CACT,EADS;AAAA,QACL,IADK,GACI,IADJ,CACL,IADK;;;AAGjB,YAAQ,IAAR;AACE,WAAK,6BAAU,IAAf;AACE,eAAO,oCAAiB,IAAjB,GAAwB,EAA/B;AACF,WAAK,6BAAU,KAAf;AACE,eAAO,oCAAiB,KAAjB,GAAyB,EAAhC;AACF;AACE,gBAAQ,KAAR,CAAc,yCAAd,EAAyD,IAAzD,EAA+D,EAA/D;AANJ;AAQD,GAZY;AAcb,cAda,wBAcA,GAdA,EAcK;AAChB,QAAM,OAAO,IAAI,MAAJ,CAAW,CAAX,CAAb;AACA,QAAM,KAAK,SAAS,IAAI,SAAJ,CAAc,CAAd,CAAT,EAA2B,EAA3B,CAAX;;AAEA,YAAQ,IAAR;AACE,WAAK,oCAAiB,IAAtB;AACE,eAAO,sBAAY,WAAZ,CAAwB,EAAxB,CAAP;AACF,WAAK,oCAAiB,KAAtB;AACE,eAAO,sBAAY,YAAZ,CAAyB,EAAzB,CAAP;AACF;AACA,gBAAQ,KAAR,CAAc,yCAAd,EAAyD,IAAzD,EAA+D,EAA/D;AANF;AAQD,GA1BY;AA4Bb,SA5Ba,mBA4BL,IA5BK,EA4BC;AACZ,QAAI;AACF,cAAQ,KAAK,IAAb;AACE,aAAK,6BAAU,IAAf;AACE,iBAAO,sBAAY,OAAZ,CAAoB,KAAK,EAAzB,CAAP;AACF,aAAK,6BAAU,KAAf;AACE,iBAAO,sBAAY,QAAZ,CAAqB,KAAK,EAA1B,CAAP;AAJJ;AAMD,KAPD,CAOE,OAAO,CAAP,EAAU;AACV,cAAQ,KAAR,CAAc,CAAd;AACD;;AAED,WAAO,KAAP;AACD,GAzCY;AA2Cb,QA3Ca,kBA2CN,KA3CM,EA2CC,KA3CD,EA2CQ;AACnB,WAAO,QAAQ,SAAS,KAAjB,KAA2B,MAAM,EAAN,KAAa,MAAM,EAA9C,IAAoD,MAAM,IAAN,KAAe,MAAM,IAAhF;AACD;AA7CY,C","file":"PeerUtils.js","sourcesContent":["import { PeerTypes, PeerTypePrefixes } from '../constants/ActorAppConstants';\n\nimport ActorClient from './ActorClient';\n\nexport default {\n  peerToString(peer) {\n    const { id, type } = peer;\n\n    switch (type) {\n      case PeerTypes.USER:\n        return PeerTypePrefixes.USER + id;\n      case PeerTypes.GROUP:\n        return PeerTypePrefixes.GROUP + id;\n      default:\n        console.error('Unknown peer type: { type: %s, id: %s }', type, id);\n    }\n  },\n\n  stringToPeer(str) {\n    const type = str.charAt(0);\n    const id = parseInt(str.substring(1), 10);\n\n    switch (type) {\n      case PeerTypePrefixes.USER:\n        return ActorClient.getUserPeer(id);\n      case PeerTypePrefixes.GROUP:\n        return ActorClient.getGroupPeer(id);\n      default:\n      console.error('Unknown peer type: { type: %s, id: %s }', type, id);\n    }\n  },\n\n  hasPeer(peer) {\n    try {\n      switch (peer.type) {\n        case PeerTypes.USER:\n          return ActorClient.getUser(peer.id);\n        case PeerTypes.GROUP:\n          return ActorClient.getGroup(peer.id);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n\n    return false;\n  },\n\n  equals(peer1, peer2) {\n    return Boolean(peer1 && peer2) && peer1.id === peer2.id && peer1.type === peer2.type;\n  }\n};\n"]}