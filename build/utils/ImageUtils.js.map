{"version":3,"sources":["../../src/utils/ImageUtils.js"],"names":[],"mappings":";;;;QAyBgB,S,GAAA,S;QAcA,mB,GAAA,mB;QAUA,a,GAAA,a;;AA9ChB;;;;;;AAEA,IAAM,WAAW,8BAAjB,C;;;;;AAEA,IAAM,gBAAgB,SAAhB,aAAgB,CAAC,OAAD,EAAa;AACjC,MAAM,aAAa,KAAK,QAAQ,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAL,CAAnB;AACA,MAAM,aAAa,QAAQ,KAAR,CAAc,GAAd,EAAmB,CAAnB,EAAsB,KAAtB,CAA4B,GAA5B,EAAiC,CAAjC,EAAoC,KAApC,CAA0C,GAA1C,EAA+C,CAA/C,CAAnB;AACA,MAAM,SAAS,IAAI,WAAJ,CAAgB,WAAW,MAA3B,CAAf;;AAEA,MAAI,OAAO,IAAI,UAAJ,CAAe,MAAf,CAAX;AACA,OAAK,IAAI,CAAT,IAAc,UAAd,EAA0B;AACxB,SAAK,CAAL,IAAU,WAAW,UAAX,CAAsB,CAAtB,CAAV;AACD;;AAED,SAAO,IAAI,IAAJ,CAAS,CAAC,IAAD,CAAT,EAAiB,EAAE,MAAM,UAAR,EAAjB,CAAP;AACD,CAXD;;QAcE,Q,GAAA,Q;QACA,a,GAAA,a;AAGK,SAAS,SAAT,CAAmB,MAAnB,EAA2B;AAChC,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,QAAM,QAAQ,SAAS,aAAT,CAAuB,KAAvB,CAAd;AACA,UAAM,OAAN,GAAgB,MAAhB;AACA,UAAM,MAAN,GAAe,YAAM;AACnB,YAAM,OAAN,GAAgB,IAAhB;AACA,YAAM,MAAN,GAAe,IAAf;AACA,cAAQ,KAAR;AACD,KAJD;;AAMA,UAAM,GAAN,GAAY,MAAZ;AACD,GAVM,CAAP;AAWD;;AAEM,SAAS,mBAAT,CAA6B,MAA7B,EAAqC,MAArC,EAA6C;AAClD,SAAO,UAAU,MAAV,EAAkB,IAAlB,CAAuB,UAAC,KAAD,EAAW;AACvC,QAAM,QAAQ,OAAO,KAAP,GAAe,MAAM,KAAnC;AACA,QAAM,SAAS,OAAO,MAAP,GAAgB,MAAM,MAArC;;AAEA,QAAM,MAAM,OAAO,UAAP,CAAkB,IAAlB,CAAZ;AACA,QAAI,SAAJ,CAAc,KAAd,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,KAA3B,EAAkC,MAAlC;AACD,GANM,CAAP;AAOD;;AAEM,SAAS,aAAT,CAAuB,KAAvB,EAA8B,MAA9B,EAAuE;AAAA,MAAjC,QAAiC,yDAAtB,GAAsB;AAAA,MAAjB,SAAiB,yDAAL,GAAK;;AAC5E,MAAI,QAAQ,MAAZ,EAAoB;AAClB,QAAI,QAAQ,QAAZ,EAAsB;AACpB,aAAO;AACL,eAAO,QADF;AAEL,gBAAQ,UAAU,WAAW,KAArB;AAFH,OAAP;AAID;AACF,GAPD,MAOO,IAAI,SAAS,SAAb,EAAwB;AAC7B,WAAO;AACL,aAAO,SAAS,YAAY,MAArB,CADF;AAEL,cAAQ;AAFH,KAAP;AAID;;AAED,SAAO,EAAE,YAAF,EAAS,cAAT,EAAP;AACD","file":"ImageUtils.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\nimport Lightbox from 'jsonlylightbox';\n\nconst lightbox = new Lightbox();\n\nconst dataURItoBlob = (dataURI) => {\n  const byteString = atob(dataURI.split(',')[1]);\n  const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n  const buffer = new ArrayBuffer(byteString.length);\n\n  let view = new Uint8Array(buffer);\n  for (let i in byteString) {\n    view[i] = byteString.charCodeAt(i);\n  }\n\n  return new Blob([view], { type: mimeString });\n};\n\nexport {\n  lightbox,\n  dataURItoBlob\n};\n\nexport function loadImage(source) {\n  return new Promise((resolve, reject) => {\n    const image = document.createElement('img')\n    image.onerror = reject;\n    image.onload = () => {\n      image.onerror = null;\n      image.onload = null;\n      resolve(image);\n    };\n\n    image.src = source;\n  });\n}\n\nexport function renderImageToCanvas(source, canvas) {\n  return loadImage(source).then((image) => {\n    const width = canvas.width = image.width;\n    const height = canvas.height = image.height;\n\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(image, 0, 0, width, height);\n  });\n}\n\nexport function getDimentions(width, height, maxWidth = 300, maxHeight = 400) {\n  if (width > height) {\n    if (width > maxWidth) {\n      return {\n        width: maxWidth,\n        height: height * (maxWidth / width)\n      };\n    }\n  } else if (height > maxHeight) {\n    return {\n      width: width * (maxHeight / height),\n      height: maxHeight\n    };\n  }\n\n  return { width, height };\n}\n"]}