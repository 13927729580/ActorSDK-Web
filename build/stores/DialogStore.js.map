{"version":3,"sources":["../../src/stores/DialogStore.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAUM,WAAW;YAAX,WAAW;;AACf,WADI,WAAW,CACH,UAAU,EAAE;0BADpB,WAAW;;uEAAX,WAAW,aAEP,UAAU;;AAEhB,UAAK,OAAO,GAAG,EAAE,CAAC;AAClB,UAAK,WAAW,GAAG,IAAI,CAAC;AACxB,UAAK,QAAQ,GAAG,IAAI,CAAC;;GACtB;;eAPG,WAAW;;iCASF;AACX,aAAO,IAAI,CAAC,OAAO,CAAC;KACrB;;;qCAEgB;AACf,aAAO,IAAI,CAAC,WAAW,CAAC;KACzB;;;kCAEa;AACZ,aAAO,IAAI,CAAC,QAAQ,CAAC;KACtB;;;+BAEU;AACT,UAAI,IAAI,CAAC,WAAW,KAAK,IAAI,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,KAAK,6BAAU,KAAK,EAAE;AAC1E,YAAM,KAAK,GAAG,sBAAY,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;AACxD,eAAO,KAAK,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC;OACnC,MAAM;AACL,eAAO,IAAI,CAAC;OACb;KACF;;;+BAEU,EAAE,EAAE;AACb,UAAM,eAAe,GAAG,kBAAK,IAAI,CAAC,OAAO,EAAE,EAAC,GAAG,EAAE,YAAY,EAAC,CAAC,CAAC;AAChE,UAAI,CAAC,eAAe,EAAE,OAAO,KAAK,CAAC;;AAEnC,aAAO,kBAAK,eAAe,CAAC,MAAM,EAAE,UAAC,MAAM;eAAK,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE;OAAA,CAAC,CAAC;KAC7E;;;iCAEY,MAAM,EAAE;AACnB,cAAO,MAAM,CAAC,IAAI;AAChB,aAAK,+BAAY,eAAe;AAC9B,cAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;AAC9B,cAAI,CAAC,YAAY,EAAE,CAAC;AACpB,gBAAM;AAAA,AACR,aAAK,+BAAY,gBAAgB;AAC/B,cAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;AACjC,cAAI,CAAC,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC;AAC/B,cAAI,CAAC,YAAY,EAAE,CAAC;AACpB,gBAAM;AAAA,AACR,aAAK,+BAAY,kBAAkB;AACjC,cAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;AACjC,cAAI,CAAC,WAAW,GAAG,IAAI,CAAC;AACxB,cAAI,CAAC,YAAY,EAAE,CAAC;AACpB,gBAAM;AAAA,AACR,gBAAQ;OACT;KACF;;;SAvDG,WAAW;;;kBA0DF,IAAI,WAAW,8BAAY","file":"DialogStore.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport { find, some } from 'lodash';\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, PeerTypes } from '../constants/ActorAppConstants';\nimport ActorClient from '../utils/ActorClient';\n\nclass DialogStore extends Store {\n  constructor(dispatcher) {\n    super(dispatcher);\n\n    this.dialogs = [];\n    this.currentPeer = null;\n    this.lastPeer = null;\n  }\n\n  getDialogs() {\n    return this.dialogs;\n  }\n\n  getCurrentPeer() {\n    return this.currentPeer;\n  }\n\n  getLastPeer() {\n    return this.lastPeer;\n  }\n\n  isMember() {\n    if (this.currentPeer !== null && this.currentPeer.type === PeerTypes.GROUP) {\n      const group = ActorClient.getGroup(this.currentPeer.id);\n      return group.members.length !== 0;\n    } else {\n      return true;\n    }\n  }\n\n  isFavorite(id) {\n    const favoriteDialogs = find(this.dialogs, {key: 'favourites'});\n    if (!favoriteDialogs) return false;\n\n    return some(favoriteDialogs.shorts, (dialog) => dialog.peer.peer.id === id);\n  }\n\n  __onDispatch(action) {\n    switch(action.type) {\n      case ActionTypes.DIALOGS_CHANGED:\n        this.dialogs = action.dialogs;\n        this.__emitChange();\n        break;\n      case ActionTypes.BIND_DIALOG_PEER:\n        this.lastPeer = this.currentPeer;\n        this.currentPeer = action.peer;\n        this.__emitChange();\n        break;\n      case ActionTypes.UNBIND_DIALOG_PEER:\n        this.lastPeer = this.currentPeer;\n        this.currentPeer = null;\n        this.__emitChange();\n        break;\n      default:\n    }\n  }\n}\n\nexport default new DialogStore(Dispatcher);\n"]}