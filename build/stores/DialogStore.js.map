{"version":3,"sources":["../../src/stores/DialogStore.js"],"names":[],"mappings":";;;;;;AAIA;;AACA;;AACA;;;;AACA;;AACA;;;;;;;;;;;;;;IAEM,W;;;;;;;;;wBACJ,e,8BAAkB;AAChB,WAAO;AACL,YAAM,IADD;AAEL,eAAS;AAFJ,KAAP;AAID,G;;wBAED,U,yBAAa;AAAA,oBACS,KAAK,QAAL,EADT;;AAAA,QACH,OADG,aACH,OADG;;AAEX,WAAO,OAAP;AACD,G;;wBAED,c,6BAAiB;AAAA,qBACE,KAAK,QAAL,EADF;;AAAA,QACP,IADO,cACP,IADO;;AAEf,WAAO,IAAP;AACD,G;;wBAED,Q,uBAAW;AACT,QAAM,OAAO,KAAK,cAAL,EAAb;AACA,QAAI,QAAQ,KAAK,IAAL,KAAc,6BAAU,KAApC,EAA2C;AACzC,UAAM,QAAQ,sBAAY,QAAZ,CAAqB,KAAK,EAA1B,CAAd;AACA,aAAO,SAAS,MAAM,OAAN,CAAc,MAAd,KAAyB,CAAzC;AACD;;AAED,WAAO,IAAP;AACD,G;;wBAED,U,uBAAW,E,EAAI;AACb,QAAM,kBAAkB,kBAAK,KAAK,UAAL,EAAL,EAAwB,EAAE,KAAK,YAAP,EAAxB,CAAxB;AACA,QAAI,CAAC,eAAL,EAAsB,OAAO,KAAP;;AAEtB,WAAO,kBAAK,gBAAgB,MAArB,EAA6B,UAAC,MAAD;AAAA,aAAY,OAAO,IAAP,CAAY,IAAZ,CAAiB,EAAjB,KAAwB,EAApC;AAAA,KAA7B,CAAP;AACD,G;;wBAED,M,mBAAO,K,EAAO,M,EAAQ;AACpB,YAAQ,OAAO,IAAf;AACE,WAAK,+BAAY,eAAjB;AACE,4BACK,KADL;AAEE,mBAAS,OAAO;AAFlB;;AAKF,WAAK,+BAAY,gBAAjB;AACE,4BACK,KADL;AAEE,gBAAM,OAAO;AAFf;;AAKF,WAAK,+BAAY,kBAAjB;AACE,4BACK,KADL;AAEE,gBAAM;AAFR;;AAKF;AACE,eAAO,KAAP;AApBJ;AAsBD,G;;;;;kBAGY,IAAI,WAAJ,8B","file":"DialogStore.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport { find, some } from 'lodash';\nimport { ReduceStore } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, PeerTypes } from '../constants/ActorAppConstants';\nimport ActorClient from '../utils/ActorClient';\n\nclass DialogStore extends ReduceStore {\n  getInitialState() {\n    return {\n      peer: null,\n      dialogs: []\n    };\n  }\n\n  getDialogs() {\n    const { dialogs } = this.getState();\n    return dialogs;\n  }\n\n  getCurrentPeer() {\n    const { peer } = this.getState();\n    return peer;\n  }\n\n  isMember() {\n    const peer = this.getCurrentPeer();\n    if (peer && peer.type === PeerTypes.GROUP) {\n      const group = ActorClient.getGroup(peer.id);\n      return group && group.members.length !== 0;\n    }\n\n    return true;\n  }\n\n  isFavorite(id) {\n    const favoriteDialogs = find(this.getDialogs(), { key: 'favourites' });\n    if (!favoriteDialogs) return false;\n\n    return some(favoriteDialogs.shorts, (dialog) => dialog.peer.peer.id === id);\n  }\n\n  reduce(state, action) {\n    switch (action.type) {\n      case ActionTypes.DIALOGS_CHANGED:\n        return {\n          ...state,\n          dialogs: action.dialogs\n        };\n\n      case ActionTypes.BIND_DIALOG_PEER:\n        return {\n          ...state,\n          peer: action.peer\n        };\n\n      case ActionTypes.UNBIND_DIALOG_PEER:\n        return {\n          ...state,\n          peer: null\n        };\n\n      default:\n        return state;\n    }\n  }\n}\n\nexport default new DialogStore(Dispatcher);\n"]}