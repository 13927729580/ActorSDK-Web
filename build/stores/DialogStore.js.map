{"version":3,"sources":["../../src/stores/DialogStore.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;IAUM,WAAW;YAAX,WAAW;;AACf,WADI,WAAW,CACH,UAAU,EAAE;0BADpB,WAAW;;iDAEb,kBAAM,UAAU,CAAC;;AAEjB,UAAK,OAAO,GAAG,EAAE,CAAC;AAClB,UAAK,WAAW,GAAG,IAAI,CAAC;AACxB,UAAK,QAAQ,GAAG,IAAI,CAAC;;GACtB;;AAPG,aAAW,WASf,UAAU,yBAAG;AACX,WAAO,IAAI,CAAC,OAAO,CAAC;GACrB;;AAXG,aAAW,WAaf,cAAc,6BAAG;AACf,WAAO,IAAI,CAAC,WAAW,CAAC;GACzB;;AAfG,aAAW,WAiBf,WAAW,0BAAG;AACZ,WAAO,IAAI,CAAC,QAAQ,CAAC;GACtB;;AAnBG,aAAW,WAqBf,QAAQ,uBAAG;AACT,QAAI,IAAI,CAAC,WAAW,KAAK,IAAI,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,KAAK,6BAAU,KAAK,EAAE;AAC1E,UAAM,KAAK,GAAG,sBAAY,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;AACxD,aAAO,KAAK,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC;KACnC,MAAM;AACL,aAAO,IAAI,CAAC;KACb;GACF;;AA5BG,aAAW,WA8Bf,UAAU,uBAAC,EAAE,EAAE;AACb,QAAM,eAAe,GAAG,kBAAK,IAAI,CAAC,OAAO,EAAE,EAAC,GAAG,EAAE,YAAY,EAAC,CAAC,CAAC;AAChE,QAAI,CAAC,eAAe,EAAE,OAAO,KAAK,CAAC;;AAEnC,WAAO,kBAAK,eAAe,CAAC,MAAM,EAAE,UAAC,MAAM;aAAK,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE;KAAA,CAAC,CAAC;GAC7E;;AAnCG,aAAW,WAqCf,YAAY,yBAAC,MAAM,EAAE;AACnB,YAAO,MAAM,CAAC,IAAI;AAChB,WAAK,+BAAY,eAAe;AAC9B,YAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;AAC9B,YAAI,CAAC,YAAY,EAAE,CAAC;AACpB,cAAM;AAAA,AACR,WAAK,+BAAY,gBAAgB;AAC/B,YAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;AACjC,YAAI,CAAC,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC;AAC/B,YAAI,CAAC,YAAY,EAAE,CAAC;AACpB,cAAM;AAAA,AACR,WAAK,+BAAY,kBAAkB;AACjC,YAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;AACjC,YAAI,CAAC,WAAW,GAAG,IAAI,CAAC;AACxB,YAAI,CAAC,YAAY,EAAE,CAAC;AACpB,cAAM;AAAA,AACR,cAAQ;KACT;GACF;;SAvDG,WAAW;;;kBA0DF,IAAI,WAAW,8BAAY","file":"DialogStore.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport { find, some } from 'lodash';\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, PeerTypes } from '../constants/ActorAppConstants';\nimport ActorClient from '../utils/ActorClient';\n\nclass DialogStore extends Store {\n  constructor(dispatcher) {\n    super(dispatcher);\n\n    this.dialogs = [];\n    this.currentPeer = null;\n    this.lastPeer = null;\n  }\n\n  getDialogs() {\n    return this.dialogs;\n  }\n\n  getCurrentPeer() {\n    return this.currentPeer;\n  }\n\n  getLastPeer() {\n    return this.lastPeer;\n  }\n\n  isMember() {\n    if (this.currentPeer !== null && this.currentPeer.type === PeerTypes.GROUP) {\n      const group = ActorClient.getGroup(this.currentPeer.id);\n      return group.members.length !== 0;\n    } else {\n      return true;\n    }\n  }\n\n  isFavorite(id) {\n    const favoriteDialogs = find(this.dialogs, {key: 'favourites'});\n    if (!favoriteDialogs) return false;\n\n    return some(favoriteDialogs.shorts, (dialog) => dialog.peer.peer.id === id);\n  }\n\n  __onDispatch(action) {\n    switch(action.type) {\n      case ActionTypes.DIALOGS_CHANGED:\n        this.dialogs = action.dialogs;\n        this.__emitChange();\n        break;\n      case ActionTypes.BIND_DIALOG_PEER:\n        this.lastPeer = this.currentPeer;\n        this.currentPeer = action.peer;\n        this.__emitChange();\n        break;\n      case ActionTypes.UNBIND_DIALOG_PEER:\n        this.lastPeer = this.currentPeer;\n        this.currentPeer = null;\n        this.__emitChange();\n        break;\n      default:\n    }\n  }\n}\n\nexport default new DialogStore(Dispatcher);\n"]}