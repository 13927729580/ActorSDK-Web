{"version":3,"sources":["../../src/stores/DialogStore.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,IAAI,QAAQ,GAAG,EAAE;IACb,YAAY,GAAG,IAAI;IACnB,SAAS,GAAG,IAAI;IAChB,KAAK,GAAG,IAAI;IACZ,OAAO,GAAG,IAAI,CAAC;;IAEb,WAAW;YAAX,WAAW;;WAAX,WAAW;0BAAX,WAAW;;kEAAX,WAAW;;;eAAX,WAAW;;oCACC;AACd,aAAO,QAAQ,CAAC;KACjB;;;qCAEgB;AACf,aAAO,YAAY,CAAC;KACrB;;;kCAEa;AACZ,aAAO,SAAS,CAAC;KAClB;;;8BAES;AACR,aAAO,KAAK,CAAC;KACd;;;gCAEW;AACV,aAAO,OAAO,CAAC;KAChB;;;2CAEsB,IAAI,EAAE;AAC3B,aAAO,sBAAY,sBAAsB,CAAC,IAAI,CAAC,CAAC;KACjD;;;+BAEU;AACT,UAAI,YAAY,KAAK,IAAI,IAAI,YAAY,CAAC,IAAI,KAAK,mBAnCjC,SAAS,CAmCkC,KAAK,EAAE;AAClE,YAAM,KAAK,GAAG,sBAAY,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;AACpD,eAAO,KAAK,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC;OACnC,MAAM;AACL,eAAO,IAAI,CAAC;OACb;KACF;;;iCAEY,MAAM,EAAE;AACnB,cAAO,MAAM,CAAC,IAAI;AAChB,aAAK,mBA7CF,WAAW,CA6CG,kBAAkB;AACjC,mBAAS,GAAG,YAAY,CAAC;AACzB,sBAAY,GAAG,MAAM,CAAC,IAAI,CAAC;AAC3B,cAAI,YAAY,CAAC,IAAI,KAAK,mBAhDZ,SAAS,CAgDa,KAAK,EAAE;AACzC,iBAAK,GAAG,sBAAY,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;WAC/C,MAAM,IAAI,YAAY,CAAC,IAAI,KAAK,mBAlDnB,SAAS,CAkDoB,IAAI,EAAE;AAC/C,iBAAK,GAAG,sBAAY,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;WAC9C;AACD,cAAI,CAAC,YAAY,EAAE,CAAC;AACpB,gBAAM;AAAA,AACR,aAAK,mBAvDF,WAAW,CAuDG,mBAAmB;AAClC,eAAK,GAAG,MAAM,CAAC,IAAI,CAAC;AACpB,cAAI,CAAC,YAAY,EAAE,CAAC;AACpB,gBAAM;AAAA,AACR,aAAK,mBA3DF,WAAW,CA2DG,qBAAqB;AACpC,iBAAO,GAAG,MAAM,CAAC,MAAM,CAAC;AACxB,cAAI,CAAC,YAAY,EAAE,CAAC;AACpB,gBAAM;AAAA,AACR,aAAK,mBA/DF,WAAW,CA+DG,eAAe;AAC9B,kBAAQ,GAAG,MAAM,CAAC,OAAO,CAAC;AAC1B,cAAI,CAAC,YAAY,EAAE,CAAC;AACpB,gBAAM;AAAA,AACR,aAAK,mBAnEF,WAAW,CAmEG,mBAAmB;AAClC,cAAI,CAAC,YAAY,EAAE,CAAC;AACpB,gBAAM;AAAA,AACR,gBAAQ;OACT;KACF;;;SA/DG,WAAW;UAXR,KAAK;;kBA6EC,IAAI,WAAW,8BAAY","file":"DialogStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, PeerTypes } from '../constants/ActorAppConstants';\nimport ActorClient from '../utils/ActorClient';\n\nlet _dialogs = [],\n    _currentPeer = null,\n    _lastPeer = null,\n    _info = null,\n    _typing = null;\n\nclass DialogStore extends Store {\n  getAllDialogs() {\n    return _dialogs;\n  }\n\n  getCurrentPeer() {\n    return _currentPeer;\n  }\n\n  getLastPeer() {\n    return _lastPeer;\n  }\n\n  getInfo() {\n    return _info;\n  }\n\n  getTyping() {\n    return _typing;\n  }\n\n  isNotificationsEnabled(peer) {\n    return ActorClient.isNotificationsEnabled(peer);\n  }\n\n  isMember() {\n    if (_currentPeer !== null && _currentPeer.type === PeerTypes.GROUP) {\n      const group = ActorClient.getGroup(_currentPeer.id);\n      return group.members.length !== 0;\n    } else {\n      return true;\n    }\n  }\n\n  __onDispatch(action) {\n    switch(action.type) {\n      case ActionTypes.SELECT_DIALOG_PEER:\n        _lastPeer = _currentPeer;\n        _currentPeer = action.peer;\n        if (_currentPeer.type === PeerTypes.GROUP) {\n          _info = ActorClient.getGroup(_currentPeer.id);\n        } else if (_currentPeer.type === PeerTypes.USER) {\n          _info = ActorClient.getUser(_currentPeer.id);\n        }\n        this.__emitChange();\n        break;\n      case ActionTypes.DIALOG_INFO_CHANGED:\n        _info = action.info;\n        this.__emitChange();\n        break;\n      case ActionTypes.DIALOG_TYPING_CHANGED:\n        _typing = action.typing;\n        this.__emitChange();\n        break;\n      case ActionTypes.DIALOGS_CHANGED:\n        _dialogs = action.dialogs;\n        this.__emitChange();\n        break;\n      case ActionTypes.NOTIFICATION_CHANGE:\n        this.__emitChange();\n        break;\n      default:\n    }\n  }\n}\n\nexport default new DialogStore(Dispatcher);\n"]}