{"version":3,"sources":["../../src/stores/DialogStore.js"],"names":[],"mappings":";;;;AAIA;;AACA;;AACA;;;;AACA;;AACA;;;;;;;;;;;;;;IAEM,W;;;AACJ,uBAAY,UAAZ,EAAwB;AAAA;;AAAA,iDACtB,kBAAM,UAAN,CADsB;;AAGtB,UAAK,OAAL,GAAe,EAAf;AACA,UAAK,WAAL,GAAmB,IAAnB;AACA,UAAK,QAAL,GAAgB,IAAhB;AALsB;AAMvB;;wBAED,U,yBAAa;AACX,WAAO,KAAK,OAAZ;AACD,G;;wBAED,c,6BAAiB;AACf,WAAO,KAAK,WAAZ;AACD,G;;wBAED,Q,uBAAW;AACT,QAAI,KAAK,WAAL,KAAqB,IAArB,IAA6B,KAAK,WAAL,CAAiB,IAAjB,KAA0B,6BAAU,KAArE,EAA4E;AAC1E,UAAM,QAAQ,sBAAY,QAAZ,CAAqB,KAAK,WAAL,CAAiB,EAAtC,CAAd;AACA,aAAO,SAAS,MAAM,OAAN,CAAc,MAAd,KAAyB,CAAzC;AACD;;AAED,WAAO,IAAP;AACD,G;;wBAED,U,uBAAW,E,EAAI;AACb,QAAM,kBAAkB,kBAAK,KAAK,OAAV,EAAmB,EAAE,KAAK,YAAP,EAAnB,CAAxB;AACA,QAAI,CAAC,eAAL,EAAsB,OAAO,KAAP;;AAEtB,WAAO,kBAAK,gBAAgB,MAArB,EAA6B,UAAC,MAAD;AAAA,aAAY,OAAO,IAAP,CAAY,IAAZ,CAAiB,EAAjB,KAAwB,EAApC;AAAA,KAA7B,CAAP;AACD,G;;wBAED,Y,yBAAa,M,EAAQ;AACnB,YAAO,OAAO,IAAd;AACE,WAAK,+BAAY,eAAjB;AACE,aAAK,OAAL,GAAe,OAAO,OAAtB;AACA,aAAK,YAAL;AACA;AACF,WAAK,+BAAY,gBAAjB;AACE,aAAK,WAAL,GAAmB,OAAO,IAA1B;AACA,aAAK,YAAL;AACA;AACF,WAAK,+BAAY,kBAAjB;AACE,aAAK,QAAL,GAAgB,OAAO,IAAvB;AACA,aAAK,WAAL,GAAmB,IAAnB;AACA,aAAK,YAAL;AACA;AACF;AAdF;AAgBD,G;;;;;kBAGY,IAAI,WAAJ,8B","file":"DialogStore.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport { find, some } from 'lodash';\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, PeerTypes } from '../constants/ActorAppConstants';\nimport ActorClient from '../utils/ActorClient';\n\nclass DialogStore extends Store {\n  constructor(dispatcher) {\n    super(dispatcher);\n\n    this.dialogs = [];\n    this.currentPeer = null;\n    this.lastPeer = null;\n  }\n\n  getDialogs() {\n    return this.dialogs;\n  }\n\n  getCurrentPeer() {\n    return this.currentPeer;\n  }\n\n  isMember() {\n    if (this.currentPeer !== null && this.currentPeer.type === PeerTypes.GROUP) {\n      const group = ActorClient.getGroup(this.currentPeer.id);\n      return group && group.members.length !== 0;\n    }\n\n    return true;\n  }\n\n  isFavorite(id) {\n    const favoriteDialogs = find(this.dialogs, { key: 'favourites' });\n    if (!favoriteDialogs) return false;\n\n    return some(favoriteDialogs.shorts, (dialog) => dialog.peer.peer.id === id);\n  }\n\n  __onDispatch(action) {\n    switch(action.type) {\n      case ActionTypes.DIALOGS_CHANGED:\n        this.dialogs = action.dialogs;\n        this.__emitChange();\n        break;\n      case ActionTypes.BIND_DIALOG_PEER:\n        this.currentPeer = action.peer;\n        this.__emitChange();\n        break;\n      case ActionTypes.UNBIND_DIALOG_PEER:\n        this.lastPeer = action.peer;\n        this.currentPeer = null;\n        this.__emitChange();\n        break;\n      default:\n    }\n  }\n}\n\nexport default new DialogStore(Dispatcher);\n"]}