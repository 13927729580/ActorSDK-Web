{"version":3,"sources":["../../src/stores/DropdownStore.js"],"names":[],"mappings":";;;;AAIA;;AACA;;;;AACA;;;;;;;;;;;;IAEM,a;;;AACJ,yBAAY,UAAZ,EAAwB;AAAA;;AAAA,iDACtB,kBAAM,UAAN,CADsB;;AAGtB,UAAK,sBAAL,GAA8B,KAA9B;AACA,UAAK,oBAAL,GAA4B,KAA5B;AACA,UAAK,WAAL,GAAmB,EAAnB;AACA,UAAK,WAAL,GAAmB,EAAnB;AACA,UAAK,QAAL,GAAgB,EAAhB;AACA,UAAK,KAAL,GAAa,EAAb;AARsB;AASvB;;0BAED,qB,kCAAsB,G,EAAK;AACzB,QAAI,QAAQ,KAAK,QAAL,CAAc,GAA1B,EAA+B;AAC7B,aAAO,KAAK,sBAAZ;AACD,KAFD,MAEO;AACL,aAAO,KAAP;AACD;AACF,G;;0BAED,mB,kCAAsB;AACpB,WAAO,KAAK,oBAAZ;AACD,G;;0BAED,U,yBAAa;AACX,WAAO,KAAK,QAAZ;AACD,G;;0BAED,a,4BAAgB;AACd,WAAO,KAAK,WAAZ;AACD,G;;0BAED,a,4BAAgB;AACd,WAAO,KAAK,WAAZ;AACD,G;;0BAED,O,sBAAU;AACR,WAAO,KAAK,KAAZ;AACD,G;;0BAED,Y,yBAAa,M,EAAQ;AACnB,YAAO,OAAO,IAAd;AACE,WAAK,+BAAY,qBAAjB;AACE,aAAK,sBAAL,GAA8B,IAA9B;AACA,aAAK,oBAAL,GAA4B,KAA5B;AACA,aAAK,QAAL,GAAgB,OAAO,OAAvB;AACA,aAAK,WAAL,GAAmB,OAAO,UAA1B;AACA,aAAK,YAAL;AACA;AACF,WAAK,+BAAY,qBAAjB;AACE,aAAK,sBAAL,GAA8B,KAA9B;AACA,aAAK,YAAL;AACA;;AAEF,WAAK,+BAAY,wBAAjB;AACE,aAAK,oBAAL,GAA4B,IAA5B;AACA,aAAK,sBAAL,GAA8B,KAA9B;AACA,aAAK,WAAL,GAAmB,OAAO,UAA1B;AACA,aAAK,KAAL,GAAa,OAAO,IAApB;AACA,aAAK,YAAL;AACA;AACF,WAAK,+BAAY,wBAAjB;AACE,aAAK,oBAAL,GAA4B,KAA5B;AACA,aAAK,YAAL;AACA;AACF;AAxBF;AA0BD,G;;;;;kBAGY,IAAI,aAAJ,8B","file":"DropdownStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\n\nclass DropdownStore extends Store {\n  constructor(dispatcher) {\n    super(dispatcher);\n\n    this._isMessageDropdownOpen = false;\n    this._isRecentContextOpen = false;\n    this._targetRect = {};\n    this._contextPos = {}\n    this._message = {};\n    this._peer = {};\n  }\n\n  isMessageDropdownOpen(rid) {\n    if (rid === this._message.rid) {\n      return this._isMessageDropdownOpen;\n    } else {\n      return false;\n    }\n  }\n\n  isRecentContextOpen() {\n    return this._isRecentContextOpen;\n  }\n\n  getMessage() {\n    return this._message;\n  }\n\n  getTargetRect() {\n    return this._targetRect;\n  }\n\n  getContextPos() {\n    return this._contextPos;\n  }\n\n  getPeer() {\n    return this._peer;\n  }\n\n  __onDispatch(action) {\n    switch(action.type) {\n      case ActionTypes.MESSAGE_DROPDOWN_SHOW:\n        this._isMessageDropdownOpen = true;\n        this._isRecentContextOpen = false;\n        this._message = action.message;\n        this._targetRect = action.targetRect;\n        this.__emitChange();\n        break;\n      case ActionTypes.MESSAGE_DROPDOWN_HIDE:\n        this._isMessageDropdownOpen = false;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.RECENT_CONTEXT_MENU_SHOW:\n        this._isRecentContextOpen = true;\n        this._isMessageDropdownOpen = false;\n        this._contextPos = action.contextPos;\n        this._peer = action.peer;\n        this.__emitChange();\n        break;\n      case ActionTypes.RECENT_CONTEXT_MENU_HIDE:\n        this._isRecentContextOpen = false;\n        this.__emitChange();\n        break;\n      default:\n    }\n  }\n}\n\nexport default new DropdownStore(Dispatcher);\n"]}