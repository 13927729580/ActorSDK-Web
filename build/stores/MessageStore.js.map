{"version":3,"sources":["../../src/stores/MessageStore.js"],"names":[],"mappings":"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","file":"MessageStore.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport Immutable from 'immutable';\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\n\nconst initialRenderMessagesCount = 20;\nconst renderMessagesStep = 20;\n\n/**\n * Class representing a store for messages.\n */\nclass MessageStore extends Store {\n  constructor(dispatcher) {\n    super(dispatcher);\n\n    this._renderMessagesCount = initialRenderMessagesCount;\n    this._messages = [];\n    this._messagesToRender = [];\n    this._overlay = [];\n    this._overlayToRender = [];\n    this._isLoaded = false;\n    this._selectedMessages = new Immutable.Set();\n  }\n\n  /**\n   * @returns {Array} All messages stored for currently bound conversation\n   */\n  getAll() {\n    return this._messages;\n  }\n\n  /**\n   * @returns {Array} Messages to render\n   */\n  getMessagesToRender() {\n    return this._messagesToRender;\n  }\n\n  /**\n   * @returns {Array} Messages overlay\n   */\n  getOverlay() {\n    return this._overlay;\n  }\n\n  /**\n   * @returns {Array} Messages overlay to render\n   */\n  getOverlayToRender() {\n    return this._overlayToRender;\n  }\n\n  /**\n   * @returns {Boolean} is all messages loaded for current conversation\n   */\n  isLoaded() {\n    return this._isLoaded;\n  }\n\n  isAllRendered() {\n    return this._messages.length === this._messagesToRender.length;\n  }\n\n  /**\n   * @returns {Array} Selected messages\n   */\n  getSelected() {\n    return this._selectedMessages;\n  }\n\n\n  updateMessagesToRender() {\n    this._messagesToRender = (this._messages.length > this._renderMessagesCount) ? this._messages.slice(this._messages.length - this._renderMessagesCount) : this._messages;\n  }\n\n  updateOverlayToRender() {\n    this._overlayToRender = (this._overlay.length > this._renderMessagesCount) ? this._overlay.slice(this._overlay.length - this._renderMessagesCount) : this._overlay;\n  }\n\n  __onDispatch(action) {\n    switch(action.type) {\n      case ActionTypes.BIND_DIALOG_PEER:\n        this._renderMessagesCount = initialRenderMessagesCount;\n        this._messages = [];\n        this._messagesToRender = [];\n        this._overlay = [];\n        this._overlayToRender = [];\n        this._selectedMessages = new Immutable.Set();\n        this.__emitChange();\n        break;\n\n      case ActionTypes.MESSAGES_CHANGED:\n        this._messages = action.messages;\n        this._overlay = action.overlay;\n        this._isLoaded = action.isLoaded;\n        this.updateMessagesToRender();\n        this.updateOverlayToRender();\n        this.__emitChange();\n        break;\n\n      case ActionTypes.MESSAGES_SET_SELECTED:\n        this._selectedMessages = action.selectedMesages;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.MESSAGES_LOAD_MORE:\n        this._renderMessagesCount += renderMessagesStep;\n        if (this._renderMessagesCount > this._messages.length) {\n          this._renderMessagesCount = this._messages.length;\n        }\n        this.updateMessagesToRender();\n        this.updateOverlayToRender();\n        this.__emitChange();\n        break;\n\n      default:\n    }\n  }\n}\n\nexport default new MessageStore(Dispatcher);\n"]}