{"version":3,"sources":["../../src/stores/MessageStore.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,IAAI,SAAS,GAAG,EAAE,CAAC;AACnB,IAAI,QAAQ,GAAG,EAAE,CAAC;AAClB,IAAI,SAAS,GAAG,KAAK,CAAC;AACtB,IAAI,iBAAiB,GAAG,IAAI,oBAAU,GAAG,EAAE;;;;;AAAC;IAKtC,YAAY;YAAZ,YAAY;;AAChB,WADI,YAAY,CACJ,UAAU,EAAE;0BADpB,YAAY;;kEAAZ,YAAY,aAER,UAAU;GACjB;;;;;AAAA;eAHG,YAAY;;6BAQP;AACP,aAAO,SAAS,CAAC;KAClB;;;;;;;;iCAKY;AACX,aAAO,QAAQ,CAAC;KACjB;;;+BAEU;AACT,aAAO,SAAS,CAAC;KAClB;;;;;;;;kCAKa;AACZ,aAAO,iBAAiB,CAAC;KAC1B;;;iCAEY,MAAM,EAAE;AACnB,cAAO,MAAM,CAAC,IAAI;AAChB,aAAK,+BAAY,kBAAkB;AACjC,2BAAiB,GAAG,IAAI,oBAAU,GAAG,EAAE,CAAC;AACxC,cAAI,CAAC,YAAY,EAAE,CAAC;AACpB,gBAAM;;AAAA,AAER,aAAK,+BAAY,gBAAgB;AAC/B,mBAAS,GAAG,MAAM,CAAC,QAAQ,CAAC;AAC5B,kBAAQ,GAAG,MAAM,CAAC,OAAO,CAAC;AAC1B,mBAAS,GAAG,MAAM,CAAC,QAAQ,CAAC;AAC5B,cAAI,CAAC,YAAY,EAAE,CAAC;AACpB,gBAAM;;AAAA,AAER,aAAK,+BAAY,qBAAqB;AACpC,2BAAiB,GAAG,MAAM,CAAC,eAAe,CAAC;AAC3C,cAAI,CAAC,YAAY,EAAE,CAAC;AACpB,gBAAM;;AAAA,AAER,gBAAQ;OACT;KACF;;;SAnDG,YAAY;;;kBAsDH,IAAI,YAAY,8BAAY","file":"MessageStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport Immutable from 'immutable';\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\n\nlet _messages = [];\nlet _overlay = [];\nlet _isLoaded = false;\nlet _selectedMessages = new Immutable.Set();\n\n/**\n * Class representing a store for messages.\n */\nclass MessageStore extends Store {\n  constructor(dispatcher) {\n    super(dispatcher);\n  }\n\n  /**\n   * @returns {Array} All messages stored for currently bound conversation\n   */\n  getAll() {\n    return _messages;\n  }\n\n  /**\n   * @returns {Array} Meesages overlay\n   */\n  getOverlay() {\n    return _overlay;\n  }\n\n  isLoaded() {\n    return _isLoaded;\n  }\n\n  /**\n   * @returns {Array} Selected messages\n   */\n  getSelected() {\n    return _selectedMessages;\n  }\n\n  __onDispatch(action) {\n    switch(action.type) {\n      case ActionTypes.SELECT_DIALOG_PEER:\n        _selectedMessages = new Immutable.Set();\n        this.__emitChange();\n        break;\n\n      case ActionTypes.MESSAGES_CHANGED:\n        _messages = action.messages;\n        _overlay = action.overlay;\n        _isLoaded = action.isLoaded;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.MESSAGES_SET_SELECTED:\n        _selectedMessages = action.selectedMesages;\n        this.__emitChange();\n        break;\n\n      default:\n    }\n  }\n}\n\nexport default new MessageStore(Dispatcher);\n"]}