{"version":3,"sources":["../../src/stores/MessageStore.js"],"names":[],"mappings":"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","file":"MessageStore.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport Immutable from 'immutable';\nimport { ReduceStore } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, MessageChangeReason } from '../constants/ActorAppConstants';\n\nconst MESSAGE_COUNT_STEP = 20;\n\nconst getMessageId = (message) => message ? message.rid : null;\n\nclass MessageStore extends ReduceStore {\n  getInitialState() {\n    return {\n      messages: [],\n      overlay: [],\n      isLoaded: false,\n      receiveDate: 0,\n      readDate: 0,\n      count: 0,\n      firstMessageId: null,\n      lastMessageId: null,\n      changeReason: MessageChangeReason.UNKNOWN,\n      selected: new Immutable.Set()\n    };\n  }\n\n  isAllRendered() {\n    const { messages, count } = this.getState();\n    return messages.length === count;\n  }\n\n  reduce (state, action) {\n    switch (action.type) {\n      case ActionTypes.BIND_DIALOG_PEER:\n        return {\n          ...state,\n          selected: state.selected.clear(),\n          changeReason: MessageChangeReason.UNKNOWN\n        };\n\n      case ActionTypes.MESSAGES_CHANGED:\n        const firstMessageId = getMessageId(action.messages[0]);\n        const lastMessageId = getMessageId(action.messages[action.messages.length - 1]);\n\n        if (firstMessageId !== state.firstMessageId) {\n          return {\n            ...state,\n            firstMessageId,\n            lastMessageId,\n            messages: action.messages,\n            overlay: action.overlay,\n            receiveDate: action.receiveDate,\n            readDate: action.readDate,\n            isLoaded: action.isLoaded,\n            count: Math.min(action.messages.length, state.count + MESSAGE_COUNT_STEP),\n            changeReason: MessageChangeReason.UNSHIFT\n          };\n        }\n\n        if (lastMessageId !== state.lastMessageId) {\n          return {\n            ...state,\n            firstMessageId,\n            lastMessageId,\n            messages: action.messages,\n            overlay: action.overlay,\n            receiveDate: action.receiveDate,\n            readDate: action.readDate,\n            isLoaded: action.isLoaded,\n            count: Math.min(action.messages.length, state.count + action.messages.length - state.messages.length),\n            changeReason: MessageChangeReason.PUSH\n          };\n        }\n\n        return {\n          ...state,\n          firstMessageId,\n          lastMessageId,\n          messages: action.messages,\n          overlay: action.overlay,\n          receiveDate: action.receiveDate,\n          readDate: action.readDate,\n          isLoaded: action.isLoaded,\n          count: Math.min(action.messages.length, state.count),\n          changeReason: MessageChangeReason.UPDATE\n        };\n\n      case ActionTypes.MESSAGES_LOAD_MORE:\n        return {\n          ...state,\n          count: Math.min(state.messages.length, state.count + MESSAGE_COUNT_STEP),\n          changeReason: MessageChangeReason.UNSHIFT\n        };\n\n      case ActionTypes.MESSAGES_TOGGLE_SELECTED:\n        return {\n          ...state,\n          selected: state.selected.has(action.id) ? state.selected.remove(action.id) : state.selected.add(action.id)\n        };\n\n      default:\n        return state;\n    }\n  }\n}\n\nexport default new MessageStore(Dispatcher);\n"]}