{"version":3,"sources":["../../src/stores/MessageStore.js"],"names":[],"mappings":"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","file":"MessageStore.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport Immutable from 'immutable';\nimport { ReduceStore } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, MessageChangeReason } from '../constants/ActorAppConstants';\n\nconst MESSAGE_COUNT_STEP = 20;\n\nconst getMessageId = (message) => message ? message.rid : null;\n\nclass MessageStore extends ReduceStore {\n  getInitialState() {\n    return {\n      messages: [],\n      overlay: [],\n      isLoaded: false,\n      receiveDate: 0,\n      readDate: 0,\n      count: 0,\n      firstMessageId: null,\n      lastMessageId: null,\n      changeReason: MessageChangeReason.UNKNOWN,\n      selected: new Immutable.Set()\n    };\n  }\n\n  isAllRendered() {\n    const { messages, count } = this.getState();\n    return messages.length === count;\n  }\n\n  reduce (state, action) {\n    switch (action.type) {\n      case ActionTypes.BIND_DIALOG_PEER:\n        return {\n          ...state,\n          selected: state.selected.clear(),\n          changeReason: MessageChangeReason.UNKNOWN\n        };\n\n      case ActionTypes.MESSAGES_CHANGED:\n        const firstMessageId = getMessageId(action.messages[0]);\n        const lastMessageId = getMessageId(action.messages[action.messages.length - 1]);\n\n        if (firstMessageId !== state.firstMessageId) {\n          return {\n            ...state,\n            firstMessageId,\n            lastMessageId,\n            messages: action.messages,\n            overlay: action.overlay,\n            receiveDate: action.receiveDate,\n            readDate: action.readDate,\n            isLoaded: action.isLoaded,\n            count: Math.min(action.messages.length, state.count + MESSAGE_COUNT_STEP),\n            changeReason: MessageChangeReason.UNSHIFT\n          };\n        }\n\n        if (lastMessageId !== state.lastMessageId) {\n          return {\n            ...state,\n            firstMessageId,\n            lastMessageId,\n            messages: action.messages,\n            overlay: action.overlay,\n            receiveDate: action.receiveDate,\n            readDate: action.readDate,\n            isLoaded: action.isLoaded,\n            count: Math.min(action.messages.length, state.count + action.messages.length - state.messages.length),\n            changeReason: MessageChangeReason.PUSH\n          };\n        }\n\n        return {\n          ...state,\n          firstMessageId,\n          lastMessageId,\n          messages: action.messages,\n          overlay: action.overlay,\n          receiveDate: action.receiveDate,\n          readDate: action.readDate,\n          isLoaded: action.isLoaded,\n          count: Math.min(action.messages.length, state.count),\n          changeReason: MessageChangeReason.UPDATE\n        };\n\n      case ActionTypes.MESSAGES_LOAD_MORE:\n        return {\n          ...state,\n          count: Math.min(state.messages.length, state.count + MESSAGE_COUNT_STEP),\n          changeReason: MessageChangeReason.UNSHIFT\n        };\n\n      case ActionTypes.MESSAGES_TOGGLE_SELECTED:\n        return {\n          ...state,\n          selected: state.selected.has(action.id) ? state.selected.remove(action.id) : state.selected.add(action.id)\n        };\n\n      default:\n        return state;\n    }\n  }\n}\n\nexport default new MessageStore(Dispatcher);\n"]}