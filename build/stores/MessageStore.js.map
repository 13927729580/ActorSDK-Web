{"version":3,"sources":["../../src/stores/MessageStore.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AASA,IAAI,SAAS,GAAG,EAAE,CAAC;AACnB,IAAI,QAAQ,GAAG,EAAE,CAAC;AAClB,IAAI,SAAS,GAAG,KAAK,CAAC;AACtB,IAAI,iBAAiB,GAAG,IAAI,oBAAU,GAAG,EAAE;;;;;AAAC;IAKtC,YAAY;YAAZ,YAAY;;AAChB,WADI,YAAY,CACJ,UAAU,EAAE;0BADpB,YAAY;;4CAEd,kBAAM,UAAU,CAAC;GAClB;;;;;AAAA;AAHG,cAAY,WAQhB,MAAM,qBAAG;AACP,WAAO,SAAS,CAAC;GAClB;;;;;;AAVG,cAAY,WAehB,UAAU,yBAAG;AACX,WAAO,QAAQ,CAAC;GACjB;;AAjBG,cAAY,WAmBhB,QAAQ,uBAAG;AACT,WAAO,SAAS,CAAC;GAClB;;;;;;AArBG,cAAY,WA0BhB,WAAW,0BAAG;AACZ,WAAO,iBAAiB,CAAC;GAC1B;;AA5BG,cAAY,WA8BhB,YAAY,yBAAC,MAAM,EAAE;AACnB,YAAO,MAAM,CAAC,IAAI;AAChB,WAAK,+BAAY,kBAAkB;AACjC,yBAAiB,GAAG,IAAI,oBAAU,GAAG,EAAE,CAAC;AACxC,YAAI,CAAC,YAAY,EAAE,CAAC;AACpB,cAAM;;AAAA,AAER,WAAK,+BAAY,gBAAgB;AAC/B,iBAAS,GAAG,MAAM,CAAC,QAAQ,CAAC;AAC5B,gBAAQ,GAAG,MAAM,CAAC,OAAO,CAAC;AAC1B,iBAAS,GAAG,MAAM,CAAC,QAAQ,CAAC;AAC5B,YAAI,CAAC,YAAY,EAAE,CAAC;AACpB,cAAM;;AAAA,AAER,WAAK,+BAAY,qBAAqB;AACpC,yBAAiB,GAAG,MAAM,CAAC,eAAe,CAAC;AAC3C,YAAI,CAAC,YAAY,EAAE,CAAC;AACpB,cAAM;;AAAA,AAER,cAAQ;KACT;GACF;;SAnDG,YAAY;;;kBAsDH,IAAI,YAAY,8BAAY","file":"MessageStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport Immutable from 'immutable';\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\n\nlet _messages = [];\nlet _overlay = [];\nlet _isLoaded = false;\nlet _selectedMessages = new Immutable.Set();\n\n/**\n * Class representing a store for messages.\n */\nclass MessageStore extends Store {\n  constructor(dispatcher) {\n    super(dispatcher);\n  }\n\n  /**\n   * @returns {Array} All messages stored for currently bound conversation\n   */\n  getAll() {\n    return _messages;\n  }\n\n  /**\n   * @returns {Array} Meesages overlay\n   */\n  getOverlay() {\n    return _overlay;\n  }\n\n  isLoaded() {\n    return _isLoaded;\n  }\n\n  /**\n   * @returns {Array} Selected messages\n   */\n  getSelected() {\n    return _selectedMessages;\n  }\n\n  __onDispatch(action) {\n    switch(action.type) {\n      case ActionTypes.SELECT_DIALOG_PEER:\n        _selectedMessages = new Immutable.Set();\n        this.__emitChange();\n        break;\n\n      case ActionTypes.MESSAGES_CHANGED:\n        _messages = action.messages;\n        _overlay = action.overlay;\n        _isLoaded = action.isLoaded;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.MESSAGES_SET_SELECTED:\n        _selectedMessages = action.selectedMesages;\n        this.__emitChange();\n        break;\n\n      default:\n    }\n  }\n}\n\nexport default new MessageStore(Dispatcher);\n"]}