{"version":3,"sources":["../../src/stores/MessageStore.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAIA;;;;AACA;;AACA;;;;AACA;;;;;;;;AAEA,IAAM,6BAA6B,EAA7B;AACN,IAAM,qBAAqB,EAArB;;;;;;IAKA;;;AACJ,WADI,YACJ,CAAY,UAAZ,EAAwB;wCADpB,cACoB;;+DACtB,kBAAM,UAAN,GADsB;;AAGtB,UAAK,oBAAL,GAA4B,0BAA5B,CAHsB;AAItB,UAAK,SAAL,GAAiB,EAAjB,CAJsB;AAKtB,UAAK,QAAL,GAAgB,EAAhB,CALsB;AAMtB,UAAK,SAAL,GAAiB,KAAjB,CANsB;AAOtB,UAAK,iBAAL,GAAyB,IAAI,oBAAU,GAAV,EAA7B,CAPsB;;GAAxB;;;;;;;AADI,yBAcJ,2BAAS;AACP,WAAO,KAAK,SAAL,CADA;;;AAdL,yBAkBJ,2DAAyB;AACvB,WAAO,KAAK,oBAAL,CADgB;;;AAlBrB,yBAsBJ,qCAAc;AACZ,WAAO,KAAK,SAAL,CADK;;;;;;;;AAtBV,yBA6BJ,mCAAa;AACX,WAAO,KAAK,QAAL,CADI;;;;;;;;AA7BT,yBAoCJ,+BAAW;AACT,WAAO,KAAK,SAAL,CADE;;;AApCP,yBAwCJ,yCAAgB;AACd,WAAO,KAAK,SAAL,CAAe,MAAf,KAA0B,KAAK,oBAAL,CADnB;;;;;;;;AAxCZ,yBA+CJ,qCAAc;AACZ,WAAO,KAAK,iBAAL,CADK;;;AA/CV,yBAmDJ,qCAAa,QAAQ;AACnB,YAAO,OAAO,IAAP;AACL,WAAK,+BAAY,gBAAZ;AACH,aAAK,oBAAL,GAA4B,0BAA5B,CADF;AAEE,aAAK,SAAL,GAAiB,EAAjB,CAFF;AAGE,aAAK,QAAL,GAAgB,EAAhB,CAHF;AAIE,aAAK,iBAAL,GAAyB,IAAI,oBAAU,GAAV,EAA7B,CAJF;AAKE,aAAK,YAAL,GALF;AAME,cANF;;AADF,WASO,+BAAY,gBAAZ;AACH,aAAK,SAAL,GAAiB,OAAO,QAAP,CADnB;AAEE,aAAK,QAAL,GAAgB,OAAO,OAAP,CAFlB;AAGE,aAAK,oBAAL,GAA4B,KAAK,GAAL,CAAS,OAAO,QAAP,CAAgB,MAAhB,EAAwB,KAAK,oBAAL,CAA7D,CAHF;AAIE,aAAK,SAAL,GAAiB,OAAO,QAAP,CAJnB;AAKE,aAAK,YAAL,GALF;AAME,cANF;;AATF,WAiBO,+BAAY,qBAAZ;AACH,aAAK,iBAAL,GAAyB,OAAO,eAAP,CAD3B;AAEE,aAAK,YAAL,GAFF;AAGE,cAHF;;AAjBF,WAsBO,+BAAY,kBAAZ;AACH,aAAK,oBAAL,IAA6B,kBAA7B,CADF;AAEE,YAAI,KAAK,oBAAL,GAA4B,KAAK,SAAL,CAAe,MAAf,EAAuB;AACrD,eAAK,oBAAL,GAA4B,KAAK,SAAL,CAAe,MAAf,CADyB;SAAvD;AAGA,aAAK,YAAL,GALF;AAME,cANF;;AAtBF;KADmB;;;SAnDjB;;;kBAuFS,IAAI,YAAJ","file":"MessageStore.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport Immutable from 'immutable';\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\n\nconst initialRenderMessagesCount = 20;\nconst renderMessagesStep = 20;\n\n/**\n * Class representing a store for messages.\n */\nclass MessageStore extends Store {\n  constructor(dispatcher) {\n    super(dispatcher);\n\n    this._renderMessagesCount = initialRenderMessagesCount;\n    this._messages = [];\n    this._overlay = [];\n    this._isLoaded = false;\n    this._selectedMessages = new Immutable.Set();\n  }\n\n  /**\n   * @returns {Array} All messages stored for currently bound conversation\n   */\n  getAll() {\n    return this._messages;\n  }\n\n  getRenderMessagesCount() {\n    return this._renderMessagesCount;\n  }\n\n  getMessages() {\n    return this._messages;\n  }\n\n  /**\n   * @returns {Array} Messages overlay\n   */\n  getOverlay() {\n    return this._overlay;\n  }\n\n  /**\n   * @returns {Boolean} is all messages loaded for current conversation\n   */\n  isLoaded() {\n    return this._isLoaded;\n  }\n\n  isAllRendered() {\n    return this._messages.length === this._renderMessagesCount;\n  }\n\n  /**\n   * @returns {Array} Selected messages\n   */\n  getSelected() {\n    return this._selectedMessages;\n  }\n\n  __onDispatch(action) {\n    switch(action.type) {\n      case ActionTypes.BIND_DIALOG_PEER:\n        this._renderMessagesCount = initialRenderMessagesCount;\n        this._messages = [];\n        this._overlay = [];\n        this._selectedMessages = new Immutable.Set();\n        this.__emitChange();\n        break;\n\n      case ActionTypes.MESSAGES_CHANGED:\n        this._messages = action.messages;\n        this._overlay = action.overlay;\n        this._renderMessagesCount = Math.min(action.messages.length, this._renderMessagesCount);\n        this._isLoaded = action.isLoaded;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.MESSAGES_SET_SELECTED:\n        this._selectedMessages = action.selectedMesages;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.MESSAGES_LOAD_MORE:\n        this._renderMessagesCount += renderMessagesStep;\n        if (this._renderMessagesCount > this._messages.length) {\n          this._renderMessagesCount = this._messages.length;\n        }\n        this.__emitChange();\n        break;\n\n      default:\n    }\n  }\n}\n\nexport default new MessageStore(Dispatcher);\n"]}