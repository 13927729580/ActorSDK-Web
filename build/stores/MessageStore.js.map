{"version":3,"sources":["../../src/stores/MessageStore.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,IAAI,SAAS,GAAG,EAAE;;;;;AAAC;IAKb,YAAY;YAAZ,YAAY;;AAChB,WADI,YAAY,CACJ,UAAU,EAAE;0BADpB,YAAY;;kEAAZ,YAAY,aAER,UAAU;GACjB;;;;;AAAA;eAHG,YAAY;;6BAQP;AACP,aAAO,SAAS,CAAC;KAClB;;;iCAEY,MAAM,EAAE;AACnB,cAAO,MAAM,CAAC,IAAI;AAChB,aAAK,mBArBF,WAAW,CAqBG,gBAAgB;AAC/B,mBAAS,GAAG,MAAM,CAAC,QAAQ,CAAC;AAC5B,cAAI,CAAC,YAAY,EAAE,CAAC;AACpB,gBAAM;AAAA,OACT;KACF;;;SAnBG,YAAY;UATT,KAAK;;kBA+BC,IAAI,YAAY,8BAAY","file":"MessageStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\n\nlet _messages = [];\n\n/**\n * Class representing a store for messages.\n */\nclass MessageStore extends Store {\n  constructor(dispatcher) {\n    super(dispatcher);\n  }\n\n  /**\n   * @returns {Array} All messages stored for currently bound conversation\n   */\n  getAll() {\n    return _messages;\n  }\n\n  __onDispatch(action) {\n    switch(action.type) {\n      case ActionTypes.MESSAGES_CHANGED:\n        _messages = action.messages;\n        this.__emitChange();\n        break;\n    }\n  }\n}\n\nexport default new MessageStore(Dispatcher);\n"]}