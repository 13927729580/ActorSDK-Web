{"version":3,"sources":["../../src/stores/MessageStore.js"],"names":[],"mappings":"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","file":"MessageStore.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport Immutable from 'immutable';\nimport { ReduceStore } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, MessageChangeReason } from '../constants/ActorAppConstants';\nimport { getFirstUnreadMessageIndex } from '../utils/MessageUtils';\nimport UserStore from './UserStore';\n\nconst MESSAGE_COUNT_STEP = 20;\n\nconst getMessageId = (message) => message ? message.rid : null;\n\nclass MessageStore extends ReduceStore {\n  getInitialState() {\n    return {\n      messages: [],\n      overlay: [],\n      isLoaded: false,\n      receiveDate: 0,\n      readDate: 0,\n      readByMeDate: 0,\n      count: 0,\n      firstId: null,\n      lastId: null,\n      unreadId: null,\n      editId: null,\n      changeReason: MessageChangeReason.UNKNOWN,\n      selected: new Immutable.Set()\n    };\n  }\n\n  isAllRendered() {\n    const { messages, count } = this.getState();\n    return messages.length === count;\n  }\n\n  reduce (state, action) {\n    switch (action.type) {\n      case ActionTypes.BIND_DIALOG_PEER:\n        return this.getInitialState();\n\n      case ActionTypes.MESSAGES_CHANGED:\n        const firstId = getMessageId(action.messages[0]);\n        const lastId = getMessageId(action.messages[action.messages.length - 1]);\n\n        const nextState = {\n          ...state,\n          firstId,\n          lastId,\n          messages: action.messages,\n          overlay: action.overlay,\n          receiveDate: action.receiveDate,\n          readDate: action.readDate,\n          readByMeDate: action.readByMeDate,\n          isLoaded: action.isLoaded\n        };\n\n        if (firstId !== state.firstId) {\n          nextState.count = Math.min(action.messages.length, state.count + MESSAGE_COUNT_STEP);\n          nextState.changeReason = MessageChangeReason.UNSHIFT;\n        } else if (lastId !== state.lastId) {\n          // TODO: possible incorrect\n          const lengthDiff = action.messages.length - state.messages.length;\n\n          nextState.count = Math.min(action.messages.length, state.count + lengthDiff);\n          nextState.changeReason = MessageChangeReason.PUSH;\n        } else {\n          nextState.count = Math.min(action.messages.length, state.count);\n          nextState.changeReason = MessageChangeReason.UPDATE;\n        }\n\n        if (state.readByMeDate === 0 && action.readByMeDate > 0) {\n          const unreadIndex = getFirstUnreadMessageIndex(action.messages, action.readByMeDate, UserStore.getMyId());\n          if (unreadIndex === -1) {\n            nextState.unreadId = null;\n          } else {\n            nextState.unreadId = action.messages[unreadIndex].rid;\n            if (unreadIndex > nextState.count) {\n              nextState.count = Math.min((action.messages.length - unreadIndex) + MESSAGE_COUNT_STEP, action.messages.length);\n            }\n          }\n        }\n\n        return nextState;\n\n      case ActionTypes.MESSAGES_LOAD_MORE:\n        return {\n          ...state,\n          count: Math.min(state.messages.length, state.count + MESSAGE_COUNT_STEP),\n          changeReason: MessageChangeReason.UNSHIFT\n        };\n\n      case ActionTypes.MESSAGES_TOGGLE_SELECTED:\n        return {\n          ...state,\n          selected: state.selected.has(action.id) ? state.selected.remove(action.id) : state.selected.add(action.id)\n        };\n\n      case ActionTypes.MESSAGES_EDIT_START:\n        return {\n          ...state,\n          editId: action.message.rid\n        };\n\n      case ActionTypes.MESSAGES_EDIT_END:\n        return {\n          ...state,\n          editId: null\n        };\n\n      default:\n        return state;\n    }\n  }\n}\n\nexport default new MessageStore(Dispatcher);\n"]}