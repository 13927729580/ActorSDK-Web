{"version":3,"sources":["../../src/stores/MessageStore.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,IAAI,WAAW,GAAG,4BAAkB,WAAW,CAAC;;AAShD,IAAM,YAAY,GAAG,QAAQ,CAAC;;AAE9B,IAAI,SAAS,GAAG,EAAE,CAAC;AACnB,IAAI,UAAU,GAAG,IAAI,CAAC;;AAEtB,IAAI,YAAY,GAAG,4BAAO,EAAE,EAAE,QAVrB,YAAY,CAUsB,SAAS,EAAE;AACpD,YAAU,EAAE,sBAAW;AACrB,QAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;GACzB;;AAED,mBAAiB,EAAE,2BAAS,QAAQ,EAAE;AACpC,QAAI,CAAC,EAAE,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;GACjC;;AAED,sBAAoB,EAAE,8BAAS,QAAQ,EAAE;AACvC,QAAI,CAAC,cAAc,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;GAC7C;;AAED,QAAM,EAAE,kBAAW;AACjB,WAAO,SAAS,CAAC;GAClB;CACF,CAAC,CAAC;;AAEH,IAAI,aAAa,GAAG,SAAhB,aAAa,CAAY,QAAQ,EAAE;AACrC,WAAS,GAAG,QAAQ,CAAC;AACrB,cAAY,CAAC,UAAU,EAAE,CAAC;CAC3B,CAAC;;AAEF,YAAY,CAAC,aAAa,GAAG,6BAAmB,QAAQ,CAAC,UAAS,MAAM,EAAE;AACxE,UAAO,MAAM,CAAC,IAAI;AAChB,SAAK,WAAW,CAAC,kBAAkB;AACjC,UAAI,UAAU,IAAI,IAAI,EAAE;AACtB,8BAAY,UAAU,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;OACnD;;AAED,mCAAmB,OAAO,CAAC,CAAC,sBAAY,aAAa,CAAC,CAAC,CAAC;;AAExD,gBAAU,GAAG,MAAM,CAAC,IAAI,CAAC;;AAEzB,4BAAY,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;;AAEjD,YAAM;AAAA,AACR,YAAQ;;GAET;CACF,CAAC,CAAC;;kBAEY,YAAY","file":"MessageStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport ActorAppDispatcher from '../dispatcher/ActorAppDispatcher';\nimport ActorAppConstants from '../constants/ActorAppConstants';\nvar ActionTypes = ActorAppConstants.ActionTypes;\n\nimport DialogStore from './DialogStore';\n\nimport { EventEmitter } from 'events';\nimport assign from 'object-assign';\n\nimport ActorClient from '../utils/ActorClient';\n\nconst CHANGE_EVENT = 'change';\n\nlet _messages = [];\nlet _boundPeer = null;\n\nvar MessageStore = assign({}, EventEmitter.prototype, {\n  emitChange: function() {\n    this.emit(CHANGE_EVENT);\n  },\n\n  addChangeListener: function(callback) {\n    this.on(CHANGE_EVENT, callback);\n  },\n\n  removeChangeListener: function(callback) {\n    this.removeListener(CHANGE_EVENT, callback);\n  },\n\n  getAll: function() {\n    return _messages;\n  }\n});\n\nvar _bindMessages = function(messages) {\n  _messages = messages;\n  MessageStore.emitChange();\n};\n\nMessageStore.dispatchToken = ActorAppDispatcher.register(function(action) {\n  switch(action.type) {\n    case ActionTypes.SELECT_DIALOG_PEER:\n      if (_boundPeer != null) {\n        ActorClient.unbindChat(_boundPeer, _bindMessages);\n      }\n\n      ActorAppDispatcher.waitFor([DialogStore.dispatchToken]);\n\n      _boundPeer = action.peer;\n\n      ActorClient.bindChat(action.peer, _bindMessages);\n\n      break;\n    default:\n\n  }\n});\n\nexport default MessageStore;\n"]}