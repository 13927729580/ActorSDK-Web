{"version":3,"sources":["../../src/stores/MessageStore.js"],"names":[],"mappings":"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","file":"MessageStore.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport Immutable from 'immutable';\nimport { ReduceStore } from 'flux/utils';\nimport { last } from 'lodash';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\n\nconst INITIAL_MESSAGES_COUNT = 20;\nconst MESSAGE_COUNT_STEP = 20;\n\nclass MessageStore extends ReduceStore {\n  getInitialState() {\n    return {\n      messages: [],\n      overlay: [],\n      isLoaded: false,\n      isLoading: false,\n      receiveDate: 0,\n      readDate: 0,\n      count: INITIAL_MESSAGES_COUNT,\n      selected: new Immutable.Set()\n    };\n  }\n\n  getAll() {\n    return this.getState().messages;\n  }\n\n  getRenderMessagesCount() {\n    return this.getState().count;\n  }\n\n  getMessages() {\n    return this.getState().messages;\n  }\n\n  getOverlay() {\n    return this.getState().overlay;\n  }\n\n  isLoaded() {\n    return this.getState().isLoaded;\n  }\n\n  isAllRendered() {\n    const { messages, count } = this.getState();\n    return messages.length === count;\n  }\n\n  getSelected() {\n    return this.getState().selected;\n  }\n\n  reduce (state, action) {\n    switch (action.type) {\n      case ActionTypes.BIND_DIALOG_PEER:\n        return {\n          ...state,\n          count: INITIAL_MESSAGES_COUNT,\n          selected: state.selected.clear()\n        };\n\n      case ActionTypes.MESSAGES_CHANGED:\n        if (action.messages[0] !== state.messages[0]) {\n          // unshifted new messages\n          return {\n            ...state,\n            messages: action.messages,\n            overlay: action.overlay,\n            receiveDate: action.receiveDate,\n            readDate: action.readDate,\n            isLoaded: action.isLoaded,\n            isLoading: false,\n            count: Math.min(action.messages.length, state.count + MESSAGE_COUNT_STEP)\n          };\n        }\n\n        if (last(action.messages) !== last(state.messages)) {\n          // pushed new messages\n          return {\n            ...state,\n            messages: action.messages,\n            overlay: action.overlay,\n            receiveDate: action.receiveDate,\n            readDate: action.readDate,\n            isLoaded: action.isLoaded,\n            count: Math.min(action.messages.length, state.count + action.messages.length - state.messages.length)\n          };\n        }\n\n        return {\n          ...state,\n          messages: action.messages,\n          overlay: action.overlay,\n          receiveDate: action.receiveDate,\n          readDate: action.readDate,\n          isLoaded: action.isLoaded,\n          count: Math.min(action.messages.length, INITIAL_MESSAGES_COUNT)\n        };\n\n      case ActionTypes.MESSAGES_TOGGLE_SELECTED:\n        return {\n          ...state,\n          selected: state.selected.has(action.id) ? state.selected.remove(action.id) : state.selected.add(action.id)\n        };\n\n      case ActionTypes.MESSAGES_LOADING_MORE:\n        return {\n          ...state,\n          isLoading: true\n        };\n\n      case ActionTypes.MESSAGES_LOAD_MORE:\n        return {\n          ...state,\n          count: Math.min(state.messages.length, state.count + MESSAGE_COUNT_STEP)\n        };\n\n      default:\n        return state;\n    }\n  }\n}\n\nexport default new MessageStore(Dispatcher);\n"]}