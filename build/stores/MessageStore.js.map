{"version":3,"sources":["../../src/stores/MessageStore.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAIA;;;;AACA;;AACA;;;;AACA;;;;;;;;AAEA,IAAM,yBAAyB,EAAzB;AACN,IAAM,qBAAqB,EAArB;;IAEA;;;;;;;;yBACJ,6CAAkB;AAChB,WAAO;AACL,gBAAU,EAAV;AACA,eAAS,EAAT;AACA,gBAAU,KAAV;AACA,mBAAa,CAAb;AACA,gBAAU,CAAV;AACA,aAAO,sBAAP;AACA,gBAAU,IAAI,oBAAU,GAAV,EAAd;KAPF,CADgB;;;AADd,yBAaJ,2BAAS;AACP,WAAO,KAAK,QAAL,GAAgB,QAAhB,CADA;;;AAbL,yBAiBJ,2DAAyB;AACvB,WAAO,KAAK,QAAL,GAAgB,KAAhB,CADgB;;;AAjBrB,yBAqBJ,qCAAc;AACZ,WAAO,KAAK,QAAL,GAAgB,QAAhB,CADK;;;AArBV,yBAyBJ,mCAAa;AACX,WAAO,KAAK,QAAL,GAAgB,OAAhB,CADI;;;AAzBT,yBA6BJ,+BAAW;AACT,WAAO,KAAK,QAAL,GAAgB,QAAhB,CADE;;;AA7BP,yBAiCJ,yCAAgB;oBACc,KAAK,QAAL,GADd;;QACN,8BADM;QACI,wBADJ;;AAEd,WAAO,SAAS,MAAT,KAAoB,KAApB,CAFO;;;AAjCZ,yBAsCJ,qCAAc;AACZ,WAAO,KAAK,QAAL,GAAgB,QAAhB,CADK;;;AAtCV,yBA0CJ,yBAAQ,OAAO,QAAQ;AACrB,YAAQ,OAAO,IAAP;AACN,WAAK,+BAAY,gBAAZ;AACH,0CACK;AACH,iBAAO,sBAAP;AACA,oBAAU,MAAM,QAAN,CAAe,KAAf,EAAV;UAHF,CADF;;AADF,WAQO,+BAAY,gBAAZ;AACH,0CACK;AACH,oBAAU,OAAO,QAAP;AACV,mBAAS,OAAO,OAAP;AACT,oBAAU,OAAO,QAAP;AACV,uBAAa,OAAO,WAAP;AACb,oBAAU,OAAO,QAAP;AACV,iBAAO,KAAK,GAAL,CAAS,OAAO,QAAP,CAAgB,MAAhB,EAAwB,MAAM,KAAN,CAAxC;UAPF,CADF;;AARF,WAmBO,+BAAY,qBAAZ;AACH,0CACK;AACH,oBAAU,OAAO,eAAP;UAFZ,CADF;;AAnBF,WAyBO,+BAAY,kBAAZ;AACH,0CACK;AACH,iBAAO,KAAK,GAAL,CAAS,MAAM,QAAN,CAAe,MAAf,EAAuB,MAAM,KAAN,GAAc,kBAAd,CAAvC;UAFF,CADF;;AAzBF;AAgCI,eAAO,KAAP,CADF;AA/BF,KADqB;;;SA1CnB;;;kBAgFS,IAAI,YAAJ","file":"MessageStore.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport Immutable from 'immutable';\nimport { ReduceStore } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\n\nconst INITIAL_MESSAGES_COUNT = 20;\nconst MESSAGE_COUNT_STEP = 20;\n\nclass MessageStore extends ReduceStore {\n  getInitialState() {\n    return {\n      messages: [],\n      overlay: [],\n      isLoaded: false,\n      receiveDate: 0,\n      readDate: 0,\n      count: INITIAL_MESSAGES_COUNT,\n      selected: new Immutable.Set()\n    };\n  }\n\n  getAll() {\n    return this.getState().messages;\n  }\n\n  getRenderMessagesCount() {\n    return this.getState().count;\n  }\n\n  getMessages() {\n    return this.getState().messages;\n  }\n\n  getOverlay() {\n    return this.getState().overlay;\n  }\n\n  isLoaded() {\n    return this.getState().isLoaded;\n  }\n\n  isAllRendered() {\n    const { messages, count } = this.getState();\n    return messages.length === count;\n  }\n\n  getSelected() {\n    return this.getState().selected;\n  }\n\n  reduce (state, action) {\n    switch (action.type) {\n      case ActionTypes.BIND_DIALOG_PEER:\n        return {\n          ...state,\n          count: INITIAL_MESSAGES_COUNT,\n          selected: state.selected.clear()\n        };\n\n      case ActionTypes.MESSAGES_CHANGED:\n        return {\n          ...state,\n          messages: action.messages,\n          overlay: action.overlay,\n          isLoaded: action.isLoaded,\n          receiveDate: action.receiveDate,\n          readDate: action.readDate,\n          count: Math.min(action.messages.length, state.count)\n        };\n\n      case ActionTypes.MESSAGES_SET_SELECTED:\n        return {\n          ...state,\n          selected: action.selectedMesages\n        };\n\n      case ActionTypes.MESSAGES_LOAD_MORE:\n        return {\n          ...state,\n          count: Math.min(state.messages.length, state.count + MESSAGE_COUNT_STEP)\n        };\n\n      default:\n        return state;\n    }\n  }\n}\n\nexport default new MessageStore(Dispatcher);\n"]}