{"version":3,"sources":["../../src/stores/GroupListStore.js"],"names":[],"mappings":";;;;AAIA;;AACA;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAI,UAAU,KAAd;IACI,QAAQ,EADZ;IAEI,WAAW,EAFf;;;;;;IAOM,U;;;AACJ,sBAAY,UAAZ,EAAwB;AAAA;;AAAA,4CACtB,kBAAM,UAAN,CADsB;AAEvB;;;;;;;uBAKD,M,qBAAS;AACP,WAAO,OAAP;AACD,G;;;;;;;uBAKD,O,sBAAU;AACR,WAAO,KAAP;AACD,G;;;;;;;uBAKD,U,yBAAa;AACX,WAAO,QAAP;AACD,G;;uBAGD,iB,8BAAkB,K,EAAO;AACvB,QAAI,UAAU,EAAd;;AAEA,QAAI,UAAU,EAAd,EAAkB;AAChB,gBAAU,KAAV;AACD,KAFD,MAEO;AACL,2BAAQ,KAAR,EAAe,UAAC,MAAD,EAAY;AACzB,YAAM,QAAQ,OAAO,QAAP,CAAgB,KAAhB,CAAsB,WAAtB,EAAd;AACA,YAAI,MAAM,QAAN,CAAe,MAAM,WAAN,EAAf,CAAJ,EAAyC;AACvC,kBAAQ,IAAR,CAAa,MAAb;AACD;AACF,OALD;AAMD;;AAED,eAAW,OAAX;AACD,G;;uBAED,Y,yBAAa,M,EAAQ;AACnB,YAAQ,OAAO,IAAf;AACE,WAAK,+BAAY,eAAjB;AACE,kBAAW,IAAX;AACA,aAAK,iBAAL,CAAuB,EAAvB;AACA,aAAK,YAAL;AACA;AACF,WAAK,+BAAY,eAAjB;AACE,kBAAW,KAAX;AACA,mBAAW,EAAX;AACA,aAAK,YAAL;AACA;;AAEF,WAAK,+BAAY,uBAAjB;AACE,gBAAQ,OAAO,QAAf;AACA,aAAK,iBAAL,CAAuB,EAAvB;AACA,aAAK,YAAL;AACA;AACF,WAAK,+BAAY,qBAAjB;AACE,gBAAQ,KAAR,CAAc,OAAO,KAArB;AACA,aAAK,YAAL;AACA;;AAEF,WAAK,+BAAY,iBAAjB;AACE,aAAK,iBAAL,CAAuB,OAAO,KAA9B;AACA,aAAK,YAAL;AACA;;AAEF;AA3BF;AA6BD,G;;;;;kBAGY,IAAI,UAAJ,8B","file":"GroupListStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { forEach } from 'lodash';\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\n\nlet _isOpen = false,\n    _list = [],\n    _results = [];\n\n/**\n * Class representing a store for searchable group list.\n */\nclass GroupStore extends Store {\n  constructor(dispatcher) {\n    super(dispatcher);\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  isOpen() {\n    return _isOpen;\n  }\n\n  /**\n   * @returns {Array}\n   */\n  getList() {\n    return _list;\n  }\n\n  /**\n   * @returns {Array}\n   */\n  getResults() {\n    return _results;\n  }\n\n\n  handleSearchQuery(query) {\n    let results = [];\n\n    if (query === '') {\n      results = _list;\n    } else {\n      forEach(_list, (result) => {\n        const title = result.peerInfo.title.toLowerCase();\n        if (title.includes(query.toLowerCase())) {\n          results.push(result);\n        }\n      })\n    }\n\n    _results = results;\n  }\n\n  __onDispatch(action) {\n    switch (action.type) {\n      case ActionTypes.GROUP_LIST_SHOW:\n        _isOpen  = true;\n        this.handleSearchQuery('');\n        this.__emitChange();\n        break;\n      case ActionTypes.GROUP_LIST_HIDE:\n        _isOpen  = false;\n        _results = [];\n        this.__emitChange();\n        break;\n\n      case ActionTypes.GROUP_LIST_LOAD_SUCCESS:\n        _list = action.response;\n        this.handleSearchQuery('');\n        this.__emitChange();\n        break;\n      case ActionTypes.GROUP_LIST_LOAD_ERROR:\n        console.error(action.error);\n        this.__emitChange();\n        break;\n\n      case ActionTypes.GROUP_LIST_SEARCH:\n        this.handleSearchQuery(action.query);\n        this.__emitChange();\n        break;\n\n      default:\n    }\n  }\n}\n\nexport default new GroupStore(Dispatcher);\n"]}