{"version":3,"sources":["../../src/stores/PreferencesStore.js"],"names":[],"mappings":";;;;;;AAIA;;AACA;;;;AACA;;AAEA;;;;;;;;;;;;;;IAEM,gB;;;;;;;;;6BACJ,e,8BAAkB;AAChB,WAAO;AACL,gBAAU,EADL;AAEL,kBAAY,uCAAoB,OAF3B;AAGL,sBAAgB;AAHX,KAAP;AAKD,G;;6BAED,M,mBAAO,K,EAAO,M,EAAQ;AACpB,YAAO,OAAO,IAAd;AACE,WAAK,+BAAY,gCAAjB;AACE,4BACK,KADL;AAEE,oBAAU,OAAO;AAFnB;AAIF,WAAK,+BAAY,sBAAjB;AACE,eAAO,KAAK,eAAL,EAAP;;AAEF,WAAK,+BAAY,sBAAjB;AACE,4BACK,KADL;AAEE,sBAAY,OAAO;AAFrB;;AAKF,WAAK,+BAAY,6BAAjB;AACE,cAAM,cAAN,CAAqB,OAAO,EAA5B,IAAkC,qCAAkB,UAApD;AACA,eAAO,KAAP;AACF,WAAK,+BAAY,qCAAjB;AACE,eAAO,MAAM,cAAN,CAAqB,OAAO,EAA5B,CAAP;AACA,eAAO,KAAP;AACF,WAAK,+BAAY,mCAAjB;AACE,cAAM,cAAN,CAAqB,OAAO,EAA5B,IAAkC,qCAAkB,OAApD;AACA,eAAO,KAAP;;AAEF;AACE,eAAO,KAAP;AA1BJ;AA4BD,G;;6BAED,oB,mCAAuB;AACrB,WAAO,sBAAY,oBAAZ,EAAP;AACD,G;;6BAED,4B,2CAA+B;AAC7B,WAAO,sBAAY,4BAAZ,EAAP;AACD,G;;6BAED,0B,yCAA6B;AAC3B,WAAO,sBAAY,0BAAZ,EAAP;AACD,G;;6BAED,qB,oCAAwB;AACtB,WAAO,sBAAY,qBAAZ,EAAP;AACD,G;;6BAED,8B,6CAAiC;AAC/B,WAAO,sBAAY,8BAAZ,EAAP;AACD,G;;6BAED,W,0BAAc;AACZ,WAAO,KAAK,QAAL,GAAgB,QAAvB;AACD,G;;6BAED,a,4BAAgB;AACd,WAAO,KAAK,QAAL,GAAgB,UAAvB;AACD,G;;6BAED,iB,gCAAoB;AAClB,WAAO,KAAK,QAAL,GAAgB,cAAvB;AACD,G;;;;;kBAGY,IAAI,gBAAJ,8B","file":"PreferencesStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { ReduceStore } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, AsyncActionStates, PreferencesTabTypes } from '../constants/ActorAppConstants';\n\nimport ActorClient from '../utils/ActorClient';\n\nclass PreferencesStore extends ReduceStore {\n  getInitialState() {\n    return {\n      sessions: [],\n      currentTab: PreferencesTabTypes.GENERAL,\n      terminateState: {}\n    }\n  }\n\n  reduce(state, action) {\n    switch(action.type) {\n      case ActionTypes.PREFERENCES_SESSION_LOAD_SUCCESS:\n        return {\n          ...state,\n          sessions: action.response\n        }\n      case ActionTypes.PREFERENCES_MODAL_HIDE:\n        return this.getInitialState();\n\n      case ActionTypes.PREFERENCES_CHANGE_TAB:\n        return {\n          ...state,\n          currentTab: action.tab\n        }\n\n      case ActionTypes.PREFERENCES_SESSION_TERMINATE:\n        state.terminateState[action.id] = AsyncActionStates.PROCESSING;\n        return state;\n      case ActionTypes.PREFERENCES_SESSION_TERMINATE_SUCCESS:\n        delete state.terminateState[action.id];\n        return state;\n      case ActionTypes.PREFERENCES_SESSION_TERMINATE_ERROR:\n        state.terminateState[action.id] = AsyncActionStates.FAILURE;\n        return state;\n\n      default:\n        return state;\n    }\n  }\n\n  isSendByEnterEnabled() {\n    return ActorClient.isSendByEnterEnabled();\n  }\n\n  isGroupsNotificationsEnabled() {\n    return ActorClient.isGroupsNotificationsEnabled();\n  }\n\n  isOnlyMentionNotifications() {\n    return ActorClient.isOnlyMentionNotifications();\n  }\n\n  isSoundEffectsEnabled() {\n    return ActorClient.isSoundEffectsEnabled();\n  }\n\n  isShowNotificationsTextEnabled() {\n    return ActorClient.isShowNotificationsTextEnabled();\n  }\n\n  getSessions() {\n    return this.getState().sessions;\n  }\n\n  getCurrentTab() {\n    return this.getState().currentTab;\n  }\n\n  getTerminateState() {\n    return this.getState().terminateState;\n  }\n}\n\nexport default new PreferencesStore(Dispatcher);\n"]}