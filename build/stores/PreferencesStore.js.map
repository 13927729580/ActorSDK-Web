{"version":3,"sources":["../../src/stores/PreferencesStore.js"],"names":[],"mappings":";;;;AAIA;;AACA;;;;AACA;;AAEA;;;;;;;;;;;;;;AAEA,IAAI,UAAU,KAAd;IACI,YAAY,EADhB;IAEI,cAAc,SAFlB;IAGI,yBAAyB,EAH7B;;IAKM,gB;;;AACJ,4BAAY,UAAZ,EAAwB;AAAA;;AAAA,4CACtB,kBAAM,UAAN,CADsB;AAEvB;;6BAED,M,qBAAS;AACP,WAAO,OAAP;AACD,G;;6BAED,oB,mCAAuB;AACrB,WAAO,sBAAY,oBAAZ,EAAP;AACD,G;;6BAED,4B,2CAA+B;AAC7B,WAAO,sBAAY,4BAAZ,EAAP;AACD,G;;6BAED,0B,yCAA6B;AAC3B,WAAO,sBAAY,0BAAZ,EAAP;AACD,G;;6BAED,qB,oCAAwB;AACtB,WAAO,sBAAY,qBAAZ,EAAP;AACD,G;;6BAED,8B,6CAAiC;AAC/B,WAAO,sBAAY,8BAAZ,EAAP;AACD,G;;6BAED,W,0BAAc;AACZ,WAAO,SAAP;AACD,G;;6BAED,a,4BAAgB;AACd,WAAO,WAAP;AACD,G;;6BAED,wB,qCAAyB,E,EAAI;AAC3B,WAAQ,uBAAuB,EAAvB,KAA8B,qCAAkB,OAAxD;AACD,G;;6BAGD,e,4BAAgB,c,EAAgB;AAAA,QAE5B,oBAF4B,GAO1B,cAP0B,CAE5B,oBAF4B;AAAA,QAG5B,qBAH4B,GAO1B,cAP0B,CAG5B,qBAH4B;AAAA,QAI5B,4BAJ4B,GAO1B,cAP0B,CAI5B,4BAJ4B;AAAA,QAK5B,0BAL4B,GAO1B,cAP0B,CAK5B,0BAL4B;AAAA,QAM5B,8BAN4B,GAO1B,cAP0B,CAM5B,8BAN4B;;;AAS9B,0BAAY,iBAAZ,CAA8B,oBAA9B;AACA,0BAAY,yBAAZ,CAAsC,qBAAtC;AACA,0BAAY,+BAAZ,CAA4C,4BAA5C;AACA,0BAAY,gCAAZ,CAA6C,0BAA7C;AACA,0BAAY,mCAAZ,CAAgD,8BAAhD;AACD,G;;6BAED,Y,yBAAa,M,EAAQ;AACnB,YAAO,OAAO,IAAd;AACE,WAAK,+BAAY,sBAAjB;AACE,kBAAU,IAAV;AACA,aAAK,YAAL;AACA;AACF,WAAK,+BAAY,sBAAjB;AACE,kBAAU,KAAV;AACA,aAAK,YAAL;AACA;AACF,WAAK,+BAAY,gBAAjB;AACE,aAAK,eAAL,CAAqB,OAAO,WAA5B;AACA,aAAK,YAAL;AACA;AACF,WAAK,+BAAY,gCAAjB;AACE,oBAAY,OAAO,QAAnB;AACA,aAAK,YAAL;AACA;AACF,WAAK,+BAAY,sBAAjB;AACE,sBAAc,OAAO,GAArB;AACA,aAAK,YAAL;AACA;;AAEF,WAAK,+BAAY,6BAAjB;AACE,+BAAuB,OAAO,EAA9B,IAAoC,qCAAkB,UAAtD;AACA,aAAK,YAAL;AACA;AACF,WAAK,+BAAY,qCAAjB;AACE,eAAO,uBAAuB,OAAO,EAA9B,CAAP;AACA,aAAK,YAAL;AACA;AACF,WAAK,+BAAY,mCAAjB;AACE,+BAAuB,OAAO,EAA9B,IAAoC,qCAAkB,OAAtD;AACA,aAAK,YAAL;AACA;;AAEF;AAnCF;AAqCD,G;;;;;kBAGY,IAAI,gBAAJ,8B","file":"PreferencesStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, AsyncActionStates } from '../constants/ActorAppConstants';\n\nimport ActorClient from '../utils/ActorClient';\n\nlet _isOpen = false,\n    _sessions = [],\n    _currentTab = 'GENERAL',\n    _terminateSessionState = [];\n\nclass PreferencesStore extends Store {\n  constructor(Dispatcher) {\n    super(Dispatcher);\n  }\n\n  isOpen() {\n    return _isOpen;\n  }\n\n  isSendByEnterEnabled() {\n    return ActorClient.isSendByEnterEnabled();\n  }\n\n  isGroupsNotificationsEnabled() {\n    return ActorClient.isGroupsNotificationsEnabled();\n  }\n\n  isOnlyMentionNotifications() {\n    return ActorClient.isOnlyMentionNotifications();\n  }\n\n  isSoundEffectsEnabled() {\n    return ActorClient.isSoundEffectsEnabled();\n  }\n\n  isShowNotificationsTextEnabled() {\n    return ActorClient.isShowNotificationsTextEnabled();\n  }\n\n  getSessions() {\n    return _sessions;\n  }\n\n  getCurrentTab() {\n    return _currentTab;\n  }\n\n  getTerminateSessionState(id) {\n    return (_terminateSessionState[id] || AsyncActionStates.PENDING);\n  }\n\n\n  savePreferences(newPreferences) {\n    const {\n      isSendByEnterEnabled,\n      isSoundEffectsEnabled,\n      isGroupsNotificationsEnabled,\n      isOnlyMentionNotifications,\n      isShowNotificationsTextEnabled\n    } = newPreferences;\n\n    ActorClient.changeSendByEnter(isSendByEnterEnabled);\n    ActorClient.changeSoundEffectsEnabled(isSoundEffectsEnabled);\n    ActorClient.changeGroupNotificationsEnabled(isGroupsNotificationsEnabled);\n    ActorClient.changeIsOnlyMentionNotifications(isOnlyMentionNotifications);\n    ActorClient.changeIsShowNotificationTextEnabled(isShowNotificationsTextEnabled);\n  }\n\n  __onDispatch(action) {\n    switch(action.type) {\n      case ActionTypes.PREFERENCES_MODAL_SHOW:\n        _isOpen = true;\n        this.__emitChange();\n        break;\n      case ActionTypes.PREFERENCES_MODAL_HIDE:\n        _isOpen = false;\n        this.__emitChange();\n        break;\n      case ActionTypes.PREFERENCES_SAVE:\n        this.savePreferences(action.preferences);\n        this.__emitChange();\n        break;\n      case ActionTypes.PREFERENCES_SESSION_LOAD_SUCCESS:\n        _sessions = action.response;\n        this.__emitChange();\n        break;\n      case ActionTypes.PREFERENCES_CHANGE_TAB:\n        _currentTab = action.tab;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.PREFERENCES_SESSION_TERMINATE:\n        _terminateSessionState[action.id] = AsyncActionStates.PROCESSING;\n        this.__emitChange();\n        break;\n      case ActionTypes.PREFERENCES_SESSION_TERMINATE_SUCCESS:\n        delete _terminateSessionState[action.id];\n        this.__emitChange();\n        break;\n      case ActionTypes.PREFERENCES_SESSION_TERMINATE_ERROR:\n        _terminateSessionState[action.id] = AsyncActionStates.FAILURE;\n        this.__emitChange();\n        break;\n\n      default:\n    }\n  }\n}\n\nexport default new PreferencesStore(Dispatcher);\n"]}