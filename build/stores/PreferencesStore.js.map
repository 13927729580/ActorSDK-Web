{"version":3,"sources":["../../src/stores/PreferencesStore.js"],"names":[],"mappings":"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","file":"PreferencesStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, AsyncActionStates } from '../constants/ActorAppConstants';\n\nimport ActorClient from '../utils/ActorClient';\n\nlet _isOpen = false,\n    _sessions = [],\n    _currentTab = 'GENERAL',\n    _terminateSessionState = [];\n\nclass PreferencesStore extends Store {\n  constructor(Dispatcher) {\n    super(Dispatcher);\n  }\n\n  isOpen() {\n    return _isOpen;\n  }\n\n  isSendByEnterEnabled() {\n    return ActorClient.isSendByEnterEnabled();\n  }\n\n  isGroupsNotificationsEnabled() {\n    return ActorClient.isGroupsNotificationsEnabled();\n  }\n\n  isOnlyMentionNotifications() {\n    return ActorClient.isOnlyMentionNotifications();\n  }\n\n  isSoundEffectsEnabled() {\n    return ActorClient.isSoundEffectsEnabled();\n  }\n\n  isShowNotificationsTextEnabled() {\n    return ActorClient.isShowNotificationsTextEnabled();\n  }\n\n  getSessions() {\n    return _sessions;\n  }\n\n  getCurrentTab() {\n    return _currentTab;\n  }\n\n  getTerminateSessionState(id) {\n    return (_terminateSessionState[id] || AsyncActionStates.PENDING);\n  }\n\n\n  savePreferences(newPreferences) {\n    const {\n      isSendByEnterEnabled,\n      isSoundEffectsEnabled,\n      isGroupsNotificationsEnabled,\n      isOnlyMentionNotifications,\n      isShowNotificationsTextEnabled\n    } = newPreferences;\n\n    ActorClient.changeSendByEnter(isSendByEnterEnabled);\n    ActorClient.changeSoundEffectsEnabled(isSoundEffectsEnabled);\n    ActorClient.changeGroupNotificationsEnabled(isGroupsNotificationsEnabled);\n    ActorClient.changeIsOnlyMentionNotifications(isOnlyMentionNotifications);\n    ActorClient.changeIsShowNotificationTextEnabled(isShowNotificationsTextEnabled);\n  }\n\n  __onDispatch(action) {\n    switch(action.type) {\n      case ActionTypes.PREFERENCES_MODAL_SHOW:\n        _isOpen = true;\n        this.__emitChange();\n        break;\n      case ActionTypes.PREFERENCES_MODAL_HIDE:\n        _isOpen = false;\n        this.__emitChange();\n        break;\n      case ActionTypes.PREFERENCES_SAVE:\n        this.savePreferences(action.preferences);\n        this.__emitChange();\n        break;\n      case ActionTypes.PREFERENCES_SESSION_LOAD_SUCCESS:\n        _sessions = action.response;\n        this.__emitChange();\n        break;\n      case ActionTypes.PREFERENCES_CHANGE_TAB:\n        _currentTab = action.tab;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.PREFERENCES_SESSION_TERMINATE:\n        _terminateSessionState[action.id] = AsyncActionStates.PROCESSING;\n        this.__emitChange();\n        break;\n      case ActionTypes.PREFERENCES_SESSION_TERMINATE_SUCCESS:\n        delete _terminateSessionState[action.id];\n        this.__emitChange();\n        break;\n      case ActionTypes.PREFERENCES_SESSION_TERMINATE_ERROR:\n        _terminateSessionState[action.id] = AsyncActionStates.FAILURE;\n        this.__emitChange();\n        break;\n\n      default:\n    }\n  };\n}\n\nexport default new PreferencesStore(Dispatcher);\n"]}