{"version":3,"sources":["../../src/stores/PreferencesStore.js"],"names":[],"mappings":"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","file":"PreferencesStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, AsyncActionStates } from '../constants/ActorAppConstants';\n\nimport ActorClient from '../utils/ActorClient';\n\nlet _isOpen = false,\n    _sessions = [],\n    _currentTab = 'GENERAL',\n    _terminateSessionState = [];\n\nclass PreferencesStore extends Store {\n  constructor(Dispatcher) {\n    super(Dispatcher);\n  }\n\n  isOpen() {\n    return _isOpen;\n  }\n\n  isSendByEnterEnabled() {\n    return ActorClient.isSendByEnterEnabled();\n  }\n\n  isGroupsNotificationsEnabled() {\n    return ActorClient.isGroupsNotificationsEnabled();\n  }\n\n  isOnlyMentionNotifications() {\n    return ActorClient.isOnlyMentionNotifications();\n  }\n\n  isSoundEffectsEnabled() {\n    return ActorClient.isSoundEffectsEnabled();\n  }\n\n  isShowNotificationsTextEnabled() {\n    return ActorClient.isShowNotificationsTextEnabled();\n  }\n\n  getSessions() {\n    return _sessions;\n  }\n\n  getCurrentTab() {\n    return _currentTab;\n  }\n\n  getTerminateSessionState(id) {\n    return (_terminateSessionState[id] || AsyncActionStates.PENDING);\n  }\n\n\n  savePreferences(newPreferences) {\n    const {\n      isSendByEnterEnabled,\n      isSoundEffectsEnabled,\n      isGroupsNotificationsEnabled,\n      isOnlyMentionNotifications,\n      isShowNotificationsTextEnabled\n    } = newPreferences;\n\n    ActorClient.changeSendByEnter(isSendByEnterEnabled);\n    ActorClient.changeSoundEffectsEnabled(isSoundEffectsEnabled);\n    ActorClient.changeGroupNotificationsEnabled(isGroupsNotificationsEnabled);\n    ActorClient.changeIsOnlyMentionNotifications(isOnlyMentionNotifications);\n    ActorClient.changeIsShowNotificationTextEnabled(isShowNotificationsTextEnabled);\n  }\n\n  __onDispatch(action) {\n    switch(action.type) {\n      case ActionTypes.PREFERENCES_MODAL_SHOW:\n        _isOpen = true;\n        this.__emitChange();\n        break;\n      case ActionTypes.PREFERENCES_MODAL_HIDE:\n        _isOpen = false;\n        this.__emitChange();\n        break;\n      case ActionTypes.PREFERENCES_SAVE:\n        this.savePreferences(action.preferences);\n        this.__emitChange();\n        break;\n      case ActionTypes.PREFERENCES_SESSION_LOAD_SUCCESS:\n        _sessions = action.response;\n        this.__emitChange();\n        break;\n      case ActionTypes.PREFERENCES_CHANGE_TAB:\n        _currentTab = action.tab;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.PREFERENCES_SESSION_TERMINATE:\n        _terminateSessionState[action.id] = AsyncActionStates.PROCESSING;\n        this.__emitChange();\n        break;\n      case ActionTypes.PREFERENCES_SESSION_TERMINATE_SUCCESS:\n        delete _terminateSessionState[action.id];\n        this.__emitChange();\n        break;\n      case ActionTypes.PREFERENCES_SESSION_TERMINATE_ERROR:\n        _terminateSessionState[action.id] = AsyncActionStates.FAILURE;\n        this.__emitChange();\n        break;\n\n      default:\n    }\n  };\n}\n\nexport default new PreferencesStore(Dispatcher);\n"]}