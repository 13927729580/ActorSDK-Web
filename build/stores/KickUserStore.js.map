{"version":3,"sources":["../../src/stores/KickUserStore.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,IAAM,YAAY,GAAG,QAAQ,CAAC;;AAE9B,IAAI,MAAM,GAAG,IAAI;IACb,cAAc,GAAG,EAAE,CAAC;;IAElB,aAAa;YAAb,aAAa;;WAAb,aAAa;0BAAb,aAAa;;kEAAb,aAAa;;;eAAb,aAAa;;iCACJ;AACX,UAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KACzB;;;sCAEiB,QAAQ,EAAE;AAC1B,UAAI,CAAC,EAAE,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;KACjC;;;yCAEoB,QAAQ,EAAE;AAC7B,UAAI,CAAC,cAAc,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;KAC7C;;;qCAEgB,GAAG,EAAE;AACpB,aAAQ,cAAc,CAAC,GAAG,CAAC,IAAI,qCAAkB,OAAO,CAAE;KAC3D;;;uCAEkB,GAAG,EAAE;AACtB,aAAO,cAAc,CAAC,GAAG,CAAC,CAAC;KAC5B;;;SAnBG,aAAa;;;AAsBnB,IAAI,qBAAqB,GAAG,IAAI,aAAa,EAAE,CAAC;;AAEhD,qBAAqB,CAAC,aAAa,GAAG,kCAAS,UAAA,MAAM,EAAI;AACvD,UAAQ,MAAM,CAAC,IAAI;AACjB,SAAK,+BAAY,kBAAkB;AACjC,UAAI,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,6BAAU,KAAK,EAAE;AACxC,cAAM,GAAG,sBAAY,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAC9C,6BAAqB,CAAC,UAAU,EAAE,CAAC;OACpC;AACD,YAAM;;AAAA,AAER,SAAK,+BAAY,SAAS;AACxB,oBAAc,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,qCAAkB,UAAU,CAAC;AAC1D,2BAAqB,CAAC,UAAU,EAAE,CAAC;AACnC,YAAM;AAAA,AACR,SAAK,+BAAY,iBAAiB;AAChC,aAAO,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAClC,2BAAqB,CAAC,UAAU,EAAE,CAAC;AACnC,YAAM;AAAA,AACR,SAAK,+BAAY,eAAe;AAC9B,oBAAc,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,qCAAkB,OAAO,CAAC;AACvD,2BAAqB,CAAC,UAAU,EAAE,CAAC;AACnC,YAAM;AAAA,GACT;CACF,CAAC,CAAC;;kBAEY,qBAAqB","file":"KickUserStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { EventEmitter } from 'events';\nimport { register } from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, PeerTypes, AsyncActionStates } from '../constants/ActorAppConstants';\n\nimport ActorClient from '../utils/ActorClient';\n\nconst CHANGE_EVENT = 'change';\n\nlet _group = null,\n    _kickUserState = [];\n\nclass KickUserStore extends EventEmitter {\n  emitChange() {\n    this.emit(CHANGE_EVENT);\n  }\n\n  addChangeListener(callback) {\n    this.on(CHANGE_EVENT, callback);\n  }\n\n  removeChangeListener(callback) {\n    this.removeListener(CHANGE_EVENT, callback);\n  }\n\n  getKickUserState(uid) {\n    return (_kickUserState[uid] || AsyncActionStates.PENDING);\n  }\n\n  resetKickUserState(uid) {\n    delete _kickUserState[uid];\n  }\n}\n\nlet KickUserStoreInstance = new KickUserStore();\n\nKickUserStoreInstance.dispatchToken = register(action => {\n  switch (action.type) {\n    case ActionTypes.SELECT_DIALOG_PEER:\n      if (action.peer.type === PeerTypes.GROUP) {\n        _group = ActorClient.getGroup(action.peer.id);\n        KickUserStoreInstance.emitChange();\n      }\n      break;\n\n    case ActionTypes.KICK_USER:\n      _kickUserState[action.uid] = AsyncActionStates.PROCESSING;\n      KickUserStoreInstance.emitChange();\n      break;\n    case ActionTypes.KICK_USER_SUCCESS:\n      delete _kickUserState[action.uid];\n      KickUserStoreInstance.emitChange();\n      break;\n    case ActionTypes.KICK_USER_ERROR:\n      _kickUserState[action.uid] = AsyncActionStates.FAILURE;\n      KickUserStoreInstance.emitChange();\n      break;\n  }\n});\n\nexport default KickUserStoreInstance;\n"]}