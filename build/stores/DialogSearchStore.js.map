{"version":3,"sources":["../../src/stores/DialogSearchStore.js"],"names":[],"mappings":";;;;;;AAIA;;AACA;;AACA;;;;AACA;;;;;;;;;;;;IAEM,iB;;;;;;;;;8BACJ,e,8BAAkB;AAChB,WAAO;AACL,cAAQ,KADH;AAEL,aAAO,EAFF;AAGL,cAAQ,mBAAQ;AACd,cAAM,IADQ;AAEd,cAAM,IAFQ;AAGd,eAAO,IAHO;AAId,gBAAQ;AAJM,OAAR,CAHH;AASL,cAAQ,mBAAQ;AACd,cAAM,EADQ;AAEd,cAAM,EAFQ;AAGd,eAAO,EAHO;AAId,gBAAQ;AAJM,OAAR,CATH;AAeL,cAAQ,mBAAQ;AACd,cAAM,qCAAkB,OADV;AAEd,cAAM,qCAAkB,OAFV;AAGd,eAAO,qCAAkB,OAHX;AAId,gBAAQ,qCAAkB;AAJZ,OAAR;AAfH,KAAP;AAsBD,G;;8BAED,M,mBAAO,K,EAAO,M,EAAQ;AACpB,YAAQ,OAAO,IAAf;AACE,WAAK,+BAAY,kBAAjB;AACE,4BACK,KADL;AAEE,kBAAQ;AAFV;;AAKF,WAAK,+BAAY,gBAAjB;AACA,WAAK,+BAAY,kBAAjB;AACE,eAAO,KAAK,eAAL,EAAP;;AAEF,WAAK,+BAAY,0BAAjB;AACE,4BACK,KADL;AAEE,iBAAO,OAAO;AAFhB;;AAKF,WAAK,+BAAY,0BAAjB;AACE,4BACK,KADL;AAEE,kBAAQ,MAAM,MAAN,CAAa,GAAb,CAAiB,MAAjB,EAAyB,OAAO,QAAhC,CAFV;AAGE,kBAAQ,MAAM,MAAN,CAAa,GAAb,CAAiB,MAAjB,EAAyB,qCAAkB,OAA3C;AAHV;;AAMF,WAAK,+BAAY,0BAAjB;AACE,4BACK,KADL;AAEE,kBAAQ,MAAM,MAAN,CAAa,GAAb,CAAiB,MAAjB,EAAyB,OAAO,QAAhC;AAFV;;AAKF,WAAK,+BAAY,2BAAjB;AACE,4BACK,KADL;AAEE,kBAAQ,MAAM,MAAN,CAAa,GAAb,CAAiB,OAAjB,EAA0B,OAAO,QAAjC;AAFV;;AAKF,WAAK,+BAAY,2BAAjB;AACE,4BACK,KADL;AAEE,kBAAQ,MAAM,MAAN,CAAa,GAAb,CAAiB,QAAjB,EAA2B,OAAO,QAAlC;AAFV;;AAKF;AACE,eAAO,KAAP;AA3CJ;AA6CD,G;;;;;kBAGY,IAAI,iBAAJ,8B","file":"DialogSearchStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { ReduceStore } from 'flux/utils';\nimport { Map } from 'immutable';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, AsyncActionStates } from '../constants/ActorAppConstants';\n\nclass DialogSearchStore extends ReduceStore {\n  getInitialState() {\n    return {\n      isOpen: false,\n      query: '',\n      filter: new Map({\n        text: true,\n        docs: true,\n        links: true,\n        photos: true\n      }),\n      result: new Map({\n        text: [],\n        docs: [],\n        links: [],\n        photos: []\n      }),\n      status: new Map({\n        text: AsyncActionStates.SUCCESS,\n        docs: AsyncActionStates.SUCCESS,\n        links: AsyncActionStates.SUCCESS,\n        photos: AsyncActionStates.SUCCESS\n      })\n    };\n  }\n\n  reduce(state, action) {\n    switch (action.type) {\n      case ActionTypes.DIALOG_SEARCH_SHOW:\n        return {\n          ...state,\n          isOpen: true\n        };\n\n      case ActionTypes.BIND_DIALOG_PEER:\n      case ActionTypes.DIALOG_SEARCH_HIDE:\n        return this.getInitialState();\n\n      case ActionTypes.DIALOG_SEARCH_CHANGE_QUERY:\n        return {\n          ...state,\n          query: action.query\n        }\n\n      case ActionTypes.DIALOG_SEARCH_TEXT_SUCCESS:\n        return {\n          ...state,\n          result: state.result.set('text', action.response),\n          status: state.result.set('text', AsyncActionStates.SUCCESS)\n        };\n\n      case ActionTypes.DIALOG_SEARCH_DOCS_SUCCESS:\n        return {\n          ...state,\n          result: state.result.set('docs', action.response)\n        };\n\n      case ActionTypes.DIALOG_SEARCH_LINKS_SUCCESS:\n        return {\n          ...state,\n          result: state.result.set('links', action.response)\n        };\n\n      case ActionTypes.DIALOG_SEARCH_PHOTO_SUCCESS:\n        return {\n          ...state,\n          result: state.result.set('photos', action.response)\n        };\n\n      default:\n        return state;\n    }\n  }\n}\n\nexport default new DialogSearchStore(Dispatcher);\n"]}