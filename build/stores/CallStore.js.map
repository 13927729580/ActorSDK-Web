{"version":3,"sources":["../../src/stores/CallStore.js"],"names":[],"mappings":";;;;;;AAIA;;AACA;;;;AACA;;;;;;;;;;;;IAEM,S;;;;;;;;;sBACJ,e,8BAAkB;AAChB,WAAO;AACL,cAAQ,KADH;AAEL,kBAAY,KAFP;AAGL,UAAI,IAHC;AAIL,YAAM,IAJD;AAKL,aAAO,IALF;AAML,eAAS,IANJ;AAOL,eAAS,KAPJ;AAQL,kBAAY;AARP,KAAP;AAUD,G;;sBAED,M,mBAAO,K,EAAO,M,EAAQ;AACpB,YAAO,OAAO,IAAd;AACE,WAAK,+BAAY,eAAjB;AACE,4BACK,KADL;AAEE,kBAAQ,IAFV;AAGE,cAAI,OAAO;AAHb;AAKF,WAAK,+BAAY,eAAjB;AACE,eAAO,KAAK,eAAL,EAAP;AACF,WAAK,+BAAY,YAAjB;AACE,4BACK,KADL;AAEE,gBAAM,OAFR;AAGE,gBAAM,OAAO,IAAP,CAAY,IAHpB;AAIE,iBAAO,OAAO,IAAP,CAAY,KAJrB;AAKE,mBAAS,OAAO,IAAP,CAAY,OALvB;AAME,sBAAY,OAAO,IAAP,CAAY;AAN1B;AAQF,WAAK,+BAAY,iBAAjB;AACE,4BACK,KADL;AAEE,gBAAM,OAAO;AAFf;AAIF,WAAK,+BAAY,gBAAjB;AACE,4BACK,KADL;AAEE,mBAAS,CAAC,MAAM;AAFlB;AAIF,WAAK,+BAAY,iBAAjB;AACE,4BACK,KADL;AAEE,sBAAY,CAAC,MAAM;AAFrB;AAIF;AACE,eAAO,KAAP;AAlCJ;AAoCD,G;;;;;kBAGY,IAAI,SAAJ,8B","file":"CallStore.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport { ReduceStore } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\n\nclass CallStore extends ReduceStore {\n  getInitialState() {\n    return {\n      isOpen: false,\n      isFloating: false,\n      id: null,\n      peer: null,\n      state: null,\n      members: null,\n      isMuted: false,\n      isOutgoing: false\n    };\n  }\n\n  reduce(state, action) {\n    switch(action.type) {\n      case ActionTypes.CALL_MODAL_OPEN:\n        return {\n          ...state,\n          isOpen: true,\n          id: action.id\n        };\n      case ActionTypes.CALL_MODAL_HIDE:\n        return this.getInitialState();\n      case ActionTypes.CALL_CHANGED:\n        return {\n          ...state,\n          time: '00:00',\n          peer: action.call.peer,\n          state: action.call.state,\n          members: action.call.members,\n          isOutgoing: action.call.isOutgoing\n        };\n      case ActionTypes.CALL_TIME_CHANGED:\n        return {\n          ...state,\n          time: action.time\n        };\n      case ActionTypes.CALL_MUTE_TOGGLE:\n        return {\n          ...state,\n          isMuted: !state.isMuted\n        };\n      case ActionTypes.CALL_FLOAT_TOGGLE:\n        return {\n          ...state,\n          isFloating: !state.isFloating\n        };\n      default:\n        return state;\n    }\n  }\n}\n\nexport default new CallStore(Dispatcher);\n"]}