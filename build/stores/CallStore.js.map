{"version":3,"sources":["../../src/stores/CallStore.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,IAAI,OAAO,GAAG,KAAK,CAAC;AACpB,IAAI,GAAG,YAAA;IAAE,KAAK,YAAA;IAAE,QAAQ,YAAA;IAAE,KAAK,YAAA;IAAE,MAAM,YAAA,CAAC;;IAElC,SAAS;YAAT,SAAS;;AACb,WADI,SAAS,CACD,UAAU,EAAE;0BADpB,SAAS;;kEAAT,SAAS,aAEL,UAAU;GACjB;;eAHG,SAAS;;6BAKJ;AACP,aAAO,OAAO,CAAC;KAChB;;;gCAEW;AACV,aAAO,GAAG,CAAC;KACZ;;;kCAEa;AACZ,aAAO,KAAK,CAAC;KACd;;;qCAEgB;AACf,aAAO,QAAQ,CAAC;KACjB;;;kCAEa;AACZ,aAAO,KAAK,CAAC;KACd;;;mCAEc;AACb,aAAO,MAAM,CAAC;KACf;;;iCAEY,MAAM,EAAE;AACnB,cAAO,MAAM,CAAC,IAAI;AAChB,aAAK,+BAAY,eAAe;8BACT,MAAM,CAAC,KAAK;cAAzB,EAAE,iBAAF,EAAE;cAAE,IAAI,iBAAJ,IAAI;;AAChB,iBAAO,GAAG,IAAI,CAAC;AACf,aAAG,GAAG,EAAE,CAAC;AACT,eAAK,GAAG,IAAI,CAAC;AACb,cAAI,CAAC,YAAY,EAAE,CAAC;AACpB,gBAAM;AAAA,AACR,aAAK,+BAAY,eAAe;AAC9B,iBAAO,GAAG,KAAK,CAAC;AAChB,cAAI,CAAC,YAAY,EAAE,CAAC;AACpB,gBAAM;AAAA,AACR,aAAK,+BAAY,YAAY;6BACM,MAAM,CAAC,IAAI;cAApC,OAAO,gBAAP,OAAO;cAAE,IAAI,gBAAJ,IAAI;cAAE,KAAK,gBAAL,KAAK;;AAC5B,kBAAQ,GAAG,OAAO,CAAC;AACnB,eAAK,GAAG,IAAI,CAAC;AACb,gBAAM,GAAG,KAAK,CAAC;AACf,cAAI,CAAC,YAAY,EAAE,CAAC;AACpB,gBAAM;AAAA,AACR,aAAK,+BAAY,IAAI;AACnB,iBAAO,CAAC,KAAK,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC;AAC1C,gBAAM;AAAA,AACR,gBAAQ;OACT;KACF;;;SAtDG,SAAS;;;kBAyDA,IAAI,SAAS,8BAAY","file":"CallStore.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\n\nlet _isOpen = false;\nlet _id, _type, _members, _peer, _state;\n\nclass CallStore extends Store {\n  constructor(dispatcher) {\n    super(dispatcher);\n  }\n\n  isOpen() {\n    return _isOpen;\n  }\n\n  getCallId() {\n    return _id;\n  }\n\n  getCallType() {\n    return _type;\n  }\n\n  getCallMembers() {\n    return _members;\n  }\n\n  getCallPeer() {\n    return _peer;\n  }\n\n  getCallState() {\n    return _state;\n  }\n\n  __onDispatch(action) {\n    switch(action.type) {\n      case ActionTypes.CALL_MODAL_OPEN:\n        const { id, type } = action.event;\n        _isOpen = true;\n        _id = id;\n        _type = type;\n        this.__emitChange();\n        break;\n      case ActionTypes.CALL_MODAL_HIDE:\n        _isOpen = false;\n        this.__emitChange();\n        break;\n      case ActionTypes.CALL_CHANGED:\n        const { members, peer, state } = action.call;\n        _members = members;\n        _peer = peer;\n        _state = state;\n        this.__emitChange();\n        break;\n      case ActionTypes.CALL:\n        console.debug('ActionTypes.CALL', action);\n        break;\n      default:\n    }\n  };\n}\n\nexport default new CallStore(Dispatcher);\n"]}