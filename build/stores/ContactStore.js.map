{"version":3,"sources":["../../src/stores/ContactStore.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,IAAM,qBAAqB,GAAG,iBAAiB;;;;AAAC,AAEhD,IAAI,SAAS,GAAG,EAAE,CAAC;AACnB,IAAI,eAAe,GAAG,KAAK,CAAC;;AAE5B,IAAI,YAAY,GAAG,4BAAO,EAAE,EAAE,QAbrB,YAAY,CAasB,SAAS,EAAE;AACpD,YAAU,EAAE,sBAAW;AACrB,QAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;GAClC;;AAED,mBAAiB,EAAE,2BAAS,QAAQ,EAAE;AACpC,QAAI,CAAC,EAAE,CAAC,qBAAqB,EAAE,QAAQ,CAAC,CAAC;GAC1C;;AAED,sBAAoB,EAAE,8BAAS,QAAQ,EAAE;AACvC,QAAI,CAAC,cAAc,CAAC,qBAAqB,EAAE,QAAQ,CAAC,CAAC;GACtD;;AAED,aAAW,EAAE,uBAAW;AACtB,WAAO,SAAS,CAAC;GAClB;;AAED,gBAAc,EAAE,0BAAW;AACzB,WAAO,eAAe,CAAC;GACxB;CACF,CAAC,CAAC;;AAEH,YAAY,CAAC,aAAa,GAAG,wBAjCpB,QAAQ,EAiCqB,UAAS,MAAM,EAAE;AACrD,UAAO,MAAM,CAAC,IAAI;AAChB,SAAK,mBAlCA,WAAW,CAkCC,iBAAiB;AAChC,qBAAe,GAAG,IAAI,CAAC;AACvB,kBAAY,CAAC,UAAU,EAAE,CAAC;AAC1B,YAAM;;AAAA,AAER,SAAK,mBAvCA,WAAW,CAuCC,iBAAiB;AAChC,qBAAe,GAAG,KAAK,CAAC;AACxB,kBAAY,CAAC,UAAU,EAAE,CAAC;AAC1B,YAAM;;AAAA,AAER,SAAK,mBA5CA,WAAW,CA4CC,oBAAoB;;AAEnC,eAAS,GAAG,YAlDT,MAAM,EAkDU,MAAM,CAAC,QAAQ,EAAE,UAAC,OAAO,EAAK;AAC/C,YAAI,OAAO,CAAC,GAAG,IAAI,sBAAY,MAAM,EAAE,EAAE;AACvC,iBAAO,OAAO,CAAC;SAChB;OACF,CAAC,CAAC;AACH,kBAAY,CAAC,UAAU,EAAE,CAAC;AAC1B,YAAM;;AAAA,AAER,SAAK,mBAtDA,WAAW,CAsDC,WAAW,CAAC;AAC7B,SAAK,mBAvDA,WAAW,CAuDC,cAAc;AAC7B,kBAAY,CAAC,UAAU,EAAE,CAAC;AAC1B,YAAM;AAAA,AACR,YAAQ;GACT;CACF,CAAC,CAAC;;kBAEY,YAAY","file":"ContactStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { filter } from 'lodash';\nimport { EventEmitter } from 'events';\nimport assign from 'object-assign';\nimport { register , waitFor } from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\nimport ActorClient from '../utils/ActorClient';\n\nimport ContactActionCreators from '../actions/ContactActionCreators';\n\nconst CONTACTS_CHANGE_EVENT = 'contacts_change';\n\nlet _contacts = [];\nlet _isContactsOpen = false;\n\nvar ContactStore = assign({}, EventEmitter.prototype, {\n  emitChange: function() {\n    this.emit(CONTACTS_CHANGE_EVENT);\n  },\n\n  addChangeListener: function(callback) {\n    this.on(CONTACTS_CHANGE_EVENT, callback);\n  },\n\n  removeChangeListener: function(callback) {\n    this.removeListener(CONTACTS_CHANGE_EVENT, callback);\n  },\n\n  getContacts: function() {\n    return _contacts;\n  },\n\n  isContactsOpen: function() {\n    return _isContactsOpen;\n  }\n});\n\nContactStore.dispatchToken = register(function(action) {\n  switch(action.type) {\n    case ActionTypes.CONTACT_LIST_SHOW:\n      _isContactsOpen = true;\n      ContactStore.emitChange();\n      break;\n\n    case ActionTypes.CONTACT_LIST_HIDE:\n      _isContactsOpen = false;\n      ContactStore.emitChange();\n      break;\n\n    case ActionTypes.CONTACT_LIST_CHANGED:\n      // Remove current user from contacts list\n      _contacts = filter(action.contacts, (contact) => {\n        if (contact.uid != ActorClient.getUid()) {\n          return contact;\n        }\n      });\n      ContactStore.emitChange();\n      break;\n\n    case ActionTypes.CONTACT_ADD:\n    case ActionTypes.CONTACT_REMOVE:\n      ContactStore.emitChange();\n      break;\n    default:\n  }\n});\n\nexport default ContactStore;\n"]}