{"version":3,"sources":["../../src/stores/DraftStore.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,IAAM,gBAAgB,GAAG,YAAY,CAAC;;AAEtC,IAAI,MAAM,GAAG,IAAI,CAAC;;AAElB,IAAM,UAAU,GAAG,4BAAO,EAAE,EAAE,QAbrB,YAAY,CAasB,SAAS,EAAE;AACpD,eAAa,2BAAG;AACd,QAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;GAC7B;AAED,sBAAoB,gCAAC,QAAQ,EAAE;AAC7B,QAAI,CAAC,EAAE,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;GACrC;AAED,yBAAuB,mCAAC,QAAQ,EAAE;AAChC,QAAI,CAAC,cAAc,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;GACjD;AAED,UAAQ,sBAAG;AACT,WAAO,MAAM,CAAC;GACf;CACF,CAAC,CAAC;;AAEH,UAAU,CAAC,aAAa,GAAG,6BAAmB,QAAQ,CAAC,UAAC,MAAM,EAAK;AACjE,UAAQ,MAAM,CAAC,IAAI;AACjB,SAAK,mBA3BA,WAAW,CA2BC,UAAU;AACzB,YAAM,GAAG,sBAAY,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC5C,gBAAU,CAAC,aAAa,EAAE,CAAC;AAC3B,YAAM;;AAAA,AAER,SAAK,mBAhCA,WAAW,CAgCC,UAAU;AACzB,YAAM,GAAG,MAAM,CAAC,KAAK,CAAC;AACtB,UAAI,MAAM,CAAC,OAAO,EAAE;AAClB,YAAM,IAAI,GAAG,sBAAY,cAAc,EAAE,CAAC;AAC1C,8BAAY,SAAS,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;OACrC;AACD,YAAM;;AAAA,AAER,SAAK,mBAxCA,WAAW,CAwCC,kBAAkB;AACjC,UAAI,MAAM,KAAK,IAAI,EAAE;AACnB,YAAM,QAAQ,GAAG,sBAAY,WAAW,EAAE,CAAC;AAC3C,8BAAY,SAAS,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;OACzC;AACD,YAAM,GAAG,sBAAY,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC5C,gBAAU,CAAC,aAAa,EAAE,CAAC;AAC3B,YAAM;;AAAA,AAER,YAAQ;GACT;CACF,CAAC,CAAC;;kBAEY,UAAU","file":"DraftStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { EventEmitter } from 'events';\nimport assign from 'object-assign';\n\nimport ActorClient from '../utils/ActorClient';\n\nimport ActorAppDispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\nimport DialogStore from './DialogStore';\n\nconst DRAFT_LOAD_EVENT = 'draft_load';\n\nlet _draft = null;\n\nconst DraftStore = assign({}, EventEmitter.prototype, {\n  emitLoadDraft() {\n    this.emit(DRAFT_LOAD_EVENT);\n  },\n\n  addLoadDraftListener(callback) {\n    this.on(DRAFT_LOAD_EVENT, callback);\n  },\n\n  removeLoadDraftListener(callback) {\n    this.removeListener(DRAFT_LOAD_EVENT, callback);\n  },\n\n  getDraft() {\n    return _draft;\n  }\n});\n\nDraftStore.dispatchToken = ActorAppDispatcher.register((action) => {\n  switch (action.type) {\n    case ActionTypes.DRAFT_LOAD:\n      _draft = ActorClient.loadDraft(action.peer);\n      DraftStore.emitLoadDraft();\n      break;\n\n    case ActionTypes.DRAFT_SAVE:\n      _draft = action.draft;\n      if (action.saveNow) {\n        const peer = DialogStore.getCurrentPeer();\n        ActorClient.saveDraft(peer, _draft);\n      }\n      break;\n\n    case ActionTypes.SELECT_DIALOG_PEER:\n      if (_draft !== null) {\n        const lastPeer = DialogStore.getLastPeer();\n        ActorClient.saveDraft(lastPeer, _draft);\n      }\n      _draft = ActorClient.loadDraft(action.peer);\n      DraftStore.emitLoadDraft();\n      break;\n\n    default:\n  }\n});\n\nexport default DraftStore;\n"]}