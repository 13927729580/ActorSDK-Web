{"version":3,"sources":["../../src/stores/QuickSearchStore.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,IAAI,OAAO,GAAG,KAAK;IACf,KAAK,GAAG,EAAE;IACV,QAAQ,GAAG,EAAE,CAAC;;IAEZ,gBAAgB;YAAhB,gBAAgB;;AACpB,WADI,gBAAgB,CACR,UAAU,EAAE;0BADpB,gBAAgB;;uEAAhB,gBAAgB,aAEZ,UAAU;;UA4BlB,YAAY,GAAG,UAAC,MAAM,EAAK;AACzB,cAAQ,MAAM,CAAC,IAAI;AACjB,aAAK,mBAtCF,WAAW,CAsCG,iBAAiB;AAChC,iBAAO,GAAG,IAAI,CAAC;AACf,gBAAK,iBAAiB,CAAC,EAAE,CAAC,CAAC;AAC3B,gBAAK,YAAY,EAAE,CAAC;AACpB,gBAAM;;AAAA,AAER,aAAK,mBA5CF,WAAW,CA4CG,iBAAiB;AAChC,iBAAO,GAAG,KAAK,CAAC;AAChB,kBAAQ,GAAG,EAAE,CAAC;AACd,gBAAK,YAAY,EAAE,CAAC;AACpB,gBAAM;;AAAA,AAER,aAAK,mBAlDF,WAAW,CAkDG,oBAAoB;AACnC,eAAK,GAAG,MAAM,CAAC,IAAI,CAAC;AACpB,gBAAK,YAAY,EAAE,CAAC;AACpB,gBAAM;;AAAA,AAER,aAAK,mBAvDF,WAAW,CAuDG,YAAY;AAC3B,gBAAK,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AACrC,gBAAM;AAAA,OACT;KACF;;;GAlDA;;eAHG,gBAAgB;;6BAKX;AACP,aAAO,OAAO,CAAC;KAChB;;;iCAEY;AACX,aAAO,QAAQ,CAAC;KACjB;;;sCAEiB,KAAK,EAAE;AACvB,UAAI,OAAO,GAAG,EAAE,CAAC;;AAEjB,UAAI,KAAK,KAAK,EAAE,EAAE;AAChB,eAAO,GAAG,KAAK,CAAC;OACjB,MAAM;AACL,oBA7BG,OAAO,EA6BF,KAAK,EAAE,UAAC,MAAM,EAAK;AACzB,cAAI,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,EAAE;AACrE,mBAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;WACtB;SACF,CAAC,CAAA;OACH;;AAED,cAAQ,GAAG,OAAO,CAAC;AACnB,UAAI,CAAC,YAAY,EAAE,CAAC;KACrB;;;SA5BG,gBAAgB;UARb,KAAK;;kBAgEC,IAAI,gBAAgB,8BAAY","file":"QuickSearchStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { forEach } from 'lodash';\n\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, PeerTypes } from '../constants/ActorAppConstants';\n\nlet _isOpen = false,\n    _list = [],\n    _results = [];\n\nclass QuickSearchStore extends Store {\n  constructor(dispatcher) {\n    super(dispatcher);\n  }\n\n  isOpen() {\n    return _isOpen;\n  }\n\n  getResults() {\n    return _results;\n  }\n\n  handleSearchQuery(query) {\n    let results = [];\n\n    if (query === '') {\n      results = _list;\n    } else {\n      forEach(_list, (result) => {\n        if (result.peerInfo.title.toLowerCase().includes(query.toLowerCase())) {\n          results.push(result);\n        }\n      })\n    }\n\n    _results = results;\n    this.__emitChange();\n  }\n\n  __onDispatch = (action) => {\n    switch (action.type) {\n      case ActionTypes.QUICK_SEARCH_SHOW:\n        _isOpen = true;\n        this.handleSearchQuery('');\n        this.__emitChange();\n        break;\n\n      case ActionTypes.QUICK_SEARCH_HIDE:\n        _isOpen = false;\n        _results = [];\n        this.__emitChange();\n        break;\n\n      case ActionTypes.QUICK_SEARCH_CHANGED:\n        _list = action.list;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.QUICK_SEARCH:\n        this.handleSearchQuery(action.query);\n        break;\n    }\n  };\n}\n\nexport default new QuickSearchStore(Dispatcher);\n"]}