{"version":3,"sources":["../../src/stores/LoginStore.js"],"names":[],"mappings":"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","file":"LoginStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, AuthSteps } from '../constants/ActorAppConstants';\n\nimport ActorClient from '../utils/ActorClient';\n\nimport { getIntlData } from '../l18n';\n\nlet step = AuthSteps.LOGIN_WAIT,\n    errors = {\n      login: null,\n      code: null,\n      signup: null\n    },\n    login = '',\n    code = '',\n    name = '',\n    isCodeRequested = false,\n    isCodeSended = false,\n    isSignupStarted = false,\n    myUid = null;\n\nclass LoginStore extends Store {\n  constructor(dispatcher) {\n    super(dispatcher);\n\n    // TODO: do not use intlData here. save error codes and send them to ui.\n    this.intl = getIntlData();\n  }\n\n  getStep = () => step;\n  getErrors = () => errors;\n  getLogin = () => login;\n  getCode = () => code;\n  getName = () => name;\n  isCodeRequested = () => isCodeRequested;\n  isCodeSended = () => isCodeSended;\n  isSignupStarted = () => isSignupStarted;\n  getMyId = () => myUid;\n  isLoggedIn = () => ActorClient.isLoggedIn();\n\n  resetStore = () => {\n    step = AuthSteps.LOGIN_WAIT;\n    errors = {\n      login: null,\n      code: null,\n      signup: null\n    };\n    login = code = name = '';\n    isCodeRequested = isCodeSended = isSignupStarted = false;\n    myUid = null;\n  };\n\n  __onDispatch(action) {\n    switch (action.type) {\n\n      case ActionTypes.AUTH_CHANGE_LOGIN:\n        login = action.login;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_CHANGE_CODE:\n        code = action.code;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_CHANGE_NAME:\n        name = action.name;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.AUTH_CODE_REQUEST:\n        isCodeRequested = true;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_CODE_REQUEST_SUCCESS:\n        step = AuthSteps.CODE_WAIT;\n        errors.login = null;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_CODE_REQUEST_FAILURE:\n        switch (action.error) {\n          case 'PHONE_NUMBER_INVALID':\n            errors.login = this.intl.messages['login.errors.numberInvalid'];\n            break;\n          case 'CODE_WAIT':\n            errors.login = this.intl.messages['login.errors.codeWait'];\n            break;\n          default:\n            errors.login = action.error;\n        }\n        isCodeRequested = false;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.AUTH_CODE_SEND:\n        isCodeSended = true;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_CODE_SEND_SUCCESS:\n        errors.code = null;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_CODE_SEND_FAILURE:\n        switch (action.error) {\n          case 'PHONE_CODE_INVALID':\n          case 'EMAIL_CODE_INVALID':\n            errors.code = this.intl.messages['login.errors.codeInvalid'];\n            break;\n          case 'PHONE_CODE_EXPIRED':\n            errors.code = this.intl.messages['login.errors.codeExpired'];\n            break;\n          default:\n            errors.code = action.error;\n        }\n        isCodeSended = false;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.AUTH_SIGNUP_START:\n        step = AuthSteps.NAME_WAIT;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.AUTH_SIGNUP:\n        isSignupStarted = true;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_SIGNUP_SUCCESS:\n        errors.signup = null;\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_SIGNUP_FAILURE:\n        switch (action.error) {\n          case 'NAME_INVALID':\n            errors.signup = this.intl.messages['login.errors.nameInvalid'];\n            break;\n          default:\n            errors.signup = action.error;\n        }\n        isSignupStarted = false;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.AUTH_RESTART:\n        this.resetStore();\n        this.__emitChange();\n        break;\n\n      case ActionTypes.AUTH_SET_LOGGED_IN:\n        myUid = ActorClient.getUid();\n        const user = ActorClient.getUser(myUid);\n        this.__emitChange();\n        break;\n      case ActionTypes.AUTH_SET_LOGGED_OUT:\n        localStorage.clear();\n        location.reload();\n        break;\n      default:\n    }\n  };\n}\n\nexport default new LoginStore(Dispatcher);\n"]}