{"version":3,"sources":["../../src/stores/CreateGroupStore.js"],"names":[],"mappings":";;;;AAIA;;;;AAEA;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAI,aAAa,KAAjB;IACI,eAAe,oCAAiB,UADpC;IAEI,aAAa,EAFjB;IAGI,mBAAmB,IAAI,oBAAU,GAAd,EAHvB;;IAKM,gB;;;AACJ,4BAAY,UAAZ,EAAwB;AAAA;;AAAA,4CACtB,kBAAM,UAAN,CADsB;AAEvB;;6BAED,W,0BAAc;AACZ,WAAO,UAAP;AACD,G;;6BAED,c,6BAAiB;AACf,WAAO,YAAP;AACD,G;;6BAED,Y,2BAAe;AACb,WAAO,UAAP;AACD,G;;6BAED,kB,iCAAqB;AACnB,WAAO,gBAAP;AACD,G;;6BAED,U,yBAAa;AACX,iBAAa,KAAb;AACA,mBAAe,oCAAiB,UAAhC;AACA,iBAAa,EAAb;AACA,uBAAmB,IAAI,oBAAU,GAAd,EAAnB;AACD,G;;6BAED,Y,yBAAa,M,EAAQ;AACnB,YAAQ,OAAO,IAAf;;AAEE,WAAK,+BAAY,uBAAjB;AACE,qBAAa,IAAb;AACA,aAAK,YAAL;AACA;AACF,WAAK,+BAAY,wBAAjB;AACE,aAAK,UAAL;AACA,aAAK,YAAL;AACA;;AAEF,WAAK,+BAAY,qBAAjB;AACE,uBAAe,oCAAiB,kBAAhC;AACA,qBAAa,OAAO,IAApB;AACA,aAAK,YAAL;AACA;;;;;;;AAOF,WAAK,+BAAY,wBAAjB;AACE,2BAAmB,OAAO,eAA1B;AACA,aAAK,YAAL;AACA;;AAEF,WAAK,+BAAY,YAAjB;AACE,uBAAe,oCAAiB,gBAAhC;AACA,aAAK,YAAL;AACA;AACF,WAAK,+BAAY,oBAAjB;AACE,aAAK,UAAL;AACA,aAAK,YAAL;AACA;AACF,WAAK,+BAAY,kBAAjB;AACE,gBAAQ,KAAR,CAAc,wBAAd,EAAwC,OAAO,KAA/C;AACA,aAAK,YAAL;AACA;AAtCJ;AAwCD,G;;;;;kBAGY,IAAI,gBAAJ,8B","file":"CreateGroupStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport Immutable from 'immutable';\n\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes, CreateGroupSteps } from '../constants/ActorAppConstants';\n\nlet _modalOpen = false,\n    _currentStep = CreateGroupSteps.NAME_INPUT,\n    _groupName = '',\n    _selectedUserIds = new Immutable.Set();\n\nclass CreateGroupStore extends Store {\n  constructor(dispatcher) {\n    super(dispatcher);\n  }\n\n  isModalOpen() {\n    return _modalOpen;\n  }\n\n  getCurrentStep() {\n    return _currentStep;\n  }\n\n  getGroupName() {\n    return _groupName;\n  }\n\n  getSelectedUserIds() {\n    return _selectedUserIds;\n  }\n\n  resetStore() {\n    _modalOpen = false;\n    _currentStep = CreateGroupSteps.NAME_INPUT;\n    _groupName = '';\n    _selectedUserIds = new Immutable.Set();\n  }\n\n  __onDispatch(action) {\n    switch (action.type) {\n\n      case ActionTypes.GROUP_CREATE_MODAL_OPEN:\n        _modalOpen = true;\n        this.__emitChange();\n        break;\n      case ActionTypes.GROUP_CREATE_MODAL_CLOSE:\n        this.resetStore();\n        this.__emitChange();\n        break;\n\n      case ActionTypes.GROUP_CREATE_SET_NAME:\n        _currentStep = CreateGroupSteps.CONTACTS_SELECTION;\n        _groupName = action.name;\n        this.__emitChange();\n        break;\n\n      //case ActionTypes.GROUP_CREATE_SET_AVATAR:\n      //  _avatar = action.avatar;\n      //  this.__emitChange();\n      //  break;\n\n      case ActionTypes.GROUP_CREATE_SET_MEMBERS:\n        _selectedUserIds = action.selectedUserIds;\n        this.__emitChange();\n        break;\n\n      case ActionTypes.GROUP_CREATE:\n        _currentStep = CreateGroupSteps.CREATION_STARTED;\n        this.__emitChange();\n        break;\n      case ActionTypes.GROUP_CREATE_SUCCESS:\n        this.resetStore();\n        this.__emitChange();\n        break;\n      case ActionTypes.GROUP_CREATE_ERROR:\n        console.error('Failed to create group', action.error);\n        this.__emitChange();\n        break;\n    }\n  }\n}\n\nexport default new CreateGroupStore(Dispatcher);\n"]}