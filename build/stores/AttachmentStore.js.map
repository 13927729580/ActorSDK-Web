{"version":3,"sources":["../../src/stores/AttachmentStore.js"],"names":[],"mappings":";;;;AAIA;;AAEA;;AACA;;;;AACA;;;;;;;;;;;;AAEA,IAAI,UAAU,KAAd;IACI,eAAe,EADnB;IAEI,iBAAiB,CAFrB;;AAIA,IAAM,kBAAkB,IAAxB;;AAEA,IAAM,aAAa,SAAb,UAAa,CAAC,IAAD,EAAO,QAAP,EAAoB;AACrC,OAAK,gBAAL,GAAwB,KAAK,gBAAL,GAAwB,KAAK,gBAA7B,GAAgD,IAAI,IAAJ,EAAxE;AACA,OAAK,IAAL,GAAY,WAAW,QAAX,GAAyB,KAAK,gBAA9B,SAAkD,KAAK,IAAL,CAAU,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAA9D;AACA,SAAO,IAAP;AACD,CAJD;;IAOM,e;;;AACJ,2BAAY,UAAZ,EAAwB;AAAA;;AAAA,4CACtB,kBAAM,UAAN,CADsB;AAEvB;;4BAED,M,qBAAS;AACP,WAAO,OAAP;AACD,G;;4BAED,iB,gCAAoB;AAClB,WAAO,YAAP;AACD,G;;4BAED,a,4BAAsC;AAAA,QAAxB,KAAwB,yDAAhB,cAAgB;;AACpC,WAAO,aAAa,KAAb,CAAP;AACD,G;;4BAED,gB,+BAAmB;AACjB,WAAO,cAAP;AACD,G;;4BAED,gB,+BAAyC;AAAA,QAAxB,KAAwB,yDAAhB,cAAgB;;AACvC,iBAAa,MAAb,CAAoB,KAApB,EAA2B,CAA3B;;AAEA,QAAI,aAAa,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,WAAK,UAAL;AACD;;AAED,qBAAiB,CAAjB,C;AACD,G;;4BAED,U,yBAAa;AACX,cAAU,KAAV;AACA,mBAAe,EAAf;AACA,qBAAiB,CAAjB;AACD,G;;4BAED,Y,yBAAa,M,EAAQ;AACnB,YAAQ,OAAO,IAAf;AACE,WAAK,+BAAY,qBAAjB;AACE,kBAAU,IAAV;AACA,uBAAe,iBAAI,OAAO,WAAX,EAAwB,UAAC,IAAD,EAAU;AAC/C,cAAI,gBAAgB,IAAhB,IAAwB,KAA5B,EAAmC;AACjC,mBAAO,WAAW,IAAX,CAAP;AACD;;AAED,cAAM,UAAU,KAAK,IAAL,CAAU,QAAV,CAAmB,OAAnB,KAA+B,KAAK,IAAL,KAAc,WAA7D;AACA,iBAAO;AACL,4BADK;AAEL,2BAAe,eAFV;AAGL;AAHK,WAAP;AAKD,SAXc,CAAf;AAYA,aAAK,YAAL;AACA;AACF,WAAK,+BAAY,qBAAjB;AACE,aAAK,UAAL;AACA,aAAK,YAAL;AACA;AACF,WAAK,+BAAY,iBAAjB;AACE,yBAAiB,OAAO,KAAxB;AACA,aAAK,YAAL;AACA;AACF,WAAK,+BAAY,iBAAjB;AACE,qBAAa,cAAb,EAA6B,aAA7B,GAA6C,OAAO,aAApD;AACA,aAAK,YAAL;AACA;AACF,WAAK,+BAAY,iBAAjB;AACA,WAAK,+BAAY,eAAjB;AACE,aAAK,gBAAL;AACA,aAAK,YAAL;AACA;AACF,WAAK,+BAAY,mBAAjB;AACE,aAAK,UAAL;AACA,aAAK,YAAL;AACA;AACF;AAtCF;AAwCD,G;;;;;kBAGY,IAAI,eAAJ,8B","file":"AttachmentStore.js","sourcesContent":["/*\n * Copyright (C) 2015 Actor LLC. <https://actor.im>\n */\n\nimport { map } from 'lodash';\n\nimport { Store } from 'flux/utils';\nimport Dispatcher from '../dispatcher/ActorAppDispatcher';\nimport { ActionTypes } from '../constants/ActorAppConstants';\n\nlet _isOpen = false,\n    _attachments = [],\n    _selectedIndex = 0;\n\nconst SEND_AS_PICTURE = true;\n\nconst blobToFile = (blob, fileName) => {\n  blob.lastModifiedDate = blob.lastModifiedDate ? blob.lastModifiedDate : new Date();\n  blob.name = fileName ? fileName : `${blob.lastModifiedDate}.${blob.type.split('/')[1]}`;\n  return blob;\n};\n\n\nclass AttachmentStore extends Store {\n  constructor(dispatcher) {\n    super(dispatcher);\n  }\n\n  isOpen() {\n    return _isOpen;\n  }\n\n  getAllAttachments() {\n    return _attachments;\n  }\n\n  getAttachment(index = _selectedIndex) {\n    return _attachments[index];\n  }\n\n  getSelectedIndex() {\n    return _selectedIndex;\n  }\n\n  deleteAttachment(index = _selectedIndex) {\n    _attachments.splice(index, 1);\n\n    if (_attachments.length === 0) {\n      this.resetStore();\n    }\n\n    _selectedIndex = 0; // TODO: select relevant index\n  }\n\n  resetStore() {\n    _isOpen = false;\n    _attachments = [];\n    _selectedIndex = 0;\n  }\n\n  __onDispatch(action) {\n    switch (action.type) {\n      case ActionTypes.ATTACHMENT_MODAL_SHOW:\n        _isOpen = true;\n        _attachments = map(action.attachments, (file) => {\n          if (file instanceof File == false) {\n            file = blobToFile(file);\n          }\n\n          const isImage = file.type.includes('image') && file.type !== 'image/gif';\n          return {\n            isImage,\n            sendAsPicture: SEND_AS_PICTURE,\n            file\n          }\n        });\n        this.__emitChange();\n        break;\n      case ActionTypes.ATTACHMENT_MODAL_HIDE:\n        this.resetStore();\n        this.__emitChange();\n        break;\n      case ActionTypes.ATTACHMENT_SELECT:\n        _selectedIndex = action.index;\n        this.__emitChange();\n        break;\n      case ActionTypes.ATTACHMENT_CHANGE:\n        _attachments[_selectedIndex].sendAsPicture = action.sendAsPicture;\n        this.__emitChange();\n        break;\n      case ActionTypes.ATTACHMENT_DELETE:\n      case ActionTypes.ATTACHMENT_SEND:\n        this.deleteAttachment();\n        this.__emitChange();\n        break;\n      case ActionTypes.ATTACHMENT_SEND_ALL:\n        this.resetStore();\n        this.__emitChange();\n        break;\n      default:\n    }\n  }\n}\n\nexport default new AttachmentStore(Dispatcher);\n"]}